/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 02 18:01:14 GMT 2019
 */

package org.antlr.v4.codegen.target;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.Set;
import org.antlr.runtime.ClassicToken;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import org.antlr.v4.codegen.CodeGenerator;
import org.antlr.v4.codegen.target.Python2Target;
import org.antlr.v4.tool.ast.AltAST;
import org.antlr.v4.tool.ast.BlockAST;
import org.antlr.v4.tool.ast.GrammarAST;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.stringtemplate.v4.STGroup;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Python2Target_ESTest extends Python2Target_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      Locale locale0 = Locale.FRENCH;
      String string0 = python2Target_PythonStringRenderer0.toString((Object) null, "jT.r?M3j8ZZp:2X2", locale0);
      assertEquals("jT.r?M3j8ZZp:2X2", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target((CodeGenerator) null);
      CommonToken commonToken0 = (CommonToken)Token.INVALID_TOKEN;
      BlockAST blockAST0 = new BlockAST(commonToken0);
      boolean boolean0 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(blockAST0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target((CodeGenerator) null);
      // Undeclared exception!
      try { 
        python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode((GrammarAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python2Target", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target((CodeGenerator) null);
      Set<String> set0 = python2Target0.getBadWords();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target((CodeGenerator) null);
      ClassicToken classicToken0 = new ClassicToken((-86), "coerce");
      AltAST altAST0 = new AltAST(153, classicToken0);
      boolean boolean0 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(altAST0);
      assertTrue(boolean0);
      
      Set<String> set0 = python2Target0.getBadWords();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target((CodeGenerator) null);
      String string0 = python2Target0.getVersion();
      assertEquals("4.5.2.1", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target((CodeGenerator) null);
      boolean boolean0 = python2Target0.supportsOverloadedMethods();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target((CodeGenerator) null);
      STGroup sTGroup0 = python2Target0.loadTemplates();
      assertFalse(sTGroup0.iterateAcrossValues);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target((CodeGenerator) null);
      boolean boolean0 = python2Target0.wantsBaseListener();
      assertFalse(boolean0);
  }
}
