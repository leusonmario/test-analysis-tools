/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 18 17:01:16 GMT 2019
 */

package org.apache.storm.kafka.spout;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.Delayed;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.function.Consumer;
import java.util.regex.Pattern;
import javax.management.remote.JMXPrincipal;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.OffsetAndMetadata;
import org.apache.kafka.common.TopicPartition;
import org.apache.kafka.common.serialization.Deserializer;
import org.apache.storm.generated.Bolt;
import org.apache.storm.generated.SpoutSpec;
import org.apache.storm.generated.StateSpoutSpec;
import org.apache.storm.generated.StormTopology;
import org.apache.storm.kafka.spout.KafkaSpout;
import org.apache.storm.kafka.spout.KafkaSpoutConfig;
import org.apache.storm.kafka.spout.KafkaSpoutMessageId;
import org.apache.storm.kafka.spout.KafkaSpoutRetryService;
import org.apache.storm.kafka.spout.KafkaSpoutStream;
import org.apache.storm.kafka.spout.KafkaSpoutStreams;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsNamedTopics;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsWildcardTopics;
import org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder;
import org.apache.storm.metric.api.IMetric;
import org.apache.storm.spout.ISpoutOutputCollector;
import org.apache.storm.spout.SpoutOutputCollector;
import org.apache.storm.task.TopologyContext;
import org.apache.storm.topology.OutputFieldsGetter;
import org.apache.storm.tuple.Fields;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KafkaSpout_ESTest extends KafkaSpout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, SpoutSpec> hashMap0 = new HashMap<String, SpoutSpec>();
      KafkaSpoutConfig<String, SpoutSpec> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, SpoutSpec>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<String, SpoutSpec> kafkaSpout0 = new KafkaSpout<String, SpoutSpec>(kafkaSpoutConfig0);
      kafkaSpout0.toString();
      KafkaSpoutConfig<OffsetAndMetadata, KafkaSpoutMessageId> kafkaSpoutConfig1 = (KafkaSpoutConfig<OffsetAndMetadata, KafkaSpoutMessageId>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaSpout<OffsetAndMetadata, KafkaSpoutMessageId> kafkaSpout1 = new KafkaSpout<OffsetAndMetadata, KafkaSpoutMessageId>(kafkaSpoutConfig1);
      // Undeclared exception!
      try { 
        kafkaSpout1.ack("KafkaSpout{acked=null, emitted=null}");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      KafkaSpoutConfig<AbstractMap.SimpleImmutableEntry<IMetric, KafkaSpoutStreamsWildcardTopics>, Map<String, KafkaSpoutStreamsWildcardTopics>> kafkaSpoutConfig0 = (KafkaSpoutConfig<AbstractMap.SimpleImmutableEntry<IMetric, KafkaSpoutStreamsWildcardTopics>, Map<String, KafkaSpoutStreamsWildcardTopics>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getKeyDeserializer();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getValueDeserializer();
      KafkaSpout<AbstractMap.SimpleImmutableEntry<IMetric, KafkaSpoutStreamsWildcardTopics>, Map<String, KafkaSpoutStreamsWildcardTopics>> kafkaSpout0 = new KafkaSpout<AbstractMap.SimpleImmutableEntry<IMetric, KafkaSpoutStreamsWildcardTopics>, Map<String, KafkaSpoutStreamsWildcardTopics>>(kafkaSpoutConfig0);
      // Undeclared exception!
      try { 
        kafkaSpout0.activate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StormTopology stormTopology0 = new StormTopology();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      HashMap<String, Map<String, Fields>> hashMap1 = new HashMap<String, Map<String, Fields>>();
      Integer integer0 = new Integer((-1896));
      Integer.valueOf((-1896));
      KafkaSpoutConfig<Integer, Integer> kafkaSpoutConfig0 = (KafkaSpoutConfig<Integer, Integer>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Integer, Integer> kafkaSpout0 = new KafkaSpout<Integer, Integer>(kafkaSpoutConfig0);
      ConsumerRecords<Integer, Integer> consumerRecords0 = ConsumerRecords.empty();
      consumerRecords0.count();
      kafkaSpout0.setWaitingToEmit(consumerRecords0);
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig1 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics> kafkaSpout1 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics>(kafkaSpoutConfig1);
      kafkaSpout1.toString();
      HashMap<TopicPartition, List<ConsumerRecord<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics>>> hashMap2 = new HashMap<TopicPartition, List<ConsumerRecord<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics>>>();
      ConsumerRecords<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics> consumerRecords1 = new ConsumerRecords<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics>(hashMap2);
      kafkaSpout1.setWaitingToEmit(consumerRecords1);
      KafkaSpoutConfig<StateSpoutSpec, ConsumerRecord<KafkaSpoutStreamsWildcardTopics, List<ConsumerRecord<String, AbstractMap.SimpleEntry<TopicPartition, String>>>>> kafkaSpoutConfig2 = (KafkaSpoutConfig<StateSpoutSpec, ConsumerRecord<KafkaSpoutStreamsWildcardTopics, List<ConsumerRecord<String, AbstractMap.SimpleEntry<TopicPartition, String>>>>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(kafkaSpoutConfig2).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig2).getKafkaSpoutStreams();
      doReturn((Deserializer) null).when(kafkaSpoutConfig2).getKeyDeserializer();
      doReturn((Deserializer) null).when(kafkaSpoutConfig2).getValueDeserializer();
      KafkaSpout<StateSpoutSpec, ConsumerRecord<KafkaSpoutStreamsWildcardTopics, List<ConsumerRecord<String, AbstractMap.SimpleEntry<TopicPartition, String>>>>> kafkaSpout2 = new KafkaSpout<StateSpoutSpec, ConsumerRecord<KafkaSpoutStreamsWildcardTopics, List<ConsumerRecord<String, AbstractMap.SimpleEntry<TopicPartition, String>>>>>(kafkaSpoutConfig2);
      // Undeclared exception!
      try { 
        kafkaSpout2.activate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleImmutableEntry<Delayed, String>> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleImmutableEntry<Delayed, String>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleImmutableEntry<Delayed, String>> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleImmutableEntry<Delayed, String>>(kafkaSpoutConfig0);
      HashMap<Object, TopicPartition> hashMap0 = new HashMap<Object, TopicPartition>();
      OutputFieldsGetter outputFieldsGetter0 = new OutputFieldsGetter();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      HashMap<String, List<Integer>> hashMap2 = new HashMap<String, List<Integer>>();
      HashMap<String, Map<String, Fields>> hashMap3 = new HashMap<String, Map<String, Fields>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<String, Object> hashMap4 = new HashMap<String, Object>();
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_LATEST;
      KafkaSpoutRetryService kafkaSpoutRetryService0 = mock(KafkaSpoutRetryService.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig<String, KafkaSpout<KafkaSpoutMessageId, Object>> kafkaSpoutConfig1 = (KafkaSpoutConfig<String, KafkaSpout<KafkaSpoutMessageId, Object>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn("{}").when(kafkaSpoutConfig1).getConsumerGroupId();
      doReturn(kafkaSpoutConfig_FirstPollOffsetStrategy0).when(kafkaSpoutConfig1).getFirstPollOffsetStrategy();
      doReturn(hashMap4).when(kafkaSpoutConfig1).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      doReturn(Integer.MAX_VALUE).when(kafkaSpoutConfig1).getMaxTupleRetries();
      doReturn(kafkaSpoutRetryService0).when(kafkaSpoutConfig1).getRetryService();
      doReturn((KafkaSpoutTuplesBuilder<String, KafkaSpout<KafkaSpoutMessageId, Object>>) null).when(kafkaSpoutConfig1).getTuplesBuilder();
      doReturn(true).when(kafkaSpoutConfig1).isConsumerAutoCommitMode();
      KafkaSpout<String, KafkaSpout<KafkaSpoutMessageId, Object>> kafkaSpout1 = new KafkaSpout<String, KafkaSpout<KafkaSpoutMessageId, Object>>(kafkaSpoutConfig1);
      KafkaSpoutConfig<Integer, KafkaSpoutMessageId> kafkaSpoutConfig2 = (KafkaSpoutConfig<Integer, KafkaSpoutMessageId>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig2).getKafkaSpoutStreams();
      KafkaSpout<Integer, KafkaSpoutMessageId> kafkaSpout2 = new KafkaSpout<Integer, KafkaSpoutMessageId>(kafkaSpoutConfig2);
      SpoutOutputCollector spoutOutputCollector0 = kafkaSpout2.collector;
      SpoutOutputCollector spoutOutputCollector1 = new SpoutOutputCollector((ISpoutOutputCollector) null);
      kafkaSpout1.open(hashMap2, (TopologyContext) null, spoutOutputCollector1);
      kafkaSpout1.getComponentConfiguration();
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      assertEquals("false", atomicBoolean0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KafkaSpoutConfig<String, KafkaSpout<KafkaSpoutMessageId, Object>> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, KafkaSpout<KafkaSpoutMessageId, Object>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<String, KafkaSpout<KafkaSpoutMessageId, Object>> kafkaSpout0 = new KafkaSpout<String, KafkaSpout<KafkaSpoutMessageId, Object>>(kafkaSpoutConfig0);
      // Undeclared exception!
      try { 
        kafkaSpout0.getComponentConfiguration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(3435);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Fields fields0 = new Fields(list0);
      Pattern pattern0 = Pattern.compile("", 663);
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutStreamsWildcardTopics0).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn((Pattern) null).when(kafkaSpoutConfig0).getTopicWildcardPattern();
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, Delayed> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, Delayed>(kafkaSpoutConfig0);
      KafkaSpoutConfig<Integer, KafkaSpoutMessageId> kafkaSpoutConfig1 = (KafkaSpoutConfig<Integer, KafkaSpoutMessageId>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutStreamsWildcardTopics0).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaSpout<Integer, KafkaSpoutMessageId> kafkaSpout1 = new KafkaSpout<Integer, KafkaSpoutMessageId>(kafkaSpoutConfig1);
      SpoutOutputCollector spoutOutputCollector0 = kafkaSpout1.collector;
      SpoutOutputCollector spoutOutputCollector1 = new SpoutOutputCollector((ISpoutOutputCollector) null);
      // Undeclared exception!
      try { 
        kafkaSpout0.getComponentConfiguration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleImmutableEntry<Delayed, String>> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleImmutableEntry<Delayed, String>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleImmutableEntry<Delayed, String>> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleImmutableEntry<Delayed, String>>(kafkaSpoutConfig0);
      HashMap<Object, TopicPartition> hashMap0 = new HashMap<Object, TopicPartition>();
      TopicPartition topicPartition0 = new TopicPartition("{}", Integer.MAX_VALUE);
      OutputFieldsGetter outputFieldsGetter0 = new OutputFieldsGetter();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      HashMap<String, List<Integer>> hashMap2 = new HashMap<String, List<Integer>>();
      HashMap<String, Map<String, Fields>> hashMap3 = new HashMap<String, Map<String, Fields>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<String, Object> hashMap4 = new HashMap<String, Object>();
      KafkaSpoutConfig<String, KafkaSpout<KafkaSpoutMessageId, Object>> kafkaSpoutConfig1 = (KafkaSpoutConfig<String, KafkaSpout<KafkaSpoutMessageId, Object>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn("{}").when(kafkaSpoutConfig1).getConsumerGroupId();
      doReturn((KafkaSpoutConfig.FirstPollOffsetStrategy) null).when(kafkaSpoutConfig1).getFirstPollOffsetStrategy();
      doReturn(hashMap4).when(kafkaSpoutConfig1).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      doReturn(0).when(kafkaSpoutConfig1).getMaxTupleRetries();
      doReturn(0L).when(kafkaSpoutConfig1).getOffsetsCommitPeriodMs();
      doReturn((KafkaSpoutRetryService) null).when(kafkaSpoutConfig1).getRetryService();
      doReturn((KafkaSpoutTuplesBuilder) null).when(kafkaSpoutConfig1).getTuplesBuilder();
      doReturn(false).when(kafkaSpoutConfig1).isConsumerAutoCommitMode();
      KafkaSpout<String, KafkaSpout<KafkaSpoutMessageId, Object>> kafkaSpout1 = new KafkaSpout<String, KafkaSpout<KafkaSpoutMessageId, Object>>(kafkaSpoutConfig1);
      KafkaSpoutConfig<Integer, KafkaSpoutMessageId> kafkaSpoutConfig2 = (KafkaSpoutConfig<Integer, KafkaSpoutMessageId>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig2).getKafkaSpoutStreams();
      KafkaSpout<Integer, KafkaSpoutMessageId> kafkaSpout2 = new KafkaSpout<Integer, KafkaSpoutMessageId>(kafkaSpoutConfig2);
      SpoutOutputCollector spoutOutputCollector0 = kafkaSpout2.collector;
      SpoutOutputCollector spoutOutputCollector1 = new SpoutOutputCollector((ISpoutOutputCollector) null);
      kafkaSpout1.open(hashMap2, (TopologyContext) null, spoutOutputCollector1);
      kafkaSpout1.getComponentConfiguration();
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      assertFalse(atomicBoolean0.get());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, TopicPartition> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutConfig.FirstPollOffsetStrategy) null).when(kafkaSpoutConfig0).getFirstPollOffsetStrategy();
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getKeyDeserializer();
      doReturn(0).when(kafkaSpoutConfig0).getMaxTupleRetries();
      doReturn(0L).when(kafkaSpoutConfig0).getOffsetsCommitPeriodMs();
      doReturn((KafkaSpoutRetryService) null).when(kafkaSpoutConfig0).getRetryService();
      doReturn((KafkaSpoutTuplesBuilder) null).when(kafkaSpoutConfig0).getTuplesBuilder();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getValueDeserializer();
      doReturn(false).when(kafkaSpoutConfig0).isConsumerAutoCommitMode();
      KafkaSpout<KafkaSpoutStreamsNamedTopics, TopicPartition> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, TopicPartition>(kafkaSpoutConfig0);
      KafkaSpoutConfig<Integer, KafkaSpoutMessageId> kafkaSpoutConfig1 = (KafkaSpoutConfig<Integer, KafkaSpoutMessageId>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaSpout<Integer, KafkaSpoutMessageId> kafkaSpout1 = new KafkaSpout<Integer, KafkaSpoutMessageId>(kafkaSpoutConfig1);
      HashMap<String, IMetric> hashMap0 = new HashMap<String, IMetric>();
      KafkaSpoutConfig<AbstractMap.SimpleEntry<TopicPartition, String>, KafkaSpoutMessageId> kafkaSpoutConfig2 = (KafkaSpoutConfig<AbstractMap.SimpleEntry<TopicPartition, String>, KafkaSpoutMessageId>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig2).getKafkaSpoutStreams();
      KafkaSpout<AbstractMap.SimpleEntry<TopicPartition, String>, KafkaSpoutMessageId> kafkaSpout2 = new KafkaSpout<AbstractMap.SimpleEntry<TopicPartition, String>, KafkaSpoutMessageId>(kafkaSpoutConfig2);
      kafkaSpout2.nextTuple();
      SpoutOutputCollector spoutOutputCollector0 = kafkaSpout2.collector;
      kafkaSpout0.open(hashMap0, (TopologyContext) null, (SpoutOutputCollector) null);
      SpoutOutputCollector spoutOutputCollector1 = kafkaSpout1.collector;
      kafkaSpout0.collector = null;
      SpoutOutputCollector spoutOutputCollector2 = new SpoutOutputCollector((ISpoutOutputCollector) null);
      kafkaSpout0.collector = spoutOutputCollector2;
      // Undeclared exception!
      try { 
        kafkaSpout0.activate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      KafkaSpoutStreams kafkaSpoutStreams0 = mock(KafkaSpoutStreams.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig<Integer, Map<Integer, Map<String, IMetric>>> kafkaSpoutConfig0 = (KafkaSpoutConfig<Integer, Map<Integer, Map<String, IMetric>>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutStreams0).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Integer, Map<Integer, Map<String, IMetric>>> kafkaSpout0 = new KafkaSpout<Integer, Map<Integer, Map<String, IMetric>>>(kafkaSpoutConfig0);
      OutputFieldsGetter outputFieldsGetter0 = new OutputFieldsGetter();
      boolean boolean0 = true;
      StormTopology stormTopology0 = new StormTopology();
      stormTopology0.get_spouts();
      HashMap<String, Bolt> hashMap0 = new HashMap<String, Bolt>();
      stormTopology0.get_state_spouts();
      StormTopology stormTopology1 = new StormTopology((Map<String, SpoutSpec>) null, hashMap0, (Map<String, StateSpoutSpec>) null);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      HashMap<String, List<Integer>> hashMap2 = new HashMap<String, List<Integer>>();
      HashMap<String, Map<String, Fields>> hashMap3 = new HashMap<String, Map<String, Fields>>();
      String string0 = "org.apache.storm.generated.Nimbus$cancelBlobUpload_result$cancelBlobUpload_resultTupleSchemeFactory";
      String string1 = "";
      Integer integer0 = new Integer((-454));
      Integer integer1 = new Integer((-901));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      KafkaSpoutStreams kafkaSpoutStreams1 = mock(KafkaSpoutStreams.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig<String, KafkaSpout<KafkaSpoutMessageId, Object>> kafkaSpoutConfig1 = (KafkaSpoutConfig<String, KafkaSpout<KafkaSpoutMessageId, Object>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn("Committed offsets [{}-{} = {}] for topic-partition [{}]. [{}] uncommitted offsets across all topic partitions").when(kafkaSpoutConfig1).getConsumerGroupId();
      doReturn((Map<String, Object>) null).when(kafkaSpoutConfig1).getKafkaProps();
      doReturn(kafkaSpoutStreams1).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaSpout<String, KafkaSpout<KafkaSpoutMessageId, Object>> kafkaSpout1 = new KafkaSpout<String, KafkaSpout<KafkaSpoutMessageId, Object>>(kafkaSpoutConfig1);
      // Undeclared exception!
      try { 
        kafkaSpout1.getComponentConfiguration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KafkaSpoutStreams kafkaSpoutStreams0 = mock(KafkaSpoutStreams.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig<String, String> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, String>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutStreams0).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<String, String> kafkaSpout0 = new KafkaSpout<String, String>(kafkaSpoutConfig0);
      OutputFieldsGetter outputFieldsGetter0 = new OutputFieldsGetter();
      kafkaSpout0.declareOutputFields(outputFieldsGetter0);
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig1 = (KafkaSpoutConfig<Object, String>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaSpout<Object, String> kafkaSpout1 = new KafkaSpout<Object, String>(kafkaSpoutConfig1);
      // Undeclared exception!
      try { 
        kafkaSpout1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KafkaSpoutConfig<String, AbstractMap.SimpleEntry<Object, Integer>> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, AbstractMap.SimpleEntry<Object, Integer>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<String, AbstractMap.SimpleEntry<Object, Integer>> kafkaSpout0 = new KafkaSpout<String, AbstractMap.SimpleEntry<Object, Integer>>(kafkaSpoutConfig0);
      HashMap<TopicPartition, List<ConsumerRecord<String, AbstractMap.SimpleEntry<Object, Integer>>>> hashMap0 = new HashMap<TopicPartition, List<ConsumerRecord<String, AbstractMap.SimpleEntry<Object, Integer>>>>();
      TopicPartition topicPartition0 = new TopicPartition("9NRB!)r95Kdb", Integer.MAX_VALUE);
      topicPartition0.toString();
      LinkedList<ConsumerRecord<String, AbstractMap.SimpleEntry<Object, Integer>>> linkedList0 = new LinkedList<ConsumerRecord<String, AbstractMap.SimpleEntry<Object, Integer>>>();
      hashMap0.put(topicPartition0, linkedList0);
      ConsumerRecords<String, AbstractMap.SimpleEntry<Object, Integer>> consumerRecords0 = new ConsumerRecords<String, AbstractMap.SimpleEntry<Object, Integer>>(hashMap0);
      kafkaSpout0.setWaitingToEmit(consumerRecords0);
      // Undeclared exception!
      try { 
        kafkaSpout0.deactivate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KafkaSpoutConfig<OffsetAndMetadata, OffsetAndMetadata> kafkaSpoutConfig0 = (KafkaSpoutConfig<OffsetAndMetadata, OffsetAndMetadata>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<OffsetAndMetadata, OffsetAndMetadata> kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, OffsetAndMetadata>(kafkaSpoutConfig0);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      ConsumerRecord<Integer, Integer> consumerRecord0 = new ConsumerRecord<Integer, Integer>(".jvM5#XJV", 160, (-1827L), integer0, (Integer) Integer.MAX_VALUE);
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(consumerRecord0);
      // Undeclared exception!
      try { 
        kafkaSpout0.fail(kafkaSpoutMessageId0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      KafkaSpoutConfig<KafkaSpoutMessageId, ConsumerRecord<KafkaSpoutStreamsWildcardTopics, TopicPartition>> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutMessageId, ConsumerRecord<KafkaSpoutStreamsWildcardTopics, TopicPartition>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutMessageId, ConsumerRecord<KafkaSpoutStreamsWildcardTopics, TopicPartition>> kafkaSpout0 = new KafkaSpout<KafkaSpoutMessageId, ConsumerRecord<KafkaSpoutStreamsWildcardTopics, TopicPartition>>(kafkaSpoutConfig0);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        kafkaSpout0.fail(integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      KafkaSpoutConfig<OffsetAndMetadata, String> kafkaSpoutConfig0 = (KafkaSpoutConfig<OffsetAndMetadata, String>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<OffsetAndMetadata, String> kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, String>(kafkaSpoutConfig0);
      // Undeclared exception!
      try { 
        kafkaSpout0.deactivate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      KafkaSpout<TopicPartition, String> kafkaSpout0 = null;
      try {
        kafkaSpout0 = new KafkaSpout<TopicPartition, String>((KafkaSpoutConfig<TopicPartition, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      KafkaSpoutConfig<String, String> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, String>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<String, String> kafkaSpout0 = new KafkaSpout<String, String>(kafkaSpoutConfig0);
      OutputFieldsGetter outputFieldsGetter0 = new OutputFieldsGetter();
      // Undeclared exception!
      try { 
        kafkaSpout0.declareOutputFields(outputFieldsGetter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      KafkaSpoutConfig<String, Integer> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Integer>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<String, Integer> kafkaSpout0 = new KafkaSpout<String, Integer>(kafkaSpoutConfig0);
      KafkaSpoutConfig<Integer, KafkaSpoutMessageId> kafkaSpoutConfig1 = (KafkaSpoutConfig<Integer, KafkaSpoutMessageId>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaSpout<Integer, KafkaSpoutMessageId> kafkaSpout1 = new KafkaSpout<Integer, KafkaSpoutMessageId>(kafkaSpoutConfig1);
      kafkaSpout1.nextTuple();
      SpoutOutputCollector spoutOutputCollector0 = kafkaSpout1.collector;
      SpoutOutputCollector spoutOutputCollector1 = new SpoutOutputCollector((ISpoutOutputCollector) null);
      kafkaSpout0.collector = spoutOutputCollector1;
      // Undeclared exception!
      try { 
        kafkaSpout0.ack((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      KafkaSpoutConfig<AbstractMap.SimpleEntry<TopicPartition, String>, TopicPartition> kafkaSpoutConfig0 = (KafkaSpoutConfig<AbstractMap.SimpleEntry<TopicPartition, String>, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<AbstractMap.SimpleEntry<TopicPartition, String>, TopicPartition> kafkaSpout0 = new KafkaSpout<AbstractMap.SimpleEntry<TopicPartition, String>, TopicPartition>(kafkaSpoutConfig0);
      kafkaSpout0.toString();
      // Undeclared exception!
      try { 
        kafkaSpout0.getComponentConfiguration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      KafkaSpoutConfig<Object, Integer> kafkaSpoutConfig0 = (KafkaSpoutConfig<Object, Integer>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Object, Integer> kafkaSpout0 = new KafkaSpout<Object, Integer>(kafkaSpoutConfig0);
      kafkaSpout0.nextTuple();
      HashMap<TopicPartition, List<ConsumerRecord<Object, Integer>>> hashMap0 = new HashMap<TopicPartition, List<ConsumerRecord<Object, Integer>>>();
      ConsumerRecords<Object, Integer> consumerRecords0 = new ConsumerRecords<Object, Integer>(hashMap0);
      kafkaSpout0.setWaitingToEmit(consumerRecords0);
      // Undeclared exception!
      try { 
        kafkaSpout0.setWaitingToEmit((ConsumerRecords<Object, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      KafkaSpoutConfig<Integer, OffsetAndMetadata> kafkaSpoutConfig0 = (KafkaSpoutConfig<Integer, OffsetAndMetadata>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Integer, OffsetAndMetadata> kafkaSpout0 = new KafkaSpout<Integer, OffsetAndMetadata>(kafkaSpoutConfig0);
      OutputFieldsGetter outputFieldsGetter0 = new OutputFieldsGetter();
      // Undeclared exception!
      try { 
        kafkaSpout0.declareOutputFields(outputFieldsGetter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpout<KafkaSpoutMessageId, KafkaSpoutStreamsWildcardTopics>, KafkaSpoutMessageId> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpout<KafkaSpoutMessageId, KafkaSpoutStreamsWildcardTopics>, KafkaSpoutMessageId>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpout<KafkaSpoutMessageId, KafkaSpoutStreamsWildcardTopics>, KafkaSpoutMessageId> kafkaSpout0 = new KafkaSpout<KafkaSpout<KafkaSpoutMessageId, KafkaSpoutStreamsWildcardTopics>, KafkaSpoutMessageId>(kafkaSpoutConfig0);
      // Undeclared exception!
      try { 
        kafkaSpout0.ack((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      KafkaSpoutConfig<Integer, String> kafkaSpoutConfig0 = (KafkaSpoutConfig<Integer, String>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Integer, String> kafkaSpout0 = new KafkaSpout<Integer, String>(kafkaSpoutConfig0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        kafkaSpout0.ack(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Integer> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Integer>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, Integer> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, Integer>(kafkaSpoutConfig0);
      // Undeclared exception!
      try { 
        kafkaSpout0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutMessageId, AbstractMap.SimpleEntry<TopicPartition, KafkaSpoutStreamsWildcardTopics>> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutMessageId, AbstractMap.SimpleEntry<TopicPartition, KafkaSpoutStreamsWildcardTopics>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getKeyDeserializer();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getValueDeserializer();
      KafkaSpout<KafkaSpoutMessageId, AbstractMap.SimpleEntry<TopicPartition, KafkaSpoutStreamsWildcardTopics>> kafkaSpout0 = new KafkaSpout<KafkaSpoutMessageId, AbstractMap.SimpleEntry<TopicPartition, KafkaSpoutStreamsWildcardTopics>>(kafkaSpoutConfig0);
      // Undeclared exception!
      try { 
        kafkaSpout0.activate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      KafkaSpoutStreams kafkaSpoutStreams0 = mock(KafkaSpoutStreams.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig<ConsumerRecord<Object, Integer>, IMetric> kafkaSpoutConfig0 = (KafkaSpoutConfig<ConsumerRecord<Object, Integer>, IMetric>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutStreams0).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<ConsumerRecord<Object, Integer>, IMetric> kafkaSpout0 = new KafkaSpout<ConsumerRecord<Object, Integer>, IMetric>(kafkaSpoutConfig0);
      KafkaSpoutStreams kafkaSpoutStreams1 = mock(KafkaSpoutStreams.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig<Integer, KafkaSpoutMessageId> kafkaSpoutConfig1 = (KafkaSpoutConfig<Integer, KafkaSpoutMessageId>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutStreams1).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaSpout<Integer, KafkaSpoutMessageId> kafkaSpout1 = new KafkaSpout<Integer, KafkaSpoutMessageId>(kafkaSpoutConfig1);
      SpoutOutputCollector spoutOutputCollector0 = kafkaSpout1.collector;
      SpoutOutputCollector spoutOutputCollector1 = new SpoutOutputCollector((ISpoutOutputCollector) null);
      OutputFieldsGetter outputFieldsGetter0 = new OutputFieldsGetter();
      kafkaSpout1.declareOutputFields(outputFieldsGetter0);
      MockThrowable mockThrowable0 = new MockThrowable("");
      // Undeclared exception!
      try { 
        spoutOutputCollector1.reportError(mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.spout.SpoutOutputCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      KafkaSpoutConfig<JMXPrincipal, Integer> kafkaSpoutConfig0 = (KafkaSpoutConfig<JMXPrincipal, Integer>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Deserializer<Delayed> deserializer0 = (Deserializer<Delayed>) mock(Deserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig<IMetric, TopicPartition> kafkaSpoutConfig1 = (KafkaSpoutConfig<IMetric, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaSpout<IMetric, TopicPartition> kafkaSpout0 = new KafkaSpout<IMetric, TopicPartition>(kafkaSpoutConfig1);
      // Undeclared exception!
      try { 
        kafkaSpout0.ack((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StormTopology stormTopology0 = new StormTopology();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      HashMap<String, List<Integer>> hashMap1 = new HashMap<String, List<Integer>>();
      assertTrue(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        KafkaSpoutConfig.FirstPollOffsetStrategy.valueOf(";Xe_5;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy.;Xe_5;
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      KafkaSpoutConfig<Integer, Integer> kafkaSpoutConfig0 = (KafkaSpoutConfig<Integer, Integer>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Integer, Integer> kafkaSpout0 = new KafkaSpout<Integer, Integer>(kafkaSpoutConfig0);
      ConsumerRecords<Integer, Integer> consumerRecords0 = ConsumerRecords.empty();
      consumerRecords0.count();
      kafkaSpout0.setWaitingToEmit(consumerRecords0);
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig1 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics> kafkaSpout1 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics>(kafkaSpoutConfig1);
      kafkaSpout1.toString();
      HashMap<TopicPartition, List<ConsumerRecord<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics>>> hashMap0 = new HashMap<TopicPartition, List<ConsumerRecord<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics>>>();
      ConsumerRecords<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics> consumerRecords1 = new ConsumerRecords<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics>(hashMap0);
      kafkaSpout1.setWaitingToEmit(consumerRecords1);
      KafkaSpoutConfig<StateSpoutSpec, ConsumerRecord<KafkaSpoutStreamsWildcardTopics, List<ConsumerRecord<String, AbstractMap.SimpleEntry<TopicPartition, String>>>>> kafkaSpoutConfig2 = (KafkaSpoutConfig<StateSpoutSpec, ConsumerRecord<KafkaSpoutStreamsWildcardTopics, List<ConsumerRecord<String, AbstractMap.SimpleEntry<TopicPartition, String>>>>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(kafkaSpoutConfig2).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig2).getKafkaSpoutStreams();
      doReturn((Deserializer) null).when(kafkaSpoutConfig2).getKeyDeserializer();
      doReturn((Deserializer) null).when(kafkaSpoutConfig2).getValueDeserializer();
      KafkaSpout<StateSpoutSpec, ConsumerRecord<KafkaSpoutStreamsWildcardTopics, List<ConsumerRecord<String, AbstractMap.SimpleEntry<TopicPartition, String>>>>> kafkaSpout2 = new KafkaSpout<StateSpoutSpec, ConsumerRecord<KafkaSpoutStreamsWildcardTopics, List<ConsumerRecord<String, AbstractMap.SimpleEntry<TopicPartition, String>>>>>(kafkaSpoutConfig2);
      // Undeclared exception!
      try { 
        kafkaSpout2.activate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      KafkaSpoutConfig<String, AbstractMap.SimpleImmutableEntry<OffsetAndMetadata, Map<Integer, Map<String, IMetric>>>> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, AbstractMap.SimpleImmutableEntry<OffsetAndMetadata, Map<Integer, Map<String, IMetric>>>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<String, AbstractMap.SimpleImmutableEntry<OffsetAndMetadata, Map<Integer, Map<String, IMetric>>>> kafkaSpout0 = new KafkaSpout<String, AbstractMap.SimpleImmutableEntry<OffsetAndMetadata, Map<Integer, Map<String, IMetric>>>>(kafkaSpoutConfig0);
      // Undeclared exception!
      try { 
        kafkaSpout0.getComponentConfiguration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      KafkaSpoutConfig<TopicPartition, KafkaSpout<KafkaSpoutStreamsNamedTopics, JMXPrincipal>> kafkaSpoutConfig0 = (KafkaSpoutConfig<TopicPartition, KafkaSpout<KafkaSpoutStreamsNamedTopics, JMXPrincipal>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<TopicPartition, KafkaSpout<KafkaSpoutStreamsNamedTopics, JMXPrincipal>> kafkaSpout0 = new KafkaSpout<TopicPartition, KafkaSpout<KafkaSpoutStreamsNamedTopics, JMXPrincipal>>(kafkaSpoutConfig0);
      kafkaSpout0.nextTuple();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      KafkaSpoutStreams kafkaSpoutStreams0 = mock(KafkaSpoutStreams.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig<Delayed, Map<Integer, Map<String, IMetric>>> kafkaSpoutConfig0 = (KafkaSpoutConfig<Delayed, Map<Integer, Map<String, IMetric>>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutStreams0).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Delayed, Map<Integer, Map<String, IMetric>>> kafkaSpout0 = new KafkaSpout<Delayed, Map<Integer, Map<String, IMetric>>>(kafkaSpoutConfig0);
      OutputFieldsGetter outputFieldsGetter0 = new OutputFieldsGetter();
      StormTopology stormTopology0 = new StormTopology();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      HashMap<String, List<Integer>> hashMap1 = new HashMap<String, List<Integer>>();
      HashMap<String, Map<String, Fields>> hashMap2 = new HashMap<String, Map<String, Fields>>();
      Integer integer0 = new Integer(10000000);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>(linkedBlockingDeque0);
      HashMap<String, Object> hashMap3 = new HashMap<String, Object>();
      KafkaSpoutStreams kafkaSpoutStreams1 = mock(KafkaSpoutStreams.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig<String, KafkaSpout<KafkaSpoutMessageId, Object>> kafkaSpoutConfig1 = (KafkaSpoutConfig<String, KafkaSpout<KafkaSpoutMessageId, Object>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn("Z/k-,W ~jqOg)").when(kafkaSpoutConfig1).getConsumerGroupId();
      doReturn((KafkaSpoutConfig.FirstPollOffsetStrategy) null).when(kafkaSpoutConfig1).getFirstPollOffsetStrategy();
      doReturn(hashMap3).when(kafkaSpoutConfig1).getKafkaProps();
      doReturn(kafkaSpoutStreams1).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      doReturn(0).when(kafkaSpoutConfig1).getMaxTupleRetries();
      doReturn(0L).when(kafkaSpoutConfig1).getOffsetsCommitPeriodMs();
      doReturn((KafkaSpoutRetryService) null).when(kafkaSpoutConfig1).getRetryService();
      doReturn((KafkaSpoutTuplesBuilder) null).when(kafkaSpoutConfig1).getTuplesBuilder();
      doReturn(false).when(kafkaSpoutConfig1).isConsumerAutoCommitMode();
      KafkaSpout<String, KafkaSpout<KafkaSpoutMessageId, Object>> kafkaSpout1 = new KafkaSpout<String, KafkaSpout<KafkaSpoutMessageId, Object>>(kafkaSpoutConfig1);
      HashMap<List<ConsumerRecord<String, AbstractMap.SimpleEntry<TopicPartition, String>>>, JMXPrincipal> hashMap4 = new HashMap<List<ConsumerRecord<String, AbstractMap.SimpleEntry<TopicPartition, String>>>, JMXPrincipal>();
      StormTopology stormTopology1 = new StormTopology();
      Integer integer2 = new Integer(10000000);
      System.setCurrentTimeMillis(0L);
      HashMap<Integer, Map<Integer, Map<String, IMetric>>> hashMap5 = new HashMap<Integer, Map<Integer, Map<String, IMetric>>>();
      TopologyContext topologyContext0 = new TopologyContext(stormTopology1, hashMap4, hashMap0, hashMap1, hashMap2, "kn", "kn", "kn", (Integer) Integer.MAX_VALUE, integer2, linkedList0, hashMap3, hashMap3, hashMap3, hashMap5, (AtomicBoolean) null);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1100);
      stormTopology1.add_to_worker_hooks(byteBuffer0);
      KafkaSpoutConfig<AbstractMap.SimpleEntry<TopicPartition, String>, KafkaSpoutMessageId> kafkaSpoutConfig2 = (KafkaSpoutConfig<AbstractMap.SimpleEntry<TopicPartition, String>, KafkaSpoutMessageId>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig2).getKafkaSpoutStreams();
      KafkaSpout<AbstractMap.SimpleEntry<TopicPartition, String>, KafkaSpoutMessageId> kafkaSpout2 = new KafkaSpout<AbstractMap.SimpleEntry<TopicPartition, String>, KafkaSpoutMessageId>(kafkaSpoutConfig2);
      SpoutOutputCollector spoutOutputCollector0 = kafkaSpout2.collector;
      kafkaSpout1.open(hashMap4, topologyContext0, (SpoutOutputCollector) null);
      kafkaSpout1.getComponentConfiguration();
      HashMap<Integer, Map<Integer, Map<String, IMetric>>> hashMap6 = new HashMap<Integer, Map<Integer, Map<String, IMetric>>>();
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Object> kafkaSpoutConfig3 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig3).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutStreamsNamedTopics, Object> kafkaSpout3 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, Object>(kafkaSpoutConfig3);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StormTopology stormTopology0 = new StormTopology();
      KafkaSpoutConfig<KafkaSpoutMessageId, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutMessageId, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutMessageId, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<KafkaSpoutMessageId, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig0);
      KafkaSpoutConfig<Integer, KafkaSpoutMessageId> kafkaSpoutConfig1 = (KafkaSpoutConfig<Integer, KafkaSpoutMessageId>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaSpout<Integer, KafkaSpoutMessageId> kafkaSpout1 = new KafkaSpout<Integer, KafkaSpoutMessageId>(kafkaSpoutConfig1);
      SpoutOutputCollector spoutOutputCollector0 = kafkaSpout1.collector;
      SpoutOutputCollector spoutOutputCollector1 = new SpoutOutputCollector((ISpoutOutputCollector) null);
      kafkaSpout0.collector = spoutOutputCollector1;
      KafkaSpoutConfig<OffsetAndMetadata, List<ConsumerRecord<String, AbstractMap.SimpleEntry<TopicPartition, String>>>> kafkaSpoutConfig2 = (KafkaSpoutConfig<OffsetAndMetadata, List<ConsumerRecord<String, AbstractMap.SimpleEntry<TopicPartition, String>>>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig2).getKafkaSpoutStreams();
      KafkaSpout<OffsetAndMetadata, List<ConsumerRecord<String, AbstractMap.SimpleEntry<TopicPartition, String>>>> kafkaSpout2 = new KafkaSpout<OffsetAndMetadata, List<ConsumerRecord<String, AbstractMap.SimpleEntry<TopicPartition, String>>>>(kafkaSpoutConfig2);
      kafkaSpout2.nextTuple();
      HashMap<TopicPartition, List<ConsumerRecord<OffsetAndMetadata, List<ConsumerRecord<String, AbstractMap.SimpleEntry<TopicPartition, String>>>>>> hashMap0 = new HashMap<TopicPartition, List<ConsumerRecord<OffsetAndMetadata, List<ConsumerRecord<String, AbstractMap.SimpleEntry<TopicPartition, String>>>>>>();
      ConsumerRecords<OffsetAndMetadata, List<ConsumerRecord<String, AbstractMap.SimpleEntry<TopicPartition, String>>>> consumerRecords0 = new ConsumerRecords<OffsetAndMetadata, List<ConsumerRecord<String, AbstractMap.SimpleEntry<TopicPartition, String>>>>(hashMap0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      consumerRecords0.forEach(consumer0);
      kafkaSpout2.setWaitingToEmit(consumerRecords0);
      KafkaSpoutConfig<String, String> kafkaSpoutConfig3 = (KafkaSpoutConfig<String, String>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig3).getKafkaSpoutStreams();
      KafkaSpout<String, String> kafkaSpout3 = new KafkaSpout<String, String>(kafkaSpoutConfig3);
      HashMap<TopicPartition, List<ConsumerRecord<String, String>>> hashMap1 = new HashMap<TopicPartition, List<ConsumerRecord<String, String>>>();
      ConsumerRecords<String, String> consumerRecords1 = new ConsumerRecords<String, String>(hashMap1);
      kafkaSpout3.setWaitingToEmit(consumerRecords1);
      KafkaSpoutConfig<TopicPartition, ConsumerRecord<Object, OffsetAndMetadata>> kafkaSpoutConfig4 = (KafkaSpoutConfig<TopicPartition, ConsumerRecord<Object, OffsetAndMetadata>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig4).getKafkaSpoutStreams();
      KafkaSpout<TopicPartition, ConsumerRecord<Object, OffsetAndMetadata>> kafkaSpout4 = new KafkaSpout<TopicPartition, ConsumerRecord<Object, OffsetAndMetadata>>(kafkaSpoutConfig4);
      kafkaSpout4.toString();
      KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      KafkaSpoutConfig<Delayed, Object> kafkaSpoutConfig5 = (KafkaSpoutConfig<Delayed, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig5).getKafkaSpoutStreams();
      KafkaSpout<Delayed, Object> kafkaSpout5 = new KafkaSpout<Delayed, Object>(kafkaSpoutConfig5);
      // Undeclared exception!
      try { 
        kafkaSpout5.deactivate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }
}
