/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Tue Jun 18 17:01:16 GMT 2019
 */

package org.apache.storm.kafka.spout;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class KafkaSpout_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.apache.storm.kafka.spout.KafkaSpout"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "BR"); 
    java.lang.System.setProperty("user.dir", "/home/paulo/Documentos/PHD/Testes2.0/test-analysis-tools/TestCasesGenerated/RealProjects/EvoSuite/storm-bd1f5c5"); 
    java.lang.System.setProperty("user.home", "/home/paulo"); 
    java.lang.System.setProperty("user.language", "pt"); 
    java.lang.System.setProperty("user.name", "paulo"); 
    java.lang.System.setProperty("user.timezone", "America/Recife"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(KafkaSpout_ESTest_scaffolding.class.getClassLoader() ,
      "org.apache.storm.kafka.spout.KafkaSpout$Timer",
      "org.apache.storm.topology.OutputFieldsDeclarer",
      "org.apache.kafka.common.network.Selectable",
      "org.apache.storm.topology.IRichSpout",
      "org.apache.storm.generated.GlobalStreamId$GlobalStreamIdStandardSchemeFactory",
      "org.apache.storm.shade.org.jboss.netty.channel.local.LocalServerChannel",
      "org.apache.storm.generated.ShellComponent$ShellComponentTupleSchemeFactory",
      "org.apache.storm.generated.StateSpoutSpec$StateSpoutSpecStandardScheme",
      "org.apache.storm.shade.org.jboss.netty.util.internal.ConcurrentHashMap$EntrySet",
      "org.apache.kafka.common.KafkaException",
      "org.apache.storm.metric.api.IReducer",
      "org.apache.storm.generated.NullStruct$NullStructStandardSchemeFactory",
      "org.apache.storm.shade.org.jboss.netty.channel.DefaultChannelPipeline$DiscardingChannelSink",
      "org.apache.storm.thrift.scheme.TupleScheme",
      "org.apache.kafka.common.network.Send",
      "org.apache.storm.shade.org.jboss.netty.channel.FileRegion",
      "org.apache.storm.shade.org.jboss.netty.util.internal.ConcurrentHashMap$ValueIterator",
      "org.apache.kafka.common.utils.AbstractIterator$State",
      "org.apache.storm.shade.org.jboss.netty.util.internal.ConcurrentHashMap$HashEntry",
      "org.apache.storm.kafka.spout.KafkaSpoutStreamsWildcardTopics",
      "org.apache.storm.shade.org.apache.commons.lang.exception.Nestable",
      "org.apache.storm.thrift.transport.TIOStreamTransport",
      "org.apache.storm.generated.ShellComponent$ShellComponentStandardSchemeFactory",
      "org.apache.storm.thrift.TFieldIdEnum",
      "org.apache.storm.shade.org.jboss.netty.channel.socket.nio.SocketSendBufferPool$GatheringSendBuffer",
      "org.apache.kafka.common.record.TimestampType",
      "org.apache.kafka.clients.CommonClientConfigs",
      "org.apache.storm.shade.org.jboss.netty.channel.ChannelFutureProgressListener",
      "org.apache.storm.generated.ComponentCommon$ComponentCommonStandardScheme",
      "org.apache.storm.generated.JavaObject$JavaObjectStandardScheme",
      "org.apache.storm.shade.org.jboss.netty.util.ThreadNameDeterminer$1",
      "org.apache.storm.shade.org.jboss.netty.util.ThreadNameDeterminer$2",
      "org.apache.storm.kafka.spout.KafkaSpout$OffsetComparator",
      "org.apache.storm.hooks.info.BoltAckInfo",
      "org.apache.storm.tuple.Fields",
      "org.apache.kafka.common.config.ConfigDef$Width",
      "org.apache.storm.shade.org.jboss.netty.logging.InternalLogger",
      "org.apache.storm.shade.org.jboss.netty.util.internal.SystemPropertyUtil",
      "org.apache.storm.shade.org.jboss.netty.channel.socket.nio.SocketSendBufferPool",
      "org.apache.storm.generated.ShellComponent",
      "org.apache.kafka.common.config.ConfigDef$Validator",
      "org.apache.kafka.common.Node",
      "org.apache.storm.shade.org.jboss.netty.logging.InternalLoggerFactory$1",
      "org.apache.storm.shade.org.jboss.netty.channel.socket.nio.SocketSendBufferPool$SendBuffer",
      "org.apache.storm.shade.org.jboss.netty.util.internal.ConcurrentHashMap",
      "org.apache.storm.shade.org.jboss.netty.channel.DefaultChannelConfig",
      "org.apache.storm.shade.org.jboss.netty.util.internal.StackTraceSimplifier",
      "org.apache.storm.shade.org.jboss.netty.channel.socket.nio.NioSelector",
      "org.apache.storm.generated.Grouping$_Fields",
      "org.apache.storm.generated.StateSpoutSpec$StateSpoutSpecTupleSchemeFactory",
      "org.apache.storm.shade.org.jboss.netty.channel.socket.nio.NioChannelConfig",
      "org.apache.storm.topology.base.BaseComponent",
      "org.apache.storm.shade.org.jboss.netty.buffer.ChannelBufferIndexFinder$7",
      "org.apache.storm.thrift.meta_data.MapMetaData",
      "org.apache.storm.shade.org.jboss.netty.buffer.ChannelBufferIndexFinder$6",
      "org.apache.storm.generated.Bolt$_Fields",
      "org.apache.storm.shade.org.jboss.netty.buffer.ChannelBufferIndexFinder$9",
      "org.apache.storm.shade.org.jboss.netty.buffer.ChannelBufferIndexFinder$8",
      "org.apache.storm.shade.org.jboss.netty.buffer.ChannelBufferIndexFinder$3",
      "org.apache.storm.metric.api.CombinedMetric",
      "org.apache.kafka.common.protocol.types.Type",
      "org.apache.storm.shade.org.jboss.netty.buffer.ChannelBufferIndexFinder$2",
      "org.apache.storm.generated.StormTopology$1",
      "org.apache.storm.thrift.TUnion$1",
      "org.apache.storm.shade.org.jboss.netty.buffer.ChannelBufferIndexFinder$5",
      "org.apache.storm.kafka.spout.KafkaSpoutConfig$FirstPollOffsetStrategy",
      "org.apache.storm.hooks.info.BoltFailInfo",
      "org.apache.storm.shade.org.jboss.netty.buffer.ChannelBufferIndexFinder$4",
      "org.apache.kafka.common.config.ConfigDef$ValidString",
      "org.apache.storm.shade.org.jboss.netty.channel.local.DefaultLocalClientChannelFactory",
      "org.apache.storm.thrift.protocol.TMap",
      "org.apache.storm.shade.org.jboss.netty.buffer.ChannelBufferIndexFinder$1",
      "org.apache.storm.shade.org.jboss.netty.channel.Channels",
      "org.apache.kafka.clients.consumer.ConsumerRecords$ConcatenatedIterable$1",
      "org.apache.storm.shade.org.jboss.netty.util.internal.ConcurrentHashMap$HashIterator",
      "org.apache.storm.metric.api.ReducedMetric",
      "org.apache.storm.shade.org.jboss.netty.channel.UpstreamChannelStateEvent",
      "org.apache.storm.spout.ISpout",
      "org.apache.storm.generated.StreamInfo",
      "org.apache.kafka.common.protocol.types.Struct",
      "org.apache.storm.kafka.spout.KafkaSpoutStreamsNamedTopics",
      "org.apache.storm.shade.org.jboss.netty.channel.DefaultChannelPipeline",
      "org.apache.storm.tuple.ITuple",
      "org.apache.storm.shade.org.jboss.netty.util.internal.ReusableIterator",
      "org.apache.storm.generated.GlobalStreamId$GlobalStreamIdTupleScheme",
      "org.apache.kafka.clients.RequestCompletionHandler",
      "org.apache.storm.generated.JavaObject$JavaObjectTupleSchemeFactory",
      "org.apache.storm.spout.SpoutOutputCollector",
      "org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder",
      "org.apache.kafka.common.config.ConfigDef$Range",
      "org.apache.storm.thrift.scheme.SchemeFactory",
      "org.apache.storm.generated.StormTopology$_Fields",
      "org.apache.storm.topology.base.BaseRichSpout",
      "org.apache.storm.generated.StateSpoutSpec",
      "org.apache.storm.thrift.protocol.TStruct",
      "org.apache.storm.generated.GlobalStreamId$GlobalStreamIdTupleSchemeFactory",
      "org.apache.storm.generated.StreamInfo$StreamInfoStandardSchemeFactory",
      "org.apache.storm.shade.org.jboss.netty.channel.socket.SocketChannelConfig",
      "org.apache.storm.spout.ISpoutOutputCollector",
      "org.apache.storm.generated.ComponentCommon$ComponentCommonTupleSchemeFactory",
      "org.apache.storm.generated.StormTopology$StormTopologyStandardScheme",
      "org.apache.storm.generated.ComponentCommon",
      "org.apache.storm.thrift.EncodingUtils",
      "org.apache.storm.shade.org.jboss.netty.util.internal.ThreadLocalBoolean",
      "org.apache.storm.thrift.protocol.TList",
      "org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener",
      "org.apache.storm.shade.org.jboss.netty.util.internal.ConcurrentHashMap$KeySet",
      "org.apache.storm.task.WorkerTopologyContext",
      "org.apache.storm.messaging.netty.NettyRenameThreadFactory",
      "org.apache.storm.shade.org.jboss.netty.channel.ReceiveBufferSizePredictorFactory",
      "org.apache.kafka.clients.KafkaClient",
      "org.apache.storm.generated.NullStruct$NullStructStandardScheme",
      "org.apache.storm.generated.JavaObject",
      "org.apache.storm.task.IErrorReporter",
      "org.apache.storm.shade.org.jboss.netty.util.ThreadRenamingRunnable",
      "org.apache.storm.generated.NullStruct$_Fields",
      "org.apache.kafka.clients.consumer.Consumer",
      "org.apache.kafka.common.TopicPartition",
      "org.apache.storm.generated.GlobalStreamId$_Fields",
      "org.apache.kafka.common.utils.Time",
      "org.apache.kafka.common.protocol.SecurityProtocol",
      "org.apache.storm.thrift.TBase",
      "org.apache.storm.shade.org.jboss.netty.util.internal.ConcurrentHashMap$Values",
      "org.apache.storm.shade.org.jboss.netty.channel.AbstractChannelSink",
      "org.apache.storm.kafka.spout.KafkaSpout$OffsetEntry",
      "org.apache.storm.generated.Bolt$BoltTupleScheme",
      "org.apache.storm.shade.org.jboss.netty.channel.socket.nio.NioSocketChannelConfig",
      "org.apache.storm.shade.org.jboss.netty.channel.socket.nio.AbstractNioWorker",
      "org.apache.kafka.clients.consumer.OffsetAndMetadata",
      "org.apache.storm.thrift.meta_data.FieldMetaData",
      "org.apache.storm.generated.NullStruct",
      "org.apache.storm.shade.org.jboss.netty.util.internal.ConcurrentHashMap$Segment",
      "org.apache.kafka.common.protocol.types.Field",
      "org.apache.storm.shade.org.jboss.netty.channel.CompleteChannelFuture",
      "org.apache.storm.thrift.protocol.TProtocolException",
      "org.apache.kafka.common.config.ConfigDef$2",
      "org.apache.storm.shade.org.jboss.netty.channel.ChannelHandler",
      "org.apache.storm.hooks.info.SpoutFailInfo",
      "org.apache.storm.messaging.netty.NettyUncaughtExceptionHandler",
      "org.apache.storm.metric.api.MultiCountMetric",
      "org.apache.storm.generated.ComponentObject$_Fields",
      "org.apache.storm.generated.StreamInfo$StreamInfoStandardScheme",
      "org.apache.kafka.common.protocol.types.SchemaException",
      "org.apache.storm.thrift.TUnion$TUnionTupleSchemeFactory",
      "org.apache.storm.generated.StateSpoutSpec$StateSpoutSpecTupleScheme",
      "org.apache.storm.tuple.Tuple",
      "org.apache.storm.thrift.meta_data.FieldValueMetaData",
      "org.apache.kafka.common.config.ConfigDef$ConfigKey",
      "org.apache.storm.shade.org.jboss.netty.logging.JdkLogger",
      "org.apache.storm.generated.Bolt$BoltStandardScheme",
      "org.apache.kafka.common.config.SaslConfigs",
      "org.apache.storm.shade.org.jboss.netty.util.internal.ConcurrentHashMap$KeyIterator",
      "org.apache.storm.shade.org.jboss.netty.channel.socket.nio.SelectorUtil",
      "org.apache.storm.shade.org.jboss.netty.channel.AbstractChannel$ChannelCloseFuture",
      "org.apache.kafka.common.protocol.types.Type$4",
      "org.apache.storm.shade.org.json.simple.JSONAware",
      "org.apache.kafka.common.protocol.types.Type$5",
      "org.apache.kafka.common.protocol.types.Type$6",
      "org.apache.kafka.common.protocol.types.Type$7",
      "org.apache.kafka.common.protocol.types.Type$8",
      "org.apache.kafka.common.protocol.types.Type$9",
      "org.apache.kafka.clients.consumer.internals.AbstractPartitionAssignor",
      "org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder",
      "org.apache.storm.hooks.ITaskHook",
      "org.apache.storm.generated.StateSpoutSpec$StateSpoutSpecStandardSchemeFactory",
      "org.apache.kafka.common.config.ConfigException",
      "org.apache.storm.shade.org.jboss.netty.channel.Channel",
      "org.apache.storm.generated.ComponentCommon$ComponentCommonStandardSchemeFactory",
      "org.apache.storm.shade.org.jboss.netty.util.DebugUtil",
      "org.apache.storm.shade.org.jboss.netty.channel.ChannelPipelineFactory",
      "org.apache.storm.shade.org.jboss.netty.logging.AbstractInternalLogger",
      "org.apache.storm.shade.org.jboss.netty.channel.socket.nio.SocketSendBufferPool$PreallocationRef",
      "org.apache.storm.generated.JavaObjectArg",
      "org.apache.storm.shade.org.jboss.netty.buffer.ChannelBufferIndexFinder",
      "org.apache.storm.thrift.protocol.TMessage",
      "org.apache.kafka.common.protocol.types.Type$1",
      "org.apache.kafka.common.protocol.types.Type$2",
      "org.apache.storm.shade.org.jboss.netty.channel.MessageEvent",
      "org.apache.storm.shade.org.jboss.netty.channel.local.LocalAddress",
      "org.apache.kafka.common.protocol.types.Type$3",
      "org.apache.storm.shade.org.jboss.netty.channel.ChannelEvent",
      "org.apache.storm.shade.org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry",
      "org.apache.storm.generated.StormTopology$StormTopologyTupleSchemeFactory",
      "org.apache.storm.shade.org.jboss.netty.channel.ChannelPipeline",
      "org.apache.storm.thrift.scheme.StandardScheme",
      "org.apache.storm.generated.NullStruct$NullStructTupleSchemeFactory",
      "org.apache.storm.generated.JavaObject$_Fields",
      "org.apache.storm.generated.SpoutSpec$SpoutSpecStandardScheme",
      "org.apache.kafka.clients.consumer.ConsumerRecords",
      "org.apache.storm.shade.org.jboss.netty.channel.ChannelHandlerLifeCycleException",
      "org.apache.storm.shade.org.jboss.netty.util.internal.ConcurrentHashMap$EntryIterator",
      "org.apache.storm.generated.ShellComponent$ShellComponentTupleScheme",
      "org.apache.kafka.common.Cluster",
      "org.apache.kafka.clients.consumer.OffsetCommitCallback",
      "org.apache.storm.thrift.protocol.TCompactProtocol",
      "org.apache.storm.thrift.TUnion",
      "org.apache.storm.generated.Bolt$BoltStandardSchemeFactory",
      "org.apache.storm.kafka.spout.KafkaSpout",
      "org.apache.kafka.common.config.ConfigDef",
      "org.apache.storm.shade.org.jboss.netty.util.ExternalResourceReleasable",
      "org.apache.storm.shade.org.jboss.netty.channel.local.DefaultLocalChannel",
      "org.apache.storm.shade.org.jboss.netty.channel.ChannelPipelineException",
      "org.apache.storm.generated.ShellComponent$ShellComponentStandardScheme",
      "org.apache.kafka.clients.consumer.ConsumerConfig",
      "org.apache.storm.shade.org.jboss.netty.util.internal.DeadLockProofWorker$1",
      "org.apache.kafka.common.PartitionInfo",
      "org.apache.storm.shade.org.jboss.netty.channel.ChannelException",
      "org.apache.storm.shade.org.jboss.netty.channel.ChannelStateEvent",
      "org.apache.storm.kafka.spout.KafkaSpoutStreams",
      "org.apache.kafka.common.config.ConfigDef$Recommender",
      "org.apache.storm.shade.org.jboss.netty.channel.socket.nio.NioWorker",
      "org.apache.kafka.clients.consumer.internals.PartitionAssignor$Assignment",
      "org.apache.kafka.common.config.ConfigDef$Type",
      "org.apache.kafka.clients.consumer.ConsumerRecord",
      "org.apache.storm.metric.api.IMetric",
      "org.apache.storm.thrift.transport.TTransportException",
      "org.apache.storm.tuple.MessageId",
      "org.apache.kafka.common.network.NetworkSend",
      "org.apache.kafka.common.requests.AbstractRequestResponse",
      "org.apache.storm.topology.IComponent",
      "org.apache.storm.shade.org.jboss.netty.channel.socket.nio.SocketSendBufferPool$PooledSendBuffer",
      "org.apache.storm.shade.org.jboss.netty.buffer.ChannelBuffer",
      "org.apache.kafka.clients.consumer.KafkaConsumer",
      "org.apache.storm.shade.org.jboss.netty.buffer.ChannelBufferFactory",
      "org.apache.kafka.common.utils.AbstractIterator",
      "org.apache.kafka.common.config.types.Password",
      "org.apache.storm.shade.org.jboss.netty.channel.socket.nio.SocketReceiveBufferAllocator",
      "org.apache.storm.shade.org.jboss.netty.channel.socket.nio.SocketSendBufferPool$EmptySendBuffer",
      "org.apache.storm.thrift.transport.TTransport",
      "org.apache.storm.shade.org.jboss.netty.channel.DefaultChannelFuture",
      "org.apache.storm.kafka.spout.KafkaSpoutRetryService",
      "org.apache.storm.shade.org.jboss.netty.channel.socket.nio.AbstractNioSelector",
      "org.apache.storm.generated.SpoutSpec$SpoutSpecTupleScheme",
      "org.apache.storm.shade.org.jboss.netty.logging.JdkLoggerFactory",
      "org.apache.kafka.clients.consumer.internals.PartitionAssignor",
      "org.apache.storm.thrift.protocol.TSet",
      "org.apache.storm.generated.SpoutSpec$SpoutSpecTupleSchemeFactory",
      "org.apache.storm.hooks.info.BoltExecuteInfo",
      "org.apache.kafka.common.serialization.Deserializer",
      "org.apache.kafka.common.config.SslConfigs",
      "org.apache.storm.thrift.meta_data.ListMetaData",
      "org.apache.storm.shade.org.jboss.netty.channel.socket.nio.SocketSendBufferPool$Preallocation",
      "org.apache.storm.shade.org.jboss.netty.channel.socket.nio.NioSocketChannel",
      "org.apache.storm.shade.org.jboss.netty.channel.ServerChannel",
      "org.apache.storm.metric.api.CountMetric",
      "org.apache.storm.shade.org.jboss.netty.logging.InternalLoggerFactory",
      "org.apache.storm.shade.org.jboss.netty.channel.socket.nio.AbstractNioChannel",
      "org.apache.kafka.common.protocol.types.Schema",
      "org.apache.storm.thrift.protocol.TProtocol",
      "org.apache.storm.shade.org.jboss.netty.buffer.ChannelBufferIndexFinder$10",
      "org.apache.storm.shade.org.jboss.netty.channel.ChannelSink",
      "org.apache.storm.generated.StormTopology$StormTopologyTupleScheme",
      "org.apache.storm.generated.StormTopology$StormTopologyStandardSchemeFactory",
      "org.apache.storm.generated.NullStruct$NullStructTupleScheme",
      "org.apache.storm.generated.StreamInfo$StreamInfoTupleSchemeFactory",
      "org.apache.storm.generated.SpoutSpec$SpoutSpecStandardSchemeFactory",
      "org.apache.storm.generated.GlobalStreamId$GlobalStreamIdStandardScheme",
      "org.apache.storm.thrift.TUnion$TUnionStandardScheme",
      "org.apache.kafka.clients.consumer.internals.PartitionAssignor$Subscription",
      "org.apache.kafka.common.config.AbstractConfig",
      "org.apache.storm.shade.org.jboss.netty.channel.socket.SocketChannel",
      "org.apache.storm.shade.org.jboss.netty.channel.socket.nio.SocketSendBufferPool$UnpooledSendBuffer",
      "org.apache.storm.shade.org.jboss.netty.channel.local.LocalChannel",
      "org.apache.storm.thrift.meta_data.StructMetaData",
      "org.apache.storm.generated.JavaObjectArg$_Fields",
      "org.apache.storm.shade.org.jboss.netty.channel.ChannelFutureListener$2",
      "org.apache.storm.thrift.protocol.TTupleProtocol",
      "org.apache.storm.shade.org.jboss.netty.channel.ChannelFutureListener$1",
      "org.apache.storm.task.TopologyContext",
      "org.apache.storm.shade.org.jboss.netty.util.ThreadNameDeterminer",
      "org.apache.storm.thrift.TUnion$TUnionStandardSchemeFactory",
      "org.apache.kafka.clients.ClientRequest",
      "org.apache.storm.generated.StreamInfo$_Fields",
      "org.apache.kafka.common.requests.RequestHeader",
      "org.apache.storm.shade.org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext",
      "org.apache.storm.generated.JavaObject$JavaObjectTupleScheme",
      "org.apache.storm.kafka.spout.KafkaSpout$1",
      "org.apache.storm.kafka.spout.KafkaSpoutMessageId",
      "org.apache.storm.metric.api.ICombiner",
      "org.apache.storm.shade.org.jboss.netty.channel.local.DefaultLocalChannel$1",
      "org.apache.storm.generated.ComponentCommon$ComponentCommonTupleScheme",
      "org.apache.storm.kafka.spout.KafkaSpoutConfig",
      "org.apache.storm.shade.org.jboss.netty.buffer.AbstractChannelBufferFactory",
      "org.apache.storm.generated.SpoutSpec$_Fields",
      "org.apache.storm.thrift.TUnion$TUnionTupleScheme",
      "org.apache.storm.shade.org.jboss.netty.channel.ChannelConfig",
      "org.apache.kafka.common.protocol.types.ArrayOf",
      "org.apache.storm.kafka.spout.KafkaSpoutConfig$1",
      "org.apache.storm.shade.org.jboss.netty.channel.ChannelFactory",
      "org.apache.kafka.common.network.ByteBufferSend",
      "org.apache.storm.hooks.info.EmitInfo",
      "org.apache.storm.generated.ShellComponent$_Fields",
      "org.apache.storm.thrift.TException",
      "org.apache.storm.thrift.protocol.TField",
      "org.apache.storm.shade.org.jboss.netty.channel.UpstreamChannelStateEvent$1",
      "org.apache.storm.shade.org.jboss.netty.channel.socket.Worker",
      "org.apache.storm.shade.org.jboss.netty.util.internal.DeadLockProofWorker",
      "org.apache.kafka.clients.consumer.ConsumerRebalanceListener",
      "org.apache.storm.generated.StreamInfo$StreamInfoTupleScheme",
      "org.apache.storm.shade.org.jboss.netty.channel.ChannelFuture",
      "org.apache.storm.generated.SpoutSpec",
      "org.apache.storm.shade.org.jboss.netty.channel.socket.nio.SocketSendBufferPool$FileSendBuffer",
      "org.apache.storm.shade.org.jboss.netty.channel.local.LocalClientChannelSink",
      "org.apache.storm.shade.org.jboss.netty.channel.AbstractChannel",
      "org.apache.kafka.common.protocol.Protocol",
      "org.apache.kafka.clients.ClientResponse",
      "org.apache.storm.generated.StateSpoutSpec$1",
      "org.apache.kafka.clients.consumer.ConsumerRecords$ConcatenatedIterable",
      "org.apache.storm.shade.org.jboss.netty.channel.ReceiveBufferSizePredictor",
      "org.apache.storm.shade.org.apache.commons.lang.NotImplementedException",
      "org.apache.kafka.common.utils.AbstractIterator$1",
      "org.apache.storm.shade.org.jboss.netty.channel.ChannelState",
      "org.apache.storm.task.GeneralTopologyContext",
      "org.apache.storm.generated.Bolt",
      "org.apache.kafka.common.config.ConfigDef$Importance",
      "org.apache.storm.shade.org.jboss.netty.logging.InternalLogLevel",
      "org.apache.kafka.clients.consumer.RangeAssignor",
      "org.apache.storm.generated.StormTopology",
      "org.apache.kafka.common.requests.RequestSend",
      "org.apache.storm.thrift.scheme.IScheme",
      "org.apache.storm.shade.org.jboss.netty.channel.local.LocalClientChannelFactory",
      "org.apache.storm.task.IMetricsContext",
      "org.apache.storm.shade.org.jboss.netty.channel.ChannelHandlerContext",
      "org.apache.kafka.common.utils.Utils",
      "org.apache.storm.shade.org.jboss.netty.channel.SucceededChannelFuture",
      "org.apache.storm.topology.OutputFieldsGetter",
      "org.apache.storm.generated.StateSpoutSpec$_Fields",
      "org.apache.storm.generated.JavaObject$JavaObjectStandardSchemeFactory",
      "org.apache.storm.generated.ComponentObject",
      "org.apache.storm.generated.ComponentCommon$_Fields",
      "org.apache.storm.shade.org.jboss.netty.channel.ChannelFutureListener",
      "org.apache.storm.generated.Grouping",
      "org.apache.kafka.common.protocol.ApiKeys",
      "org.apache.storm.kafka.spout.KafkaSpoutStream",
      "org.apache.storm.generated.GlobalStreamId",
      "org.apache.storm.hooks.info.SpoutAckInfo",
      "org.apache.storm.metric.api.AssignableMetric",
      "org.apache.storm.shade.org.jboss.netty.buffer.HeapChannelBufferFactory",
      "org.apache.storm.state.ISubscribedState",
      "org.apache.storm.generated.Bolt$BoltTupleSchemeFactory",
      "org.apache.storm.shade.org.jboss.netty.util.internal.ConcurrentHashMap$WriteThroughEntry"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("java.util.function.Consumer", false, KafkaSpout_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.apache.kafka.common.serialization.Deserializer", false, KafkaSpout_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.apache.storm.kafka.spout.KafkaSpoutConfig", false, KafkaSpout_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.apache.storm.kafka.spout.KafkaSpoutRetryService", false, KafkaSpout_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.apache.storm.kafka.spout.KafkaSpoutStreams", false, KafkaSpout_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(KafkaSpout_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.apache.storm.topology.base.BaseComponent",
      "org.apache.storm.topology.base.BaseRichSpout",
      "org.apache.storm.kafka.spout.KafkaSpout$OffsetComparator",
      "org.apache.storm.kafka.spout.KafkaSpout",
      "org.apache.storm.kafka.spout.KafkaSpout$Timer",
      "org.apache.storm.kafka.spout.KafkaSpout$1",
      "org.apache.storm.kafka.spout.KafkaSpout$OffsetEntry",
      "org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener",
      "org.apache.storm.kafka.spout.KafkaSpoutConfig$FirstPollOffsetStrategy",
      "org.apache.storm.kafka.spout.KafkaSpoutConfig",
      "org.apache.kafka.clients.consumer.KafkaConsumer",
      "org.apache.kafka.common.config.AbstractConfig",
      "org.apache.kafka.common.config.ConfigDef",
      "org.apache.kafka.common.config.ConfigDef$Type",
      "org.apache.kafka.common.config.ConfigDef$Importance",
      "org.apache.kafka.common.config.ConfigDef$Width",
      "org.apache.kafka.common.config.ConfigDef$ConfigKey",
      "org.apache.kafka.common.config.ConfigDef$2",
      "org.apache.kafka.common.config.ConfigDef$Range",
      "org.apache.kafka.common.config.ConfigDef$ValidString",
      "org.apache.kafka.common.protocol.SecurityProtocol",
      "org.apache.kafka.common.utils.Utils",
      "org.apache.kafka.clients.CommonClientConfigs",
      "org.apache.kafka.common.config.SslConfigs",
      "org.apache.kafka.common.config.SaslConfigs",
      "org.apache.kafka.clients.consumer.ConsumerConfig",
      "org.apache.kafka.common.KafkaException",
      "org.apache.kafka.common.config.ConfigException",
      "org.apache.kafka.common.TopicPartition",
      "org.apache.kafka.clients.consumer.ConsumerRecords",
      "org.apache.storm.spout.SpoutOutputCollector",
      "org.apache.storm.topology.OutputFieldsGetter",
      "org.apache.storm.kafka.spout.KafkaSpoutStreamsNamedTopics",
      "org.apache.kafka.clients.consumer.ConsumerRecord",
      "org.apache.storm.kafka.spout.KafkaSpoutMessageId",
      "org.apache.storm.thrift.protocol.TStruct",
      "org.apache.storm.thrift.protocol.TField",
      "org.apache.storm.generated.StreamInfo$StreamInfoStandardSchemeFactory",
      "org.apache.storm.generated.StreamInfo$StreamInfoTupleSchemeFactory",
      "org.apache.storm.generated.StreamInfo$_Fields",
      "org.apache.storm.thrift.meta_data.FieldMetaData",
      "org.apache.storm.thrift.meta_data.FieldValueMetaData",
      "org.apache.storm.thrift.meta_data.ListMetaData",
      "org.apache.storm.generated.StreamInfo",
      "org.apache.storm.generated.StormTopology$StormTopologyStandardSchemeFactory",
      "org.apache.storm.generated.StormTopology$StormTopologyTupleSchemeFactory",
      "org.apache.storm.generated.StormTopology$_Fields",
      "org.apache.storm.thrift.meta_data.MapMetaData",
      "org.apache.storm.thrift.meta_data.StructMetaData",
      "org.apache.storm.generated.StormTopology",
      "org.apache.storm.shade.org.jboss.netty.logging.JdkLoggerFactory",
      "org.apache.storm.shade.org.jboss.netty.logging.AbstractInternalLogger",
      "org.apache.storm.shade.org.jboss.netty.logging.JdkLogger",
      "org.apache.storm.shade.org.jboss.netty.logging.InternalLoggerFactory$1",
      "org.apache.storm.shade.org.jboss.netty.util.internal.SystemPropertyUtil",
      "org.apache.storm.shade.org.jboss.netty.util.DebugUtil",
      "org.apache.storm.shade.org.jboss.netty.util.internal.StackTraceSimplifier",
      "org.apache.storm.shade.org.jboss.netty.logging.InternalLoggerFactory",
      "org.apache.storm.shade.org.jboss.netty.channel.DefaultChannelPipeline$DiscardingChannelSink",
      "org.apache.storm.shade.org.jboss.netty.channel.DefaultChannelPipeline",
      "org.apache.storm.tuple.Fields",
      "org.apache.storm.thrift.EncodingUtils",
      "org.apache.storm.shade.org.jboss.netty.util.ThreadNameDeterminer$1",
      "org.apache.storm.shade.org.jboss.netty.util.ThreadNameDeterminer$2",
      "org.apache.storm.shade.org.jboss.netty.util.ThreadNameDeterminer",
      "org.apache.storm.shade.org.jboss.netty.util.ThreadRenamingRunnable",
      "org.apache.storm.messaging.netty.NettyUncaughtExceptionHandler",
      "org.apache.storm.messaging.netty.NettyRenameThreadFactory",
      "org.apache.storm.shade.org.jboss.netty.channel.socket.nio.AbstractNioSelector",
      "org.apache.storm.shade.org.jboss.netty.channel.socket.nio.AbstractNioWorker",
      "org.apache.storm.shade.org.jboss.netty.channel.socket.nio.NioWorker",
      "org.apache.storm.shade.org.jboss.netty.channel.socket.nio.SelectorUtil",
      "org.apache.storm.shade.org.jboss.netty.util.internal.DeadLockProofWorker",
      "org.apache.storm.shade.org.jboss.netty.util.internal.DeadLockProofWorker$1",
      "org.apache.storm.shade.org.jboss.netty.channel.socket.nio.SocketSendBufferPool$EmptySendBuffer",
      "org.apache.storm.shade.org.jboss.netty.channel.socket.nio.SocketSendBufferPool",
      "org.apache.storm.shade.org.jboss.netty.channel.socket.nio.SocketSendBufferPool$Preallocation",
      "org.apache.storm.shade.org.jboss.netty.channel.socket.nio.SocketReceiveBufferAllocator",
      "org.apache.kafka.clients.consumer.ConsumerRecords$ConcatenatedIterable",
      "org.apache.kafka.common.utils.AbstractIterator",
      "org.apache.kafka.clients.consumer.ConsumerRecords$ConcatenatedIterable$1",
      "org.apache.kafka.common.utils.AbstractIterator$State",
      "org.apache.kafka.clients.consumer.OffsetAndMetadata",
      "org.apache.storm.kafka.spout.KafkaSpoutStream",
      "org.apache.storm.task.GeneralTopologyContext",
      "org.apache.storm.task.WorkerTopologyContext",
      "org.apache.storm.task.TopologyContext",
      "org.apache.storm.metric.api.AssignableMetric",
      "org.apache.storm.metric.api.MultiCountMetric",
      "org.apache.storm.shade.org.jboss.netty.channel.local.DefaultLocalClientChannelFactory",
      "org.apache.storm.shade.org.jboss.netty.channel.AbstractChannelSink",
      "org.apache.storm.shade.org.jboss.netty.channel.local.LocalClientChannelSink",
      "org.apache.storm.shade.org.jboss.netty.util.internal.ConcurrentHashMap",
      "org.apache.storm.shade.org.jboss.netty.util.internal.ConcurrentHashMap$Segment",
      "org.apache.storm.shade.org.jboss.netty.util.internal.ConcurrentHashMap$HashEntry",
      "org.apache.storm.shade.org.jboss.netty.channel.AbstractChannel",
      "org.apache.storm.shade.org.jboss.netty.channel.local.DefaultLocalChannel",
      "org.apache.storm.shade.org.jboss.netty.channel.CompleteChannelFuture",
      "org.apache.storm.shade.org.jboss.netty.channel.SucceededChannelFuture",
      "org.apache.storm.shade.org.jboss.netty.channel.DefaultChannelFuture",
      "org.apache.storm.shade.org.jboss.netty.channel.AbstractChannel$ChannelCloseFuture",
      "org.apache.storm.shade.org.jboss.netty.util.internal.ThreadLocalBoolean",
      "org.apache.storm.shade.org.jboss.netty.channel.DefaultChannelConfig",
      "org.apache.storm.shade.org.jboss.netty.buffer.AbstractChannelBufferFactory",
      "org.apache.storm.shade.org.jboss.netty.buffer.HeapChannelBufferFactory",
      "org.apache.storm.shade.org.jboss.netty.channel.local.DefaultLocalChannel$1",
      "org.apache.storm.shade.org.jboss.netty.channel.Channels",
      "org.apache.storm.shade.org.jboss.netty.channel.UpstreamChannelStateEvent",
      "org.apache.storm.shade.org.jboss.netty.channel.ChannelState",
      "org.apache.storm.shade.org.jboss.netty.channel.UpstreamChannelStateEvent$1",
      "org.apache.storm.kafka.spout.KafkaSpoutStreamsWildcardTopics",
      "org.apache.kafka.common.utils.AbstractIterator$1",
      "org.apache.storm.generated.GlobalStreamId$GlobalStreamIdStandardSchemeFactory",
      "org.apache.storm.generated.GlobalStreamId$GlobalStreamIdTupleSchemeFactory",
      "org.apache.storm.generated.GlobalStreamId$_Fields",
      "org.apache.storm.generated.GlobalStreamId",
      "org.apache.storm.generated.StormTopology$1",
      "org.apache.storm.generated.StateSpoutSpec$StateSpoutSpecStandardSchemeFactory",
      "org.apache.storm.generated.StateSpoutSpec$StateSpoutSpecTupleSchemeFactory",
      "org.apache.storm.generated.StateSpoutSpec$_Fields",
      "org.apache.storm.generated.StateSpoutSpec",
      "org.apache.storm.thrift.TUnion$TUnionStandardSchemeFactory",
      "org.apache.storm.thrift.TUnion$TUnionTupleSchemeFactory",
      "org.apache.storm.thrift.TUnion",
      "org.apache.storm.generated.ComponentObject",
      "org.apache.storm.generated.SpoutSpec$SpoutSpecStandardSchemeFactory",
      "org.apache.storm.generated.SpoutSpec$SpoutSpecTupleSchemeFactory",
      "org.apache.storm.generated.SpoutSpec$_Fields",
      "org.apache.storm.generated.SpoutSpec",
      "org.apache.storm.generated.ShellComponent$ShellComponentStandardSchemeFactory",
      "org.apache.storm.generated.ShellComponent$ShellComponentTupleSchemeFactory",
      "org.apache.storm.generated.ShellComponent$_Fields",
      "org.apache.storm.generated.ShellComponent",
      "org.apache.storm.generated.ComponentCommon$ComponentCommonStandardSchemeFactory",
      "org.apache.storm.generated.ComponentCommon$ComponentCommonTupleSchemeFactory",
      "org.apache.storm.generated.ComponentCommon$_Fields",
      "org.apache.storm.generated.ComponentCommon",
      "org.apache.storm.generated.StateSpoutSpec$1",
      "org.apache.kafka.common.record.TimestampType"
    );
  }
}
