/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 15 13:00:56 GMT 2019
 */

package org.jboss.netty.handler.codec.frame;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jboss.netty.buffer.BigEndianHeapChannelBuffer;
import org.jboss.netty.buffer.ByteBufferBackedChannelBuffer;
import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.buffer.ChannelBufferFactory;
import org.jboss.netty.buffer.DirectChannelBufferFactory;
import org.jboss.netty.buffer.DynamicChannelBuffer;
import org.jboss.netty.buffer.LittleEndianHeapChannelBuffer;
import org.jboss.netty.buffer.SlicedChannelBuffer;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.ChannelHandlerContext;
import org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LengthFieldBasedFrameDecoder_ESTest extends LengthFieldBasedFrameDecoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(8, 0, 1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertNotNull(littleEndianHeapChannelBuffer0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(3, littleEndianHeapChannelBuffer0.capacity());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(3, littleEndianHeapChannelBuffer0.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer1 = (LittleEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decodeB(channelHandlerContext1, (Channel) null, littleEndianHeapChannelBuffer0);
      assertNotNull(littleEndianHeapChannelBuffer1);
      assertEquals(3, byteArray0.length);
      assertFalse(littleEndianHeapChannelBuffer1.equals((Object)littleEndianHeapChannelBuffer0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, littleEndianHeapChannelBuffer0.readerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(3, littleEndianHeapChannelBuffer0.capacity());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(3, littleEndianHeapChannelBuffer0.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(2, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, littleEndianHeapChannelBuffer1.readerIndex());
      assertTrue(littleEndianHeapChannelBuffer1.readable());
      assertEquals(1, littleEndianHeapChannelBuffer1.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer1.hasArray());
      assertEquals(1, littleEndianHeapChannelBuffer1.writerIndex());
      assertEquals(1, littleEndianHeapChannelBuffer1.capacity());
      assertFalse(littleEndianHeapChannelBuffer1.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer1.arrayOffset());
      assertNotSame(littleEndianHeapChannelBuffer0, littleEndianHeapChannelBuffer1);
      assertNotSame(littleEndianHeapChannelBuffer1, littleEndianHeapChannelBuffer0);
      
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer2 = (LittleEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decodeB(channelHandlerContext0, (Channel) null, littleEndianHeapChannelBuffer1);
      assertNotNull(littleEndianHeapChannelBuffer2);
      assertEquals(3, byteArray0.length);
      assertFalse(littleEndianHeapChannelBuffer0.equals((Object)littleEndianHeapChannelBuffer1));
      assertFalse(littleEndianHeapChannelBuffer1.equals((Object)littleEndianHeapChannelBuffer0));
      assertFalse(littleEndianHeapChannelBuffer2.equals((Object)littleEndianHeapChannelBuffer1));
      assertFalse(littleEndianHeapChannelBuffer2.equals((Object)littleEndianHeapChannelBuffer0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, littleEndianHeapChannelBuffer0.readerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(3, littleEndianHeapChannelBuffer0.capacity());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(3, littleEndianHeapChannelBuffer0.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(2, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(1, littleEndianHeapChannelBuffer1.readerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer1.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer1.hasArray());
      assertEquals(1, littleEndianHeapChannelBuffer1.writerIndex());
      assertFalse(littleEndianHeapChannelBuffer1.readable());
      assertEquals(1, littleEndianHeapChannelBuffer1.capacity());
      assertFalse(littleEndianHeapChannelBuffer1.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer1.arrayOffset());
      assertEquals(1, littleEndianHeapChannelBuffer2.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer2.hasArray());
      assertFalse(littleEndianHeapChannelBuffer2.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer2.readerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer2.arrayOffset());
      assertEquals(1, littleEndianHeapChannelBuffer2.capacity());
      assertEquals(1, littleEndianHeapChannelBuffer2.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer2.readable());
      assertNotSame(littleEndianHeapChannelBuffer0, littleEndianHeapChannelBuffer1);
      assertNotSame(littleEndianHeapChannelBuffer0, littleEndianHeapChannelBuffer2);
      assertNotSame(littleEndianHeapChannelBuffer1, littleEndianHeapChannelBuffer0);
      assertNotSame(littleEndianHeapChannelBuffer1, littleEndianHeapChannelBuffer2);
      assertNotSame(littleEndianHeapChannelBuffer2, littleEndianHeapChannelBuffer1);
      assertNotSame(littleEndianHeapChannelBuffer2, littleEndianHeapChannelBuffer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(8, 0, 1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-69);
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertNotNull(littleEndianHeapChannelBuffer0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-69), (byte)0}, byteArray0);
      assertEquals(3, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(3, littleEndianHeapChannelBuffer0.writerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(3, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer1 = (LittleEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decodeB(channelHandlerContext0, (Channel) null, littleEndianHeapChannelBuffer0);
      assertNotNull(littleEndianHeapChannelBuffer1);
      assertEquals(3, byteArray0.length);
      assertFalse(littleEndianHeapChannelBuffer1.equals((Object)littleEndianHeapChannelBuffer0));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-69), (byte)0}, byteArray0);
      assertEquals(3, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(3, littleEndianHeapChannelBuffer0.writerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(2, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(1, littleEndianHeapChannelBuffer0.readerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(1, littleEndianHeapChannelBuffer1.writerIndex());
      assertFalse(littleEndianHeapChannelBuffer1.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer1.arrayOffset());
      assertEquals(1, littleEndianHeapChannelBuffer1.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer1.readerIndex());
      assertEquals(1, littleEndianHeapChannelBuffer1.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer1.hasArray());
      assertTrue(littleEndianHeapChannelBuffer1.readable());
      assertNotSame(littleEndianHeapChannelBuffer0, littleEndianHeapChannelBuffer1);
      assertNotSame(littleEndianHeapChannelBuffer1, littleEndianHeapChannelBuffer0);
      
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext1, channel0, littleEndianHeapChannelBuffer0);
      assertNull(object0);
      assertEquals(3, byteArray0.length);
      assertFalse(littleEndianHeapChannelBuffer0.equals((Object)littleEndianHeapChannelBuffer1));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-69), (byte)0}, byteArray0);
      assertEquals(3, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(3, littleEndianHeapChannelBuffer0.writerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(3, littleEndianHeapChannelBuffer0.readerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      assertNotSame(littleEndianHeapChannelBuffer0, littleEndianHeapChannelBuffer1);
      
      ChannelHandlerContext channelHandlerContext2 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Object object1 = lengthFieldBasedFrameDecoder0.decodeB(channelHandlerContext2, (Channel) null, littleEndianHeapChannelBuffer1);
      assertNull(object1);
      assertEquals(3, byteArray0.length);
      assertTrue(littleEndianHeapChannelBuffer0.equals((Object)littleEndianHeapChannelBuffer1));
      assertTrue(littleEndianHeapChannelBuffer1.equals((Object)littleEndianHeapChannelBuffer0));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-69), (byte)0}, byteArray0);
      assertEquals(3, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(3, littleEndianHeapChannelBuffer0.writerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(3, littleEndianHeapChannelBuffer0.readerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      assertFalse(littleEndianHeapChannelBuffer1.readable());
      assertEquals(1, littleEndianHeapChannelBuffer1.writerIndex());
      assertFalse(littleEndianHeapChannelBuffer1.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer1.arrayOffset());
      assertEquals(1, littleEndianHeapChannelBuffer1.capacity());
      assertEquals(1, littleEndianHeapChannelBuffer1.readerIndex());
      assertTrue(littleEndianHeapChannelBuffer1.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer1.readableBytes());
      assertNotSame(littleEndianHeapChannelBuffer0, littleEndianHeapChannelBuffer1);
      assertNotSame(littleEndianHeapChannelBuffer1, littleEndianHeapChannelBuffer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(548, 1, 1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(548);
      assertNotNull(byteBuffer0);
      assertEquals(548, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(548, byteBuffer0.remaining());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=548 cap=548]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(548, byteBuffer0.capacity());
      
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      assertNotNull(byteBufferBackedChannelBuffer0);
      assertEquals(548, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(548, byteBuffer0.remaining());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=548 cap=548]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(548, byteBuffer0.capacity());
      assertTrue(byteBufferBackedChannelBuffer0.isDirect());
      assertFalse(byteBufferBackedChannelBuffer0.hasArray());
      assertEquals(548, byteBufferBackedChannelBuffer0.readableBytes());
      assertTrue(byteBufferBackedChannelBuffer0.readable());
      assertEquals(548, byteBufferBackedChannelBuffer0.writerIndex());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      assertEquals(548, byteBufferBackedChannelBuffer0.capacity());
      
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer1 = (ByteBufferBackedChannelBuffer)lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, channel0, byteBufferBackedChannelBuffer0);
      assertNotNull(byteBufferBackedChannelBuffer1);
      assertFalse(byteBufferBackedChannelBuffer1.equals((Object)byteBufferBackedChannelBuffer0));
      assertEquals(548, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(548, byteBuffer0.remaining());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=548 cap=548]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(548, byteBuffer0.capacity());
      assertTrue(byteBufferBackedChannelBuffer0.isDirect());
      assertFalse(byteBufferBackedChannelBuffer0.hasArray());
      assertEquals(546, byteBufferBackedChannelBuffer0.readableBytes());
      assertTrue(byteBufferBackedChannelBuffer0.readable());
      assertEquals(548, byteBufferBackedChannelBuffer0.writerIndex());
      assertEquals(548, byteBufferBackedChannelBuffer0.capacity());
      assertEquals(2, byteBufferBackedChannelBuffer0.readerIndex());
      assertEquals(2, byteBufferBackedChannelBuffer1.readableBytes());
      assertEquals(2, byteBufferBackedChannelBuffer1.capacity());
      assertFalse(byteBufferBackedChannelBuffer1.hasArray());
      assertEquals(0, byteBufferBackedChannelBuffer1.readerIndex());
      assertTrue(byteBufferBackedChannelBuffer1.isDirect());
      assertEquals(2, byteBufferBackedChannelBuffer1.writerIndex());
      assertTrue(byteBufferBackedChannelBuffer1.readable());
      assertNotSame(byteBufferBackedChannelBuffer0, byteBufferBackedChannelBuffer1);
      assertNotSame(byteBufferBackedChannelBuffer1, byteBufferBackedChannelBuffer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(1708, 548, 1, 1708, 548);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1708);
      assertNotNull(byteBuffer0);
      assertEquals(1708, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=1708 cap=1708]", byteBuffer0.toString());
      assertEquals(1708, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(1708, byteBuffer0.capacity());
      
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      assertNotNull(byteBufferBackedChannelBuffer0);
      assertEquals(1708, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=1708 cap=1708]", byteBuffer0.toString());
      assertEquals(1708, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(1708, byteBuffer0.capacity());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      assertFalse(byteBufferBackedChannelBuffer0.hasArray());
      assertEquals(1708, byteBufferBackedChannelBuffer0.writerIndex());
      assertEquals(1708, byteBufferBackedChannelBuffer0.readableBytes());
      assertTrue(byteBufferBackedChannelBuffer0.readable());
      assertTrue(byteBufferBackedChannelBuffer0.isDirect());
      assertEquals(1708, byteBufferBackedChannelBuffer0.capacity());
      
      Object object0 = lengthFieldBasedFrameDecoder0.decodeB(channelHandlerContext0, channel0, byteBufferBackedChannelBuffer0);
      assertNull(object0);
      assertEquals(1708, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=1708 cap=1708]", byteBuffer0.toString());
      assertEquals(1708, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(1708, byteBuffer0.capacity());
      assertFalse(byteBufferBackedChannelBuffer0.hasArray());
      assertEquals(1708, byteBufferBackedChannelBuffer0.writerIndex());
      assertFalse(byteBufferBackedChannelBuffer0.readable());
      assertEquals(1708, byteBufferBackedChannelBuffer0.readerIndex());
      assertEquals(0, byteBufferBackedChannelBuffer0.readableBytes());
      assertTrue(byteBufferBackedChannelBuffer0.isDirect());
      assertEquals(1708, byteBufferBackedChannelBuffer0.capacity());
      
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Object object1 = lengthFieldBasedFrameDecoder0.decodeB(channelHandlerContext1, channel1, byteBufferBackedChannelBuffer0);
      assertNull(object1);
      assertEquals(1708, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=1708 cap=1708]", byteBuffer0.toString());
      assertEquals(1708, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(1708, byteBuffer0.capacity());
      assertFalse(byteBufferBackedChannelBuffer0.hasArray());
      assertEquals(1708, byteBufferBackedChannelBuffer0.writerIndex());
      assertFalse(byteBufferBackedChannelBuffer0.readable());
      assertEquals(1708, byteBufferBackedChannelBuffer0.readerIndex());
      assertEquals(0, byteBufferBackedChannelBuffer0.readableBytes());
      assertTrue(byteBufferBackedChannelBuffer0.isDirect());
      assertEquals(1708, byteBufferBackedChannelBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(8, 0, 1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      assertNotNull(byteBuffer0);
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      assertNotNull(byteBufferBackedChannelBuffer0);
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(0, byteBufferBackedChannelBuffer0.readableBytes());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      assertFalse(byteBufferBackedChannelBuffer0.readable());
      assertTrue(byteBufferBackedChannelBuffer0.isDirect());
      assertFalse(byteBufferBackedChannelBuffer0.hasArray());
      assertEquals(0, byteBufferBackedChannelBuffer0.capacity());
      assertEquals(0, byteBufferBackedChannelBuffer0.writerIndex());
      
      ChannelBuffer channelBuffer0 = lengthFieldBasedFrameDecoder0.extractFrame(byteBufferBackedChannelBuffer0, 0, 0);
      assertNotNull(channelBuffer0);
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(0, byteBufferBackedChannelBuffer0.readableBytes());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      assertFalse(byteBufferBackedChannelBuffer0.readable());
      assertTrue(byteBufferBackedChannelBuffer0.isDirect());
      assertFalse(byteBufferBackedChannelBuffer0.hasArray());
      assertEquals(0, byteBufferBackedChannelBuffer0.capacity());
      assertEquals(0, byteBufferBackedChannelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(8, 0, 1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(8);
      assertNotNull(littleEndianHeapChannelBuffer0);
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(8, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      
      ChannelBuffer channelBuffer0 = lengthFieldBasedFrameDecoder0.extractFrame(littleEndianHeapChannelBuffer0, 6, 1);
      assertNotNull(channelBuffer0);
      assertFalse(channelBuffer0.equals((Object)littleEndianHeapChannelBuffer0));
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(8, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      assertEquals(1, channelBuffer0.writerIndex());
      assertEquals(1, channelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertTrue(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(1, channelBuffer0.readableBytes());
      assertNotSame(littleEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, littleEndianHeapChannelBuffer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(8, 0, 1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertNotNull(littleEndianHeapChannelBuffer0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(3, littleEndianHeapChannelBuffer0.capacity());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(3, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(3, littleEndianHeapChannelBuffer0.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer1 = (LittleEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, channel0, littleEndianHeapChannelBuffer0);
      assertNotNull(littleEndianHeapChannelBuffer1);
      assertEquals(3, byteArray0.length);
      assertFalse(littleEndianHeapChannelBuffer1.equals((Object)littleEndianHeapChannelBuffer0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(3, littleEndianHeapChannelBuffer0.capacity());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(1, littleEndianHeapChannelBuffer0.readerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(3, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(2, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(1, littleEndianHeapChannelBuffer1.readableBytes());
      assertFalse(littleEndianHeapChannelBuffer1.isDirect());
      assertTrue(littleEndianHeapChannelBuffer1.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer1.readerIndex());
      assertEquals(1, littleEndianHeapChannelBuffer1.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer1.arrayOffset());
      assertEquals(1, littleEndianHeapChannelBuffer1.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer1.readable());
      assertNotSame(littleEndianHeapChannelBuffer0, littleEndianHeapChannelBuffer1);
      assertNotSame(littleEndianHeapChannelBuffer1, littleEndianHeapChannelBuffer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(8, 0, 1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame((ChannelBuffer) null, 1707, (-1122));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(8, 0, 1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      byte[] byteArray0 = new byte[3];
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertNotNull(littleEndianHeapChannelBuffer0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(3, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(3, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(3, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(littleEndianHeapChannelBuffer0, 2, (byte) (-69));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(8, 0, 1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      assertNotNull(byteBuffer0);
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      assertNotNull(byteBufferBackedChannelBuffer0);
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertTrue(byteBufferBackedChannelBuffer0.isDirect());
      assertEquals(0, byteBufferBackedChannelBuffer0.readableBytes());
      assertEquals(0, byteBufferBackedChannelBuffer0.writerIndex());
      assertFalse(byteBufferBackedChannelBuffer0.readable());
      assertFalse(byteBufferBackedChannelBuffer0.hasArray());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      assertEquals(0, byteBufferBackedChannelBuffer0.capacity());
      
      ByteOrder byteOrder0 = byteBufferBackedChannelBuffer0.order();
      assertNotNull(byteOrder0);
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertTrue(byteBufferBackedChannelBuffer0.isDirect());
      assertEquals(0, byteBufferBackedChannelBuffer0.readableBytes());
      assertEquals(0, byteBufferBackedChannelBuffer0.writerIndex());
      assertFalse(byteBufferBackedChannelBuffer0.readable());
      assertFalse(byteBufferBackedChannelBuffer0.hasArray());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      assertEquals(0, byteBufferBackedChannelBuffer0.capacity());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      ChannelBufferFactory channelBufferFactory0 = DirectChannelBufferFactory.getInstance(byteOrder0);
      assertNotNull(channelBufferFactory0);
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertTrue(byteBufferBackedChannelBuffer0.isDirect());
      assertEquals(0, byteBufferBackedChannelBuffer0.readableBytes());
      assertEquals(0, byteBufferBackedChannelBuffer0.writerIndex());
      assertFalse(byteBufferBackedChannelBuffer0.readable());
      assertFalse(byteBufferBackedChannelBuffer0.hasArray());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      assertEquals(0, byteBufferBackedChannelBuffer0.capacity());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(byteOrder0, 0, channelBufferFactory0);
      assertNotNull(dynamicChannelBuffer0);
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertTrue(byteBufferBackedChannelBuffer0.isDirect());
      assertEquals(0, byteBufferBackedChannelBuffer0.readableBytes());
      assertEquals(0, byteBufferBackedChannelBuffer0.writerIndex());
      assertFalse(byteBufferBackedChannelBuffer0.readable());
      assertFalse(byteBufferBackedChannelBuffer0.hasArray());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      assertEquals(0, byteBufferBackedChannelBuffer0.capacity());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertFalse(dynamicChannelBuffer0.isDirect());
      
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(dynamicChannelBuffer0, 1, 8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(8, 0, 1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      byte[] byteArray0 = new byte[4];
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(4, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(4, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      
      SlicedChannelBuffer slicedChannelBuffer0 = new SlicedChannelBuffer(bigEndianHeapChannelBuffer0, 0, 3);
      assertNotNull(slicedChannelBuffer0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(4, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(4, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(slicedChannelBuffer0.readable());
      assertEquals(3, slicedChannelBuffer0.readableBytes());
      assertFalse(slicedChannelBuffer0.isDirect());
      assertEquals(0, slicedChannelBuffer0.readerIndex());
      assertEquals(3, slicedChannelBuffer0.writerIndex());
      assertTrue(slicedChannelBuffer0.hasArray());
      assertEquals(3, slicedChannelBuffer0.capacity());
      
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(slicedChannelBuffer0, (byte)54, 8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.buffer.SlicedChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(8, 0, 1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      assertNotNull(byteBuffer0);
      assertEquals(0, byteBuffer0.limit());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.remaining());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      assertNotNull(byteBufferBackedChannelBuffer0);
      assertEquals(0, byteBuffer0.limit());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.remaining());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertFalse(byteBufferBackedChannelBuffer0.hasArray());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      assertEquals(0, byteBufferBackedChannelBuffer0.capacity());
      assertFalse(byteBufferBackedChannelBuffer0.readable());
      assertEquals(0, byteBufferBackedChannelBuffer0.writerIndex());
      assertEquals(0, byteBufferBackedChannelBuffer0.readableBytes());
      assertTrue(byteBufferBackedChannelBuffer0.isDirect());
      
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(byteBufferBackedChannelBuffer0, (byte) (-69), (byte) (-69));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity: -69
         //
         verifyException("org.jboss.netty.buffer.DirectChannelBufferFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(8, 0, 1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      assertNotNull(byteBuffer0);
      assertFalse(byteBuffer0.hasArray());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      assertNotNull(byteBufferBackedChannelBuffer0);
      assertFalse(byteBuffer0.hasArray());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBufferBackedChannelBuffer0.readableBytes());
      assertEquals(0, byteBufferBackedChannelBuffer0.writerIndex());
      assertTrue(byteBufferBackedChannelBuffer0.isDirect());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      assertEquals(0, byteBufferBackedChannelBuffer0.capacity());
      assertFalse(byteBufferBackedChannelBuffer0.readable());
      assertFalse(byteBufferBackedChannelBuffer0.hasArray());
      
      ByteOrder byteOrder0 = byteBufferBackedChannelBuffer0.order();
      assertNotNull(byteOrder0);
      assertFalse(byteBuffer0.hasArray());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBufferBackedChannelBuffer0.readableBytes());
      assertEquals(0, byteBufferBackedChannelBuffer0.writerIndex());
      assertTrue(byteBufferBackedChannelBuffer0.isDirect());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      assertEquals(0, byteBufferBackedChannelBuffer0.capacity());
      assertFalse(byteBufferBackedChannelBuffer0.readable());
      assertFalse(byteBufferBackedChannelBuffer0.hasArray());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      ChannelBufferFactory channelBufferFactory0 = DirectChannelBufferFactory.getInstance(byteOrder0);
      assertNotNull(channelBufferFactory0);
      assertFalse(byteBuffer0.hasArray());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBufferBackedChannelBuffer0.readableBytes());
      assertEquals(0, byteBufferBackedChannelBuffer0.writerIndex());
      assertTrue(byteBufferBackedChannelBuffer0.isDirect());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      assertEquals(0, byteBufferBackedChannelBuffer0.capacity());
      assertFalse(byteBufferBackedChannelBuffer0.readable());
      assertFalse(byteBufferBackedChannelBuffer0.hasArray());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      ChannelBuffer channelBuffer0 = channelBufferFactory0.getBuffer(byteBuffer0);
      assertNotNull(channelBuffer0);
      assertFalse(byteBuffer0.hasArray());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBufferBackedChannelBuffer0.readableBytes());
      assertEquals(0, byteBufferBackedChannelBuffer0.writerIndex());
      assertTrue(byteBufferBackedChannelBuffer0.isDirect());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      assertEquals(0, byteBufferBackedChannelBuffer0.capacity());
      assertFalse(byteBufferBackedChannelBuffer0.readable());
      assertFalse(byteBufferBackedChannelBuffer0.hasArray());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.capacity());
      assertFalse(channelBuffer0.readable());
      
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(channelBuffer0, (-1), 1708);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(8, 0, 1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertNotNull(littleEndianHeapChannelBuffer0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(3, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(3, littleEndianHeapChannelBuffer0.writerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(3, littleEndianHeapChannelBuffer0.readableBytes());
      
      littleEndianHeapChannelBuffer0.skipBytes((byte) (-69));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(3, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(72, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(3, littleEndianHeapChannelBuffer0.writerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals((-69), littleEndianHeapChannelBuffer0.readerIndex());
      
      try { 
        lengthFieldBasedFrameDecoder0.decodeB(channelHandlerContext0, (Channel) null, littleEndianHeapChannelBuffer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -69
         //
         verifyException("org.jboss.netty.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(8, 0, 1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      try { 
        lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, (Channel) null, (ChannelBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(1, 1, 1, 1, 1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (1) must be equal to or greater than lengthFieldOffset (1) + lengthFieldLength (1).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(2836, 2607, 3, (-1245), 2607, true);
      assertNotNull(lengthFieldBasedFrameDecoder0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(1870, 1870, 8, 1870, 8, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (1870) must be equal to or greater than lengthFieldOffset (1870) + lengthFieldLength (8).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(29, 4, 4, 4, 22, true);
      assertNotNull(lengthFieldBasedFrameDecoder0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(256, 3647, 0, 256, 256, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldLength must be either 1, 2, 3, 4, or 8: 0
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(8, 8, 8, 0, (-892), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialBytesToStrip must be a non-negative integer: -892
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(1302, (-1095), (-1095), 1302, (-1095), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldOffset must be a non-negative integer: -1095
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(2, 2, 2, (-27), 2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (2) must be equal to or greater than lengthFieldOffset (2) + lengthFieldLength (2).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(0, (-1207), (-2930), 1461, (-2930), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength must be a positive integer: 0
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(41, 0, 1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)28;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertNotNull(littleEndianHeapChannelBuffer0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)28, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(3, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(3, littleEndianHeapChannelBuffer0.writerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      
      Object object0 = lengthFieldBasedFrameDecoder0.decodeB(channelHandlerContext0, (Channel) null, littleEndianHeapChannelBuffer0);
      assertNull(object0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)28, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(3, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(3, littleEndianHeapChannelBuffer0.writerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(8, 0, 1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertNotNull(littleEndianHeapChannelBuffer0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, littleEndianHeapChannelBuffer0.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(3, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(3, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer1 = (LittleEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decodeB(channelHandlerContext1, (Channel) null, littleEndianHeapChannelBuffer0);
      assertNotNull(littleEndianHeapChannelBuffer1);
      assertEquals(3, byteArray0.length);
      assertFalse(littleEndianHeapChannelBuffer1.equals((Object)littleEndianHeapChannelBuffer0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, littleEndianHeapChannelBuffer0.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(3, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(1, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(2, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(1, littleEndianHeapChannelBuffer1.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer1.arrayOffset());
      assertTrue(littleEndianHeapChannelBuffer1.readable());
      assertEquals(1, littleEndianHeapChannelBuffer1.readableBytes());
      assertEquals(0, littleEndianHeapChannelBuffer1.readerIndex());
      assertFalse(littleEndianHeapChannelBuffer1.isDirect());
      assertTrue(littleEndianHeapChannelBuffer1.hasArray());
      assertEquals(1, littleEndianHeapChannelBuffer1.writerIndex());
      assertNotSame(littleEndianHeapChannelBuffer0, littleEndianHeapChannelBuffer1);
      assertNotSame(littleEndianHeapChannelBuffer1, littleEndianHeapChannelBuffer0);
      
      ChannelHandlerContext channelHandlerContext2 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer2 = (LittleEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext2, (Channel) null, littleEndianHeapChannelBuffer1);
      assertNotNull(littleEndianHeapChannelBuffer2);
      assertEquals(3, byteArray0.length);
      assertFalse(littleEndianHeapChannelBuffer0.equals((Object)littleEndianHeapChannelBuffer1));
      assertFalse(littleEndianHeapChannelBuffer1.equals((Object)littleEndianHeapChannelBuffer0));
      assertFalse(littleEndianHeapChannelBuffer2.equals((Object)littleEndianHeapChannelBuffer1));
      assertFalse(littleEndianHeapChannelBuffer2.equals((Object)littleEndianHeapChannelBuffer0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, littleEndianHeapChannelBuffer0.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(3, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(1, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(2, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(1, littleEndianHeapChannelBuffer1.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer1.arrayOffset());
      assertFalse(littleEndianHeapChannelBuffer1.readable());
      assertFalse(littleEndianHeapChannelBuffer1.isDirect());
      assertTrue(littleEndianHeapChannelBuffer1.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer1.readableBytes());
      assertEquals(1, littleEndianHeapChannelBuffer1.readerIndex());
      assertEquals(1, littleEndianHeapChannelBuffer1.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer2.readable());
      assertEquals(1, littleEndianHeapChannelBuffer2.capacity());
      assertEquals(1, littleEndianHeapChannelBuffer2.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer2.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer2.arrayOffset());
      assertEquals(1, littleEndianHeapChannelBuffer2.writerIndex());
      assertFalse(littleEndianHeapChannelBuffer2.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer2.readerIndex());
      assertNotSame(littleEndianHeapChannelBuffer0, littleEndianHeapChannelBuffer1);
      assertNotSame(littleEndianHeapChannelBuffer0, littleEndianHeapChannelBuffer2);
      assertNotSame(littleEndianHeapChannelBuffer1, littleEndianHeapChannelBuffer2);
      assertNotSame(littleEndianHeapChannelBuffer1, littleEndianHeapChannelBuffer0);
      assertNotSame(littleEndianHeapChannelBuffer2, littleEndianHeapChannelBuffer1);
      assertNotSame(littleEndianHeapChannelBuffer2, littleEndianHeapChannelBuffer0);
      
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer3 = (LittleEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decodeB(channelHandlerContext0, (Channel) null, littleEndianHeapChannelBuffer1);
      assertNull(littleEndianHeapChannelBuffer3);
      assertEquals(3, byteArray0.length);
      assertFalse(littleEndianHeapChannelBuffer0.equals((Object)littleEndianHeapChannelBuffer1));
      assertFalse(littleEndianHeapChannelBuffer0.equals((Object)littleEndianHeapChannelBuffer2));
      assertFalse(littleEndianHeapChannelBuffer1.equals((Object)littleEndianHeapChannelBuffer2));
      assertFalse(littleEndianHeapChannelBuffer1.equals((Object)littleEndianHeapChannelBuffer0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, littleEndianHeapChannelBuffer0.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(3, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(1, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(2, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(1, littleEndianHeapChannelBuffer1.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer1.arrayOffset());
      assertFalse(littleEndianHeapChannelBuffer1.readable());
      assertFalse(littleEndianHeapChannelBuffer1.isDirect());
      assertTrue(littleEndianHeapChannelBuffer1.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer1.readableBytes());
      assertEquals(1, littleEndianHeapChannelBuffer1.readerIndex());
      assertEquals(1, littleEndianHeapChannelBuffer1.writerIndex());
      assertNotSame(littleEndianHeapChannelBuffer0, littleEndianHeapChannelBuffer1);
      assertNotSame(littleEndianHeapChannelBuffer0, littleEndianHeapChannelBuffer2);
      assertNotSame(littleEndianHeapChannelBuffer1, littleEndianHeapChannelBuffer2);
      assertNotSame(littleEndianHeapChannelBuffer1, littleEndianHeapChannelBuffer0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(8, 0, 3);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[10];
      byteArray0[2] = (byte)66;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertNotNull(littleEndianHeapChannelBuffer0);
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)66, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(10, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(10, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(10, littleEndianHeapChannelBuffer0.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      
      Object object0 = lengthFieldBasedFrameDecoder0.decodeB(channelHandlerContext1, (Channel) null, littleEndianHeapChannelBuffer0);
      assertNull(object0);
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)66, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(10, littleEndianHeapChannelBuffer0.readerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(10, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(10, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      
      try { 
        lengthFieldBasedFrameDecoder0.decodeB(channelHandlerContext0, (Channel) null, (ChannelBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(41, 0, 1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)28;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertNotNull(littleEndianHeapChannelBuffer0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)28, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, littleEndianHeapChannelBuffer0.writerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(3, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(3, littleEndianHeapChannelBuffer0.readableBytes());
      
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, channel0, littleEndianHeapChannelBuffer0);
      assertNull(object0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)28, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, littleEndianHeapChannelBuffer0.writerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(3, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(3, littleEndianHeapChannelBuffer0.readableBytes());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(8, 0, 8);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      byte[] byteArray0 = new byte[10];
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(10, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(10, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(10, bigEndianHeapChannelBuffer0.capacity());
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer1 = (BigEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, (Channel) null, bigEndianHeapChannelBuffer0);
      assertNotNull(bigEndianHeapChannelBuffer1);
      assertEquals(10, byteArray0.length);
      assertFalse(bigEndianHeapChannelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(10, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(2, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(10, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(8, bigEndianHeapChannelBuffer1.capacity());
      assertFalse(bigEndianHeapChannelBuffer1.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer1.arrayOffset());
      assertTrue(bigEndianHeapChannelBuffer1.readable());
      assertTrue(bigEndianHeapChannelBuffer1.hasArray());
      assertEquals(8, bigEndianHeapChannelBuffer1.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer1.readerIndex());
      assertEquals(8, bigEndianHeapChannelBuffer1.writerIndex());
      assertNotSame(bigEndianHeapChannelBuffer0, bigEndianHeapChannelBuffer1);
      assertNotSame(bigEndianHeapChannelBuffer1, bigEndianHeapChannelBuffer0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(8, 0, 1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      assertNotNull(byteBuffer0);
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      assertNotNull(byteBufferBackedChannelBuffer0);
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBufferBackedChannelBuffer0.readable());
      assertEquals(0, byteBufferBackedChannelBuffer0.writerIndex());
      assertEquals(0, byteBufferBackedChannelBuffer0.readableBytes());
      assertEquals(0, byteBufferBackedChannelBuffer0.capacity());
      assertTrue(byteBufferBackedChannelBuffer0.isDirect());
      assertFalse(byteBufferBackedChannelBuffer0.hasArray());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, (Channel) null, byteBufferBackedChannelBuffer0);
      assertNull(object0);
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBufferBackedChannelBuffer0.readable());
      assertEquals(0, byteBufferBackedChannelBuffer0.writerIndex());
      assertEquals(0, byteBufferBackedChannelBuffer0.readableBytes());
      assertEquals(0, byteBufferBackedChannelBuffer0.capacity());
      assertTrue(byteBufferBackedChannelBuffer0.isDirect());
      assertFalse(byteBufferBackedChannelBuffer0.hasArray());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(21, 536, 21, 536, 4588);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldLength must be either 1, 2, 3, 4, or 8: 21
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(4, 4, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (4) must be equal to or greater than lengthFieldOffset (4) + lengthFieldLength (4).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(8, 0, 2);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)66;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertNotNull(littleEndianHeapChannelBuffer0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)66, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(8, littleEndianHeapChannelBuffer0.capacity());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(8, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer1 = (LittleEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decodeB(channelHandlerContext0, (Channel) null, littleEndianHeapChannelBuffer0);
      assertNotNull(littleEndianHeapChannelBuffer1);
      assertEquals(8, byteArray0.length);
      assertFalse(littleEndianHeapChannelBuffer1.equals((Object)littleEndianHeapChannelBuffer0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)66, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(8, littleEndianHeapChannelBuffer0.capacity());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(8, littleEndianHeapChannelBuffer0.writerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(2, littleEndianHeapChannelBuffer0.readerIndex());
      assertTrue(littleEndianHeapChannelBuffer1.readable());
      assertEquals(2, littleEndianHeapChannelBuffer1.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer1.arrayOffset());
      assertEquals(0, littleEndianHeapChannelBuffer1.readerIndex());
      assertFalse(littleEndianHeapChannelBuffer1.isDirect());
      assertEquals(2, littleEndianHeapChannelBuffer1.writerIndex());
      assertEquals(2, littleEndianHeapChannelBuffer1.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer1.hasArray());
      assertNotSame(littleEndianHeapChannelBuffer0, littleEndianHeapChannelBuffer1);
      assertNotSame(littleEndianHeapChannelBuffer1, littleEndianHeapChannelBuffer0);
      
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer2 = (LittleEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decode(channelHandlerContext1, channel0, littleEndianHeapChannelBuffer0);
      assertNull(littleEndianHeapChannelBuffer2);
      assertEquals(8, byteArray0.length);
      assertFalse(littleEndianHeapChannelBuffer0.equals((Object)littleEndianHeapChannelBuffer1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)66, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, littleEndianHeapChannelBuffer0.readerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      assertEquals(8, littleEndianHeapChannelBuffer0.capacity());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(8, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertNotSame(littleEndianHeapChannelBuffer0, littleEndianHeapChannelBuffer1);
      
      ChannelHandlerContext channelHandlerContext2 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext2, (Channel) null, littleEndianHeapChannelBuffer1);
      assertNull(object0);
      assertEquals(8, byteArray0.length);
      assertTrue(littleEndianHeapChannelBuffer0.equals((Object)littleEndianHeapChannelBuffer1));
      assertTrue(littleEndianHeapChannelBuffer1.equals((Object)littleEndianHeapChannelBuffer0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)66, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, littleEndianHeapChannelBuffer0.readerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      assertEquals(8, littleEndianHeapChannelBuffer0.capacity());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(8, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(2, littleEndianHeapChannelBuffer1.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer1.arrayOffset());
      assertEquals(2, littleEndianHeapChannelBuffer1.readerIndex());
      assertFalse(littleEndianHeapChannelBuffer1.isDirect());
      assertEquals(2, littleEndianHeapChannelBuffer1.writerIndex());
      assertFalse(littleEndianHeapChannelBuffer1.readable());
      assertEquals(0, littleEndianHeapChannelBuffer1.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer1.hasArray());
      assertNotSame(littleEndianHeapChannelBuffer0, littleEndianHeapChannelBuffer1);
      assertNotSame(littleEndianHeapChannelBuffer1, littleEndianHeapChannelBuffer0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(1708, 548, 1, 1708, 548);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(548);
      assertNotNull(byteBuffer0);
      assertEquals(548, byteBuffer0.remaining());
      assertEquals(548, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=548 cap=548]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(548, byteBuffer0.limit());
      
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      assertNotNull(byteBufferBackedChannelBuffer0);
      assertEquals(548, byteBuffer0.remaining());
      assertEquals(548, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=548 cap=548]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(548, byteBuffer0.limit());
      assertEquals(548, byteBufferBackedChannelBuffer0.writerIndex());
      assertEquals(548, byteBufferBackedChannelBuffer0.capacity());
      assertEquals(548, byteBufferBackedChannelBuffer0.readableBytes());
      assertTrue(byteBufferBackedChannelBuffer0.readable());
      assertTrue(byteBufferBackedChannelBuffer0.isDirect());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      assertFalse(byteBufferBackedChannelBuffer0.hasArray());
      
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(byteBufferBackedChannelBuffer0, 3332, 3332);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(8, 0, 3);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      byte[] byteArray0 = new byte[10];
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(10, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(10, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(10, bigEndianHeapChannelBuffer0.capacity());
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer1 = (BigEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, (Channel) null, bigEndianHeapChannelBuffer0);
      assertNotNull(bigEndianHeapChannelBuffer1);
      assertEquals(10, byteArray0.length);
      assertFalse(bigEndianHeapChannelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(7, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(10, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(3, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(10, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer1.readable());
      assertEquals(0, bigEndianHeapChannelBuffer1.readerIndex());
      assertEquals(3, bigEndianHeapChannelBuffer1.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer1.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer1.isDirect());
      assertEquals(3, bigEndianHeapChannelBuffer1.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer1.hasArray());
      assertEquals(3, bigEndianHeapChannelBuffer1.readableBytes());
      assertNotSame(bigEndianHeapChannelBuffer0, bigEndianHeapChannelBuffer1);
      assertNotSame(bigEndianHeapChannelBuffer1, bigEndianHeapChannelBuffer0);
  }
}
