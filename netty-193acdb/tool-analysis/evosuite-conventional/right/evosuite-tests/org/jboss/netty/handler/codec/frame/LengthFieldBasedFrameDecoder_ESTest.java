/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 15 13:04:06 GMT 2019
 */

package org.jboss.netty.handler.codec.frame;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jboss.netty.buffer.BigEndianHeapChannelBuffer;
import org.jboss.netty.buffer.ByteBufferBackedChannelBuffer;
import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.buffer.DirectChannelBufferFactory;
import org.jboss.netty.buffer.DynamicChannelBuffer;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.ChannelHandlerContext;
import org.jboss.netty.channel.ChannelPipeline;
import org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LengthFieldBasedFrameDecoder_ESTest extends LengthFieldBasedFrameDecoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(1243, 2, 2);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)99;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(6, bigEndianHeapChannelBuffer0.readableBytes());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(6, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(6, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)99, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.slice();
      assertNotNull(channelBuffer0);
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(6, bigEndianHeapChannelBuffer0.readableBytes());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(6, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(6, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(6, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.readable());
      assertEquals(6, channelBuffer0.readableBytes());
      assertEquals(6, channelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)99, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      Object object0 = lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, channel0, channelBuffer0);
      assertNull(object0);
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(6, bigEndianHeapChannelBuffer0.readableBytes());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(6, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(6, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(6, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertFalse(channelBuffer0.readable());
      assertEquals(6, channelBuffer0.readerIndex());
      assertEquals(6, channelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)99, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Object object1 = lengthFieldBasedFrameDecoder0.decodeB(channelHandlerContext1, channel1, bigEndianHeapChannelBuffer0);
      assertNull(object1);
      assertEquals(6, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(6, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(6, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)99, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(1243, 2, 2);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)99;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(6, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(6, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(6, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)99, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.slice();
      assertNotNull(channelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(6, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(6, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(6, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(6, channelBuffer0.writerIndex());
      assertEquals(6, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(6, channelBuffer0.capacity());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)99, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      Object object0 = lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, channel0, channelBuffer0);
      assertNull(object0);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(6, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(6, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(6, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readableBytes());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(6, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(6, channelBuffer0.capacity());
      assertEquals(6, channelBuffer0.readerIndex());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)99, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Object object1 = lengthFieldBasedFrameDecoder0.decode((ChannelHandlerContext) null, channel1, bigEndianHeapChannelBuffer0);
      assertNull(object1);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(6, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(6, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(6, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)99, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(4, 0, 4, 0, 0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory(64);
      assertNotNull(directChannelBufferFactory0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1501);
      assertNotNull(byteBuffer0);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1501 cap=1501]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(1501, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1501, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(1501, byteBuffer0.remaining());
      
      ChannelBuffer channelBuffer0 = directChannelBufferFactory0.getBuffer(byteBuffer0);
      assertNotNull(channelBuffer0);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1501 cap=1501]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(1501, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1501, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(1501, byteBuffer0.remaining());
      assertEquals(1501, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(1501, channelBuffer0.capacity());
      assertTrue(channelBuffer0.isDirect());
      assertEquals(1501, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.readable());
      
      ChannelBuffer channelBuffer1 = lengthFieldBasedFrameDecoder0.extractFrame(channelBuffer0, 0, 64);
      assertNotNull(channelBuffer1);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1501 cap=1501]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(1501, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1501, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(1501, byteBuffer0.remaining());
      assertEquals(1501, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(1501, channelBuffer0.capacity());
      assertTrue(channelBuffer0.isDirect());
      assertEquals(1501, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.readable());
      assertEquals(64, channelBuffer1.writerIndex());
      assertFalse(channelBuffer1.hasArray());
      assertEquals(64, channelBuffer1.capacity());
      assertTrue(channelBuffer1.readable());
      assertTrue(channelBuffer1.isDirect());
      assertEquals(64, channelBuffer1.readableBytes());
      assertEquals(0, channelBuffer1.readerIndex());
      assertFalse(channelBuffer1.equals((Object)channelBuffer0));
      assertNotSame(channelBuffer0, channelBuffer1);
      assertNotSame(channelBuffer1, channelBuffer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(1243, 2, 2);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(1243);
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(1243, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      
      ChannelBuffer channelBuffer0 = lengthFieldBasedFrameDecoder0.extractFrame(bigEndianHeapChannelBuffer0, 1243, 0);
      assertNotNull(channelBuffer0);
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(1243, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.capacity());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.readable());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertTrue(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(2830, 1391, 2, 0, 2377);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(byteOrder0, 2377);
      assertNotNull(dynamicChannelBuffer0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(2377, dynamicChannelBuffer0.capacity());
      
      ChannelBuffer channelBuffer0 = lengthFieldBasedFrameDecoder0.extractFrame(dynamicChannelBuffer0, 0, 1391);
      assertNotNull(channelBuffer0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(2377, dynamicChannelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(1391, channelBuffer0.capacity());
      assertTrue(channelBuffer0.readable());
      assertEquals(1391, channelBuffer0.writerIndex());
      assertEquals(1391, channelBuffer0.readableBytes());
      assertFalse(channelBuffer0.isDirect());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(4, 0, 4, 0, 0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame((ChannelBuffer) null, 4, (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(2, 0, 2);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory(177);
      assertNotNull(directChannelBufferFactory0);
      
      byte[] byteArray0 = new byte[8];
      ChannelBuffer channelBuffer0 = directChannelBufferFactory0.getBuffer((ByteOrder) null, byteArray0, 4, 0);
      assertNotNull(channelBuffer0);
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(channelBuffer0, (-1), (byte) (-20));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(4, 0, 4, 0, 0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory(64);
      assertNotNull(directChannelBufferFactory0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1501);
      assertNotNull(byteBuffer0);
      assertEquals(1501, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(1501, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals(1501, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1501 cap=1501]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      
      ChannelBuffer channelBuffer0 = directChannelBufferFactory0.getBuffer(byteBuffer0);
      assertNotNull(channelBuffer0);
      assertEquals(1501, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(1501, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals(1501, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1501 cap=1501]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1501, channelBuffer0.readableBytes());
      assertEquals(1501, channelBuffer0.writerIndex());
      assertEquals(1501, channelBuffer0.capacity());
      assertTrue(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.isDirect());
      assertFalse(channelBuffer0.hasArray());
      
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = (ByteBufferBackedChannelBuffer)lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, channel0, channelBuffer0);
      assertNotNull(byteBufferBackedChannelBuffer0);
      assertEquals(1501, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(1501, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals(1501, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1501 cap=1501]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1497, channelBuffer0.readableBytes());
      assertEquals(1501, channelBuffer0.writerIndex());
      assertEquals(4, channelBuffer0.readerIndex());
      assertEquals(1501, channelBuffer0.capacity());
      assertTrue(channelBuffer0.readable());
      assertTrue(channelBuffer0.isDirect());
      assertFalse(channelBuffer0.hasArray());
      assertEquals(4, byteBufferBackedChannelBuffer0.capacity());
      assertEquals(4, byteBufferBackedChannelBuffer0.readableBytes());
      assertFalse(byteBufferBackedChannelBuffer0.hasArray());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      assertEquals(4, byteBufferBackedChannelBuffer0.writerIndex());
      assertTrue(byteBufferBackedChannelBuffer0.isDirect());
      assertTrue(byteBufferBackedChannelBuffer0.readable());
      assertFalse(byteBufferBackedChannelBuffer0.equals((Object)channelBuffer0));
      assertNotSame(channelBuffer0, byteBufferBackedChannelBuffer0);
      assertNotSame(byteBufferBackedChannelBuffer0, channelBuffer0);
      
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(byteBufferBackedChannelBuffer0, 31, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.buffer.ByteBufferBackedChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(4, 0, 4, 0, 0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory(64);
      assertNotNull(directChannelBufferFactory0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1501);
      assertNotNull(byteBuffer0);
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1501, byteBuffer0.remaining());
      assertEquals(1501, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(1501, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1501 cap=1501]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      
      ChannelBuffer channelBuffer0 = directChannelBufferFactory0.getBuffer(byteBuffer0);
      assertNotNull(channelBuffer0);
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1501, byteBuffer0.remaining());
      assertEquals(1501, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(1501, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1501 cap=1501]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(1501, channelBuffer0.capacity());
      assertEquals(1501, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.readable());
      assertTrue(channelBuffer0.isDirect());
      assertEquals(1501, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.hasArray());
      
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(channelBuffer0, 0, 2218);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(2, 0, 2);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory(177);
      assertNotNull(directChannelBufferFactory0);
      
      ChannelBuffer channelBuffer0 = directChannelBufferFactory0.getBuffer(5);
      assertNotNull(channelBuffer0);
      assertTrue(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertFalse(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.readable());
      assertEquals(5, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.writerIndex());
      
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(channelBuffer0, (byte)99, (byte) (-25));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity: -25
         //
         verifyException("org.jboss.netty.buffer.DirectChannelBufferFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(1243, 2, 2);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder1 = lengthFieldBasedFrameDecoder0.setFailImmediatelyOnTooLongFrame(true);
      assertNotNull(lengthFieldBasedFrameDecoder1);
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
      assertSame(lengthFieldBasedFrameDecoder1, lengthFieldBasedFrameDecoder0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)99;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertEquals(6, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(6, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(6, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)99, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn((Channel) null).when(channelHandlerContext0).getChannel();
      try { 
        lengthFieldBasedFrameDecoder1.decodeB(channelHandlerContext0, channel0, bigEndianHeapChannelBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.channel.Channels", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(8, 0, 3);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      try { 
        lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, channel0, (ChannelBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(4, 4, 4, 2, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (4) must be equal to or greater than lengthFieldOffset (4) + lengthFieldLength (4).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(597, 89, 1, 89, 597);
      assertNotNull(lengthFieldBasedFrameDecoder0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(1243, 2, 2);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder1 = lengthFieldBasedFrameDecoder0.setFailImmediatelyOnTooLongFrame(true);
      assertNotNull(lengthFieldBasedFrameDecoder1);
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
      assertSame(lengthFieldBasedFrameDecoder1, lengthFieldBasedFrameDecoder0);
      
      ChannelPipeline channelPipeline0 = mock(ChannelPipeline.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(channelPipeline0).when(channel0).getPipeline();
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn(channel0).when(channelHandlerContext0).getChannel();
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)99;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(6, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(6, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(6, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)99, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Object object0 = lengthFieldBasedFrameDecoder1.decodeLast(channelHandlerContext0, channel1, bigEndianHeapChannelBuffer0);
      assertNull(object0);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(6, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(6, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(6, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)99, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
      assertSame(lengthFieldBasedFrameDecoder1, lengthFieldBasedFrameDecoder0);
      
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Object object1 = lengthFieldBasedFrameDecoder1.decodeB(channelHandlerContext1, channel2, bigEndianHeapChannelBuffer0);
      assertNull(object1);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(6, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(6, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(6, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)99, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
      assertSame(lengthFieldBasedFrameDecoder1, lengthFieldBasedFrameDecoder0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(1243, 2, 2);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)99;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertEquals(6, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(6, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(6, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)99, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Object object0 = lengthFieldBasedFrameDecoder0.decodeB(channelHandlerContext0, channel0, bigEndianHeapChannelBuffer0);
      assertNull(object0);
      assertEquals(6, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(6, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(6, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)99, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(3, 0, 3, 0, 0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory(64);
      assertNotNull(directChannelBufferFactory0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1501);
      assertNotNull(byteBuffer0);
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1501, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1501 cap=1501]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(1501, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1501, byteBuffer0.limit());
      
      ChannelBuffer channelBuffer0 = directChannelBufferFactory0.getBuffer(byteBuffer0);
      assertNotNull(channelBuffer0);
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1501, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1501 cap=1501]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(1501, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1501, byteBuffer0.limit());
      assertTrue(channelBuffer0.readable());
      assertFalse(channelBuffer0.hasArray());
      assertEquals(1501, channelBuffer0.capacity());
      assertTrue(channelBuffer0.isDirect());
      assertEquals(1501, channelBuffer0.readableBytes());
      assertEquals(1501, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.readerIndex());
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = (ByteBufferBackedChannelBuffer)lengthFieldBasedFrameDecoder0.decodeB(channelHandlerContext0, channel0, channelBuffer0);
      assertNotNull(byteBufferBackedChannelBuffer0);
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1501, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1501 cap=1501]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(1501, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1501, byteBuffer0.limit());
      assertEquals(3, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.readable());
      assertFalse(channelBuffer0.hasArray());
      assertEquals(1501, channelBuffer0.capacity());
      assertTrue(channelBuffer0.isDirect());
      assertEquals(1501, channelBuffer0.writerIndex());
      assertEquals(1498, channelBuffer0.readableBytes());
      assertFalse(byteBufferBackedChannelBuffer0.hasArray());
      assertEquals(3, byteBufferBackedChannelBuffer0.capacity());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      assertTrue(byteBufferBackedChannelBuffer0.readable());
      assertEquals(3, byteBufferBackedChannelBuffer0.readableBytes());
      assertEquals(3, byteBufferBackedChannelBuffer0.writerIndex());
      assertTrue(byteBufferBackedChannelBuffer0.isDirect());
      assertFalse(byteBufferBackedChannelBuffer0.equals((Object)channelBuffer0));
      assertNotSame(channelBuffer0, byteBufferBackedChannelBuffer0);
      assertNotSame(byteBufferBackedChannelBuffer0, channelBuffer0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(1243, 2, 2);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(2);
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(2, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Object object0 = lengthFieldBasedFrameDecoder0.decodeB(channelHandlerContext0, channel0, bigEndianHeapChannelBuffer0);
      assertNull(object0);
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(2, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(4, 0, 4, 0, 0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory(64);
      assertNotNull(directChannelBufferFactory0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(4);
      assertNotNull(byteBuffer0);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(4, byteBuffer0.capacity());
      assertEquals(4, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=4 cap=4]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(4, byteBuffer0.limit());
      
      ChannelBuffer channelBuffer0 = directChannelBufferFactory0.getBuffer(byteBuffer0);
      assertNotNull(channelBuffer0);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(4, byteBuffer0.capacity());
      assertEquals(4, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=4 cap=4]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(4, byteBuffer0.limit());
      assertFalse(channelBuffer0.hasArray());
      assertTrue(channelBuffer0.readable());
      assertEquals(4, channelBuffer0.readableBytes());
      assertEquals(4, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(4, channelBuffer0.capacity());
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = (ByteBufferBackedChannelBuffer)lengthFieldBasedFrameDecoder0.decodeB(channelHandlerContext0, channel0, channelBuffer0);
      assertNotNull(byteBufferBackedChannelBuffer0);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(4, byteBuffer0.capacity());
      assertEquals(4, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=4 cap=4]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(4, byteBuffer0.limit());
      assertFalse(channelBuffer0.readable());
      assertFalse(channelBuffer0.hasArray());
      assertEquals(4, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(4, channelBuffer0.readerIndex());
      assertEquals(4, channelBuffer0.capacity());
      assertTrue(byteBufferBackedChannelBuffer0.readable());
      assertFalse(byteBufferBackedChannelBuffer0.hasArray());
      assertTrue(byteBufferBackedChannelBuffer0.isDirect());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      assertEquals(4, byteBufferBackedChannelBuffer0.readableBytes());
      assertEquals(4, byteBufferBackedChannelBuffer0.writerIndex());
      assertEquals(4, byteBufferBackedChannelBuffer0.capacity());
      assertFalse(byteBufferBackedChannelBuffer0.equals((Object)channelBuffer0));
      assertNotSame(channelBuffer0, byteBufferBackedChannelBuffer0);
      assertNotSame(byteBufferBackedChannelBuffer0, channelBuffer0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(1243, 2, 2);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)38;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertEquals(6, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(6, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(6, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)38, (byte)0, (byte)0}, byteArray0);
      
      Object object0 = lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, channel0, bigEndianHeapChannelBuffer0);
      assertNull(object0);
      assertEquals(6, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(6, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(6, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)38, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(4, 0, 4, 0, 0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory(64);
      assertNotNull(directChannelBufferFactory0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(4);
      assertNotNull(byteBuffer0);
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=4 cap=4]", byteBuffer0.toString());
      assertEquals(4, byteBuffer0.capacity());
      assertEquals(4, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(4, byteBuffer0.limit());
      
      ChannelBuffer channelBuffer0 = directChannelBufferFactory0.getBuffer(byteBuffer0);
      assertNotNull(channelBuffer0);
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=4 cap=4]", byteBuffer0.toString());
      assertEquals(4, byteBuffer0.capacity());
      assertEquals(4, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(4, byteBuffer0.limit());
      assertEquals(4, channelBuffer0.writerIndex());
      assertEquals(4, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertFalse(channelBuffer0.hasArray());
      assertEquals(4, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.isDirect());
      assertTrue(channelBuffer0.readable());
      
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = (ByteBufferBackedChannelBuffer)lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, channel0, channelBuffer0);
      assertNotNull(byteBufferBackedChannelBuffer0);
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=4 cap=4]", byteBuffer0.toString());
      assertEquals(4, byteBuffer0.capacity());
      assertEquals(4, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(4, byteBuffer0.limit());
      assertFalse(channelBuffer0.readable());
      assertEquals(4, channelBuffer0.writerIndex());
      assertEquals(4, channelBuffer0.capacity());
      assertFalse(channelBuffer0.hasArray());
      assertTrue(channelBuffer0.isDirect());
      assertEquals(4, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertTrue(byteBufferBackedChannelBuffer0.isDirect());
      assertFalse(byteBufferBackedChannelBuffer0.hasArray());
      assertTrue(byteBufferBackedChannelBuffer0.readable());
      assertEquals(4, byteBufferBackedChannelBuffer0.capacity());
      assertEquals(4, byteBufferBackedChannelBuffer0.writerIndex());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      assertEquals(4, byteBufferBackedChannelBuffer0.readableBytes());
      assertFalse(byteBufferBackedChannelBuffer0.equals((Object)channelBuffer0));
      assertNotSame(channelBuffer0, byteBufferBackedChannelBuffer0);
      assertNotSame(byteBufferBackedChannelBuffer0, channelBuffer0);
      
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer1 = (ByteBufferBackedChannelBuffer)lengthFieldBasedFrameDecoder0.decode(channelHandlerContext1, channel1, channelBuffer0);
      assertNull(byteBufferBackedChannelBuffer1);
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=4 cap=4]", byteBuffer0.toString());
      assertEquals(4, byteBuffer0.capacity());
      assertEquals(4, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(4, byteBuffer0.limit());
      assertFalse(channelBuffer0.readable());
      assertEquals(4, channelBuffer0.writerIndex());
      assertEquals(4, channelBuffer0.capacity());
      assertFalse(channelBuffer0.hasArray());
      assertTrue(channelBuffer0.isDirect());
      assertEquals(4, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertFalse(channelBuffer0.equals((Object)byteBufferBackedChannelBuffer0));
      assertNotSame(channelBuffer0, byteBufferBackedChannelBuffer0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(3261, 8, 8, 8, 3261);
      assertNotNull(lengthFieldBasedFrameDecoder0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(2005, 1, 2005, 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldLength must be either 1, 2, 3, 4, or 8: 2005
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(3, 0, 3, 0, 0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory(64);
      assertNotNull(directChannelBufferFactory0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1501);
      assertNotNull(byteBuffer0);
      assertEquals(1501, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(1501, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1501 cap=1501]", byteBuffer0.toString());
      assertEquals(1501, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      
      ChannelBuffer channelBuffer0 = directChannelBufferFactory0.getBuffer(byteBuffer0);
      assertNotNull(channelBuffer0);
      assertEquals(1501, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(1501, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1501 cap=1501]", byteBuffer0.toString());
      assertEquals(1501, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(channelBuffer0.isDirect());
      assertFalse(channelBuffer0.hasArray());
      assertEquals(1501, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(1501, channelBuffer0.readableBytes());
      assertEquals(1501, channelBuffer0.capacity());
      assertTrue(channelBuffer0.readable());
      
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = (ByteBufferBackedChannelBuffer)lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, channel0, channelBuffer0);
      assertNotNull(byteBufferBackedChannelBuffer0);
      assertEquals(1501, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(1501, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1501 cap=1501]", byteBuffer0.toString());
      assertEquals(1501, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(channelBuffer0.isDirect());
      assertFalse(channelBuffer0.hasArray());
      assertEquals(3, channelBuffer0.readerIndex());
      assertEquals(1501, channelBuffer0.writerIndex());
      assertEquals(1498, channelBuffer0.readableBytes());
      assertEquals(1501, channelBuffer0.capacity());
      assertTrue(channelBuffer0.readable());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      assertEquals(3, byteBufferBackedChannelBuffer0.readableBytes());
      assertFalse(byteBufferBackedChannelBuffer0.hasArray());
      assertEquals(3, byteBufferBackedChannelBuffer0.capacity());
      assertTrue(byteBufferBackedChannelBuffer0.isDirect());
      assertTrue(byteBufferBackedChannelBuffer0.readable());
      assertEquals(3, byteBufferBackedChannelBuffer0.writerIndex());
      assertFalse(byteBufferBackedChannelBuffer0.equals((Object)channelBuffer0));
      assertNotSame(channelBuffer0, byteBufferBackedChannelBuffer0);
      assertNotSame(byteBufferBackedChannelBuffer0, channelBuffer0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(24, 24, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (24) must be equal to or greater than lengthFieldOffset (24) + lengthFieldLength (1).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(4588, 4588, (-25), 4588, (-25));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialBytesToStrip must be a non-negative integer: -25
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(23, (-19), 4, 23, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldOffset must be a non-negative integer: -19
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder((-2072), 64, 1393, (-2072), 1393);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength must be a positive integer: -2072
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(1243, 2, 2);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(2);
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertEquals(2, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(bigEndianHeapChannelBuffer0, (-2421), 3261);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }
}
