/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 15 10:38:47 GMT 2019
 */

package org.webbitserver.netty;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URI;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;
import org.webbitserver.WebSocketHandler;
import org.webbitserver.netty.WebSocketClient;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WebSocketClient_ESTest extends WebSocketClient_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      URI uRI0 = MockURI.URI("");
      assertNotNull(uRI0);
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("", uRI0.toString());
      assertNull(uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
      assertNotNull(webSocketClient0);
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("", uRI0.toString());
      assertNull(uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      
      WebSocketClient webSocketClient1 = webSocketClient0.uncaughtExceptionHandler((Thread.UncaughtExceptionHandler) null);
      assertNotNull(webSocketClient1);
      assertSame(webSocketClient0, webSocketClient1);
      assertSame(webSocketClient1, webSocketClient0);
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("", uRI0.toString());
      assertNull(uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      URI uRI0 = MockURI.create("Accept-Encoding");
      //  // Unstable assertion: assertNotNull(uRI0);
      //  // Unstable assertion: assertNull(uRI0.getRawQuery());
      //  // Unstable assertion: assertFalse(uRI0.isAbsolute());
      //  // Unstable assertion: assertEquals((-1), uRI0.getPort());
      //  // Unstable assertion: assertNull(uRI0.getScheme());
      //  // Unstable assertion: assertNull(uRI0.getRawAuthority());
      //  // Unstable assertion: assertEquals("Accept-Encoding", uRI0.getRawPath());
      //  // Unstable assertion: assertNull(uRI0.getRawFragment());
      //  // Unstable assertion: assertFalse(uRI0.isOpaque());
      //  // Unstable assertion: assertEquals("Accept-Encoding", uRI0.toString());
      //  // Unstable assertion: assertNull(uRI0.getHost());
      //  // Unstable assertion: assertNull(uRI0.getRawUserInfo());
      
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(291);
      //  // Unstable assertion: assertNotNull(scheduledThreadPoolExecutor0);
      
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0, scheduledThreadPoolExecutor0);
      //  // Unstable assertion: assertNotNull(webSocketClient0);
      //  // Unstable assertion: assertNull(uRI0.getRawQuery());
      //  // Unstable assertion: assertFalse(uRI0.isAbsolute());
      //  // Unstable assertion: assertEquals((-1), uRI0.getPort());
      //  // Unstable assertion: assertNull(uRI0.getScheme());
      //  // Unstable assertion: assertNull(uRI0.getRawAuthority());
      //  // Unstable assertion: assertEquals("Accept-Encoding", uRI0.getRawPath());
      //  // Unstable assertion: assertNull(uRI0.getRawFragment());
      //  // Unstable assertion: assertFalse(uRI0.isOpaque());
      //  // Unstable assertion: assertEquals("Accept-Encoding", uRI0.toString());
      //  // Unstable assertion: assertNull(uRI0.getHost());
      //  // Unstable assertion: assertNull(uRI0.getRawUserInfo());
      
      MockThread mockThread0 = new MockThread();
      //  // Unstable assertion: assertNotNull(mockThread0);
      
      ThreadGroup threadGroup0 = (ThreadGroup)mockThread0.getUncaughtExceptionHandler();
      //  // Unstable assertion: assertNotNull(threadGroup0);
      //  // Unstable assertion: assertEquals(0, mockThread0.countStackFrames());
      //  // Unstable assertion: assertFalse(mockThread0.isDaemon());
      //  // Unstable assertion: assertFalse(mockThread0.isInterrupted());
      //  // Unstable assertion: assertEquals("Test_Execution_Group", threadGroup0.getName());
      
      WebSocketClient webSocketClient1 = webSocketClient0.connectionExceptionHandler(threadGroup0);
      //  // Unstable assertion: assertNotNull(webSocketClient1);
      //  // Unstable assertion: assertSame(webSocketClient0, webSocketClient1);
      //  // Unstable assertion: assertSame(webSocketClient1, webSocketClient0);
      //  // Unstable assertion: assertNull(uRI0.getRawQuery());
      //  // Unstable assertion: assertFalse(uRI0.isAbsolute());
      //  // Unstable assertion: assertEquals((-1), uRI0.getPort());
      //  // Unstable assertion: assertNull(uRI0.getScheme());
      //  // Unstable assertion: assertNull(uRI0.getRawAuthority());
      //  // Unstable assertion: assertEquals("Accept-Encoding", uRI0.getRawPath());
      //  // Unstable assertion: assertNull(uRI0.getRawFragment());
      //  // Unstable assertion: assertFalse(uRI0.isOpaque());
      //  // Unstable assertion: assertEquals("Accept-Encoding", uRI0.toString());
      //  // Unstable assertion: assertNull(uRI0.getHost());
      //  // Unstable assertion: assertNull(uRI0.getRawUserInfo());
      //  // Unstable assertion: assertEquals(0, mockThread0.countStackFrames());
      //  // Unstable assertion: assertFalse(mockThread0.isDaemon());
      //  // Unstable assertion: assertFalse(mockThread0.isInterrupted());
      //  // Unstable assertion: assertEquals("Test_Execution_Group", threadGroup0.getName());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          URI uRI0 = MockURI.URI((String) null, (String) null, "eE!9i");
          assertNotNull(uRI0);
          assertEquals("", uRI0.getRawPath());
          assertNull(uRI0.getRawAuthority());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("#eE!9i", uRI0.toString());
          assertNull(uRI0.getRawQuery());
          assertFalse(uRI0.isAbsolute());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getScheme());
          assertEquals("eE!9i", uRI0.getRawFragment());
          
          WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
          assertNotNull(webSocketClient0);
          assertEquals("", uRI0.getRawPath());
          assertNull(uRI0.getRawAuthority());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("#eE!9i", uRI0.toString());
          assertNull(uRI0.getRawQuery());
          assertFalse(uRI0.isAbsolute());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getScheme());
          assertEquals("eE!9i", uRI0.getRawFragment());
          
          // Undeclared exception!
          try { 
            webSocketClient0.start();
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // java.lang.SecurityException: Security manager blocks (\"java.net.SocketPermission\" \"200.42.42.0:80\" \"connect,resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1051)
             // sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:625)
             // org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink.connect(NioClientSocketPipelineSink.java:150)
             // org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink.eventSunk(NioClientSocketPipelineSink.java:113)
             // org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendDownstream(DefaultChannelPipeline.java:771)
             // org.jboss.netty.handler.codec.oneone.OneToOneEncoder.handleDownstream(OneToOneEncoder.java:60)
             // org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:591)
             // org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:582)
             // org.jboss.netty.channel.Channels.connect(Channels.java:541)
             // org.jboss.netty.channel.AbstractChannel.connect(AbstractChannel.java:210)
             // org.jboss.netty.bootstrap.ClientBootstrap.connect(ClientBootstrap.java:227)
             // org.jboss.netty.bootstrap.ClientBootstrap.connect(ClientBootstrap.java:188)
             // org.webbitserver.netty.WebSocketClient.start(WebSocketClient.java:130)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.webbitserver.netty.WebSocketClient", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2879);
      assertNotNull(forkJoinPool0);
      
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient((URI) null, webSocketHandler0, forkJoinPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      assertNotNull(uRI0);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("ftp", uRI0.getScheme());
      assertEquals("ftp://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      
      URI uRI1 = MockURI.resolve(uRI0, "");
      assertTrue(uRI1.equals((Object)uRI0));
      assertNotNull(uRI1);
      assertNotSame(uRI0, uRI1);
      assertNotSame(uRI1, uRI0);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("ftp", uRI0.getScheme());
      assertEquals("ftp://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI1.getHost());
      assertEquals("ftp", uRI1.getScheme());
      assertEquals("ftp://foo.bar", uRI1.toString());
      assertEquals("", uRI1.getRawPath());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("foo.bar", uRI1.getRawAuthority());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getRawFragment());
      assertEquals((-1), uRI1.getPort());
      
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI1, webSocketHandler0, forkJoinPool0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only ws(s) is supported.
         //
         verifyException("org.webbitserver.netty.WebSocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient((URI) null, webSocketHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      URI uRI0 = MockURI.URI("dummyvalue", "dummyvalue", "dummyvalue", 65, (String) null, (String) null, (String) null);
      assertNotNull(uRI0);
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("dummyvalue", uRI0.getHost());
      assertEquals("dummyvalue", uRI0.getRawUserInfo());
      assertEquals(65, uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("dummyvalue", uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only ws(s) is supported.
         //
         verifyException("org.webbitserver.netty.WebSocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      URI uRI0 = MockURI.URI((String) null, "!`Fw ks[HJ[*-[Lf!", "sec-websocket-version", 3007, "", "eYvMyY$4dAj=8dVA`", "org.webbitserver.netty.WebSocketClient$1");
      assertNotNull(uRI0);
      assertEquals("org.webbitserver.netty.WebSocketClient$1", uRI0.getRawFragment());
      assertNull(uRI0.getScheme());
      assertEquals("!%60Fw%20ks%5BHJ%5B*-%5BLf!", uRI0.getRawUserInfo());
      assertEquals("sec-websocket-version", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals(3007, uRI0.getPort());
      assertEquals("", uRI0.getRawPath());
      assertEquals("eY%7FvMyY$4dAj=8dVA%60", uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertEquals("!%60Fw%20ks%5BHJ%5B*-%5BLf!@sec-websocket-version:3007", uRI0.getRawAuthority());
      assertEquals("//!%60Fw%20ks%5BHJ%5B*-%5BLf!@sec-websocket-version:3007?eY%7FvMyY$4dAj=8dVA%60#org.webbitserver.netty.WebSocketClient$1", uRI0.toString());
      
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(672);
      assertNotNull(forkJoinPool0);
      
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0, forkJoinPool0);
      assertNotNull(webSocketClient0);
      assertEquals("org.webbitserver.netty.WebSocketClient$1", uRI0.getRawFragment());
      assertNull(uRI0.getScheme());
      assertEquals("!%60Fw%20ks%5BHJ%5B*-%5BLf!", uRI0.getRawUserInfo());
      assertEquals("sec-websocket-version", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals(3007, uRI0.getPort());
      assertEquals("", uRI0.getRawPath());
      assertEquals("eY%7FvMyY$4dAj=8dVA%60", uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertEquals("!%60Fw%20ks%5BHJ%5B*-%5BLf!@sec-websocket-version:3007", uRI0.getRawAuthority());
      assertEquals("//!%60Fw%20ks%5BHJ%5B*-%5BLf!@sec-websocket-version:3007?eY%7FvMyY$4dAj=8dVA%60#org.webbitserver.netty.WebSocketClient$1", uRI0.toString());
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      String string0 = "+YyU]!06&m\\[.xy";
      URI uRI0 = MockURI.URI("wsdecoder", "wsdecoder", "+YyU]!06&m[.xy");
      assertNotNull(uRI0);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertEquals("wsdecoder:wsdecoder#+YyU]!06&m[.xy", uRI0.toString());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("wsdecoder", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertEquals("+YyU]!06&m[.xy", uRI0.getRawFragment());
      
      URI uRI1 = MockURI.resolve(uRI0, "7");
      assertFalse(uRI1.equals((Object)uRI0));
      assertNotNull(uRI1);
      assertNotSame(uRI0, uRI1);
      assertNotSame(uRI1, uRI0);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertEquals("wsdecoder:wsdecoder#+YyU]!06&m[.xy", uRI0.toString());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("wsdecoder", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertEquals("+YyU]!06&m[.xy", uRI0.getRawFragment());
      assertNull(uRI1.getRawQuery());
      assertFalse(uRI1.isAbsolute());
      assertEquals("7", uRI1.toString());
      assertNull(uRI1.getHost());
      assertNull(uRI1.getScheme());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawFragment());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawAuthority());
      assertEquals("7", uRI1.getRawPath());
      
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI1, webSocketHandler0);
      assertFalse(uRI0.equals((Object)uRI1));
      assertFalse(uRI1.equals((Object)uRI0));
      assertNotNull(webSocketClient0);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertEquals("wsdecoder:wsdecoder#+YyU]!06&m[.xy", uRI0.toString());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("wsdecoder", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertEquals("+YyU]!06&m[.xy", uRI0.getRawFragment());
      assertNull(uRI1.getRawQuery());
      assertFalse(uRI1.isAbsolute());
      assertEquals("7", uRI1.toString());
      assertNull(uRI1.getHost());
      assertNull(uRI1.getScheme());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawFragment());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawAuthority());
      assertEquals("7", uRI1.getRawPath());
      
      // Undeclared exception!
      try { 
        webSocketClient0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.webbitserver.netty.WebSocketClient", e);
      }
  }
}
