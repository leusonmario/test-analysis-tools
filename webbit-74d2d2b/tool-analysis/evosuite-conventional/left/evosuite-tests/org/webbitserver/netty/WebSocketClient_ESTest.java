/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 10:39:35 GMT 2019
 */

package org.webbitserver.netty;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.net.URI;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.ChannelHandler;
import org.jboss.netty.channel.ChannelHandlerContext;
import org.jboss.netty.channel.ChannelPipeline;
import org.jboss.netty.channel.DefaultChannelFuture;
import org.jboss.netty.channel.ExceptionEvent;
import org.jboss.netty.channel.MessageEvent;
import org.jboss.netty.channel.SimpleChannelHandler;
import org.jboss.netty.channel.SimpleChannelUpstreamHandler;
import org.jboss.netty.channel.UpstreamMessageEvent;
import org.junit.runner.RunWith;
import org.webbitserver.WebSocket;
import org.webbitserver.WebSocketConnection;
import org.webbitserver.WebSocketHandler;
import org.webbitserver.handler.ReconnectingWebSocketHandler;
import org.webbitserver.netty.NettyHttpRequest;
import org.webbitserver.netty.NettyWebSocketConnection;
import org.webbitserver.netty.WebSocketClient;
import org.webbitserver.stub.StubConnection;
import org.webbitserver.stub.StubHttpRequest;
import org.webbitserver.wrapper.WebSocketConnectionWrapper;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WebSocketClient_ESTest extends WebSocketClient_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      URI uRI0 = MockURI.URI((String) null, (String) null, (String) null, "Y^{", "L\"a5IW");
      assertEquals("?Y%5E%7B#L%22a5IW", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertEquals("L%22a5IW", uRI0.getRawFragment());
      assertEquals("Y%5E%7B", uRI0.getRawQuery());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertNotNull(uRI0);
      
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, (WebSocketHandler) null);
      assertEquals("?Y%5E%7B#L%22a5IW", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertEquals("L%22a5IW", uRI0.getRawFragment());
      assertEquals("Y%5E%7B", uRI0.getRawQuery());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertNotNull(webSocketClient0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)73;
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient0.new HandshakeChannelHandler(byteArray0);
      assertEquals("?Y%5E%7B#L%22a5IW", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertEquals("L%22a5IW", uRI0.getRawFragment());
      assertEquals("Y%5E%7B", uRI0.getRawQuery());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-34), (byte) (-83), (byte) (-58), (byte) (-70), (byte)37, (byte)73}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(webSocketClient_HandshakeChannelHandler0);
      
      WebSocketClient webSocketClient1 = (WebSocketClient)webSocketClient0.connectionExceptionHandler((Thread.UncaughtExceptionHandler) null);
      assertEquals("?Y%5E%7B#L%22a5IW", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertEquals("L%22a5IW", uRI0.getRawFragment());
      assertEquals("Y%5E%7B", uRI0.getRawQuery());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertSame(webSocketClient0, webSocketClient1);
      assertSame(webSocketClient1, webSocketClient0);
      assertNotNull(webSocketClient1);
      
      StubConnection stubConnection0 = new StubConnection();
      assertNull(stubConnection0.version());
      assertFalse(stubConnection0.closed());
      assertNotNull(stubConnection0);
      
      WebSocketConnectionWrapper webSocketConnectionWrapper0 = new WebSocketConnectionWrapper(stubConnection0);
      assertNull(stubConnection0.version());
      assertFalse(stubConnection0.closed());
      assertNull(webSocketConnectionWrapper0.version());
      assertNotNull(webSocketConnectionWrapper0);
      
      WebSocketConnectionWrapper webSocketConnectionWrapper1 = webSocketConnectionWrapper0.send("Y^{");
      assertNull(webSocketConnectionWrapper1.version());
      assertNull(stubConnection0.version());
      assertFalse(stubConnection0.closed());
      assertNull(webSocketConnectionWrapper0.version());
      assertSame(webSocketConnectionWrapper1, webSocketConnectionWrapper0);
      assertSame(webSocketConnectionWrapper0, webSocketConnectionWrapper1);
      assertNotNull(webSocketConnectionWrapper1);
      
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      DefaultChannelFuture defaultChannelFuture0 = new DefaultChannelFuture(channel0, false);
      assertFalse(defaultChannelFuture0.isSuccess());
      assertTrue(defaultChannelFuture0.isUseDeadLockChecker());
      assertFalse(defaultChannelFuture0.isCancelled());
      assertFalse(defaultChannelFuture0.isDone());
      assertNotNull(defaultChannelFuture0);
      
      ChannelPipeline channelPipeline0 = mock(ChannelPipeline.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelHandler) null).when(channelPipeline0).remove(anyString());
      doReturn((ChannelHandler) null, (ChannelHandler) null, (ChannelHandler) null).when(channelPipeline0).replace(anyString() , anyString() , any(org.jboss.netty.channel.ChannelHandler.class));
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(channelPipeline0).when(channel1).getPipeline();
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn(channel1).when(channelHandlerContext0).getChannel();
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler1 = webSocketClient1.new HandshakeChannelHandler(byteArray0);
      assertFalse(webSocketClient_HandshakeChannelHandler1.equals((Object)webSocketClient_HandshakeChannelHandler0));
      assertEquals("?Y%5E%7B#L%22a5IW", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertEquals("L%22a5IW", uRI0.getRawFragment());
      assertEquals("Y%5E%7B", uRI0.getRawQuery());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-34), (byte) (-83), (byte) (-58), (byte) (-70), (byte)37, (byte)73}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(webSocketClient_HandshakeChannelHandler1);
      
      webSocketClient_HandshakeChannelHandler0.adjustPipelineToWebSocket(channelHandlerContext0, (MessageEvent) null, webSocketClient_HandshakeChannelHandler1, webSocketClient_HandshakeChannelHandler1);
      assertFalse(webSocketClient_HandshakeChannelHandler1.equals((Object)webSocketClient_HandshakeChannelHandler0));
      assertFalse(webSocketClient_HandshakeChannelHandler0.equals((Object)webSocketClient_HandshakeChannelHandler1));
      assertEquals("?Y%5E%7B#L%22a5IW", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertEquals("L%22a5IW", uRI0.getRawFragment());
      assertEquals("Y%5E%7B", uRI0.getRawQuery());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-34), (byte) (-83), (byte) (-58), (byte) (-70), (byte)37, (byte)73}, byteArray0);
      assertSame(webSocketClient0, webSocketClient1);
      assertNotSame(webSocketClient_HandshakeChannelHandler1, webSocketClient_HandshakeChannelHandler0);
      assertNotSame(webSocketClient_HandshakeChannelHandler0, webSocketClient_HandshakeChannelHandler1);
      assertSame(webSocketClient1, webSocketClient0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      URI uRI0 = MockURI.URI((String) null, (String) null, (String) null, "Y^{", "L\"a5IW");
      assertEquals((-1), uRI0.getPort());
      assertEquals("?Y%5E%7B#L%22a5IW", uRI0.toString());
      assertEquals("Y%5E%7B", uRI0.getRawQuery());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isAbsolute());
      assertEquals("L%22a5IW", uRI0.getRawFragment());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNotNull(uRI0);
      
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, (WebSocketHandler) null);
      assertEquals((-1), uRI0.getPort());
      assertEquals("?Y%5E%7B#L%22a5IW", uRI0.toString());
      assertEquals("Y%5E%7B", uRI0.getRawQuery());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isAbsolute());
      assertEquals("L%22a5IW", uRI0.getRawFragment());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNotNull(webSocketClient0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)73;
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient0.new HandshakeChannelHandler(byteArray0);
      assertEquals((-1), uRI0.getPort());
      assertEquals("?Y%5E%7B#L%22a5IW", uRI0.toString());
      assertEquals("Y%5E%7B", uRI0.getRawQuery());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isAbsolute());
      assertEquals("L%22a5IW", uRI0.getRawFragment());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-34), (byte) (-83), (byte) (-58), (byte) (-70), (byte)37, (byte)73}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(webSocketClient_HandshakeChannelHandler0);
      
      WebSocketClient webSocketClient1 = (WebSocketClient)webSocketClient0.connectionExceptionHandler((Thread.UncaughtExceptionHandler) null);
      assertEquals((-1), uRI0.getPort());
      assertEquals("?Y%5E%7B#L%22a5IW", uRI0.toString());
      assertEquals("Y%5E%7B", uRI0.getRawQuery());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isAbsolute());
      assertEquals("L%22a5IW", uRI0.getRawFragment());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertSame(webSocketClient0, webSocketClient1);
      assertSame(webSocketClient1, webSocketClient0);
      assertNotNull(webSocketClient1);
      
      StubConnection stubConnection0 = new StubConnection();
      assertNull(stubConnection0.version());
      assertFalse(stubConnection0.closed());
      assertNotNull(stubConnection0);
      
      WebSocketConnectionWrapper webSocketConnectionWrapper0 = new WebSocketConnectionWrapper(stubConnection0);
      assertNull(stubConnection0.version());
      assertFalse(stubConnection0.closed());
      assertNull(webSocketConnectionWrapper0.version());
      assertNotNull(webSocketConnectionWrapper0);
      
      WebSocketConnectionWrapper webSocketConnectionWrapper1 = webSocketConnectionWrapper0.send("Y^{");
      assertNull(webSocketConnectionWrapper1.version());
      assertNull(stubConnection0.version());
      assertFalse(stubConnection0.closed());
      assertNull(webSocketConnectionWrapper0.version());
      assertSame(webSocketConnectionWrapper1, webSocketConnectionWrapper0);
      assertSame(webSocketConnectionWrapper0, webSocketConnectionWrapper1);
      assertNotNull(webSocketConnectionWrapper1);
      
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      DefaultChannelFuture defaultChannelFuture0 = new DefaultChannelFuture(channel0, false);
      assertFalse(defaultChannelFuture0.isDone());
      assertFalse(defaultChannelFuture0.isCancelled());
      assertFalse(defaultChannelFuture0.isSuccess());
      assertTrue(defaultChannelFuture0.isUseDeadLockChecker());
      assertNotNull(defaultChannelFuture0);
      
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelPipeline) null).when(channel1).getPipeline();
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn(channel1).when(channelHandlerContext0).getChannel();
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler1 = webSocketClient1.new HandshakeChannelHandler(byteArray0);
      assertFalse(webSocketClient_HandshakeChannelHandler1.equals((Object)webSocketClient_HandshakeChannelHandler0));
      assertEquals((-1), uRI0.getPort());
      assertEquals("?Y%5E%7B#L%22a5IW", uRI0.toString());
      assertEquals("Y%5E%7B", uRI0.getRawQuery());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isAbsolute());
      assertEquals("L%22a5IW", uRI0.getRawFragment());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-34), (byte) (-83), (byte) (-58), (byte) (-70), (byte)37, (byte)73}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(webSocketClient_HandshakeChannelHandler1);
      
      // Undeclared exception!
      try { 
        webSocketClient_HandshakeChannelHandler0.adjustPipelineToWebSocket(channelHandlerContext0, (MessageEvent) null, webSocketClient_HandshakeChannelHandler1, webSocketClient_HandshakeChannelHandler1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.webbitserver.netty.WebSocketClient$HandshakeChannelHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          URI uRI0 = MockURI.aFileURI;
          assertNull(uRI0.getRawQuery());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertTrue(uRI0.isAbsolute());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertFalse(uRI0.isOpaque());
          assertEquals("file", uRI0.getScheme());
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawUserInfo());
          assertNotNull(uRI0);
          
          WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
          StubConnection stubConnection0 = new StubConnection();
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertNotNull(stubConnection0);
          
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0, stubConnection0);
          assertNull(uRI0.getRawQuery());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertTrue(uRI0.isAbsolute());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertFalse(uRI0.isOpaque());
          assertEquals("file", uRI0.getScheme());
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawUserInfo());
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertNotNull(webSocketClient0);
          
          ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, 487L);
          assertNull(uRI0.getRawQuery());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertTrue(uRI0.isAbsolute());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertFalse(uRI0.isOpaque());
          assertEquals("file", uRI0.getScheme());
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawUserInfo());
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertNotNull(reconnectingWebSocketHandler0);
          
          WebSocketClient webSocketClient1 = webSocketClient0.reconnectEvery(487L);
          assertNull(uRI0.getRawQuery());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertTrue(uRI0.isAbsolute());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertFalse(uRI0.isOpaque());
          assertEquals("file", uRI0.getScheme());
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawUserInfo());
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient1, webSocketClient0);
          assertNotNull(webSocketClient1);
          
          WebSocketClient webSocketClient2 = webSocketClient1.setupSsl((InputStream) null, "Failed to configure the datagram socket timeout.");
          assertNull(uRI0.getRawQuery());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertTrue(uRI0.isAbsolute());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertFalse(uRI0.isOpaque());
          assertEquals("file", uRI0.getScheme());
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawUserInfo());
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertSame(webSocketClient0, webSocketClient2);
          assertSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient1, webSocketClient0);
          assertSame(webSocketClient1, webSocketClient2);
          assertSame(webSocketClient2, webSocketClient0);
          assertSame(webSocketClient2, webSocketClient1);
          assertNotNull(webSocketClient2);
          
          byte[] byteArray0 = new byte[1];
          byteArray0[0] = (byte) (-3);
          StubConnection stubConnection1 = stubConnection0.send(byteArray0);
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertNull(stubConnection1.version());
          assertFalse(stubConnection1.closed());
          assertArrayEquals(new byte[] {(byte) (-3)}, byteArray0);
          assertSame(stubConnection0, stubConnection1);
          assertSame(stubConnection1, stubConnection0);
          assertEquals(1, byteArray0.length);
          assertNotNull(stubConnection1);
          
          byte[] byteArray1 = new byte[3];
          assertFalse(byteArray1.equals((Object)byteArray0));
          
          WebSocketClient webSocketClient3 = webSocketClient2.reconnectEvery(487L);
          assertNull(uRI0.getRawQuery());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertTrue(uRI0.isAbsolute());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertFalse(uRI0.isOpaque());
          assertEquals("file", uRI0.getScheme());
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawUserInfo());
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertSame(stubConnection0, stubConnection1);
          assertSame(webSocketClient0, webSocketClient2);
          assertSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient0, webSocketClient3);
          assertSame(webSocketClient1, webSocketClient0);
          assertSame(webSocketClient1, webSocketClient2);
          assertSame(webSocketClient1, webSocketClient3);
          assertSame(webSocketClient2, webSocketClient0);
          assertSame(webSocketClient2, webSocketClient3);
          assertSame(webSocketClient2, webSocketClient1);
          assertSame(webSocketClient3, webSocketClient1);
          assertSame(webSocketClient3, webSocketClient2);
          assertSame(webSocketClient3, webSocketClient0);
          assertNotNull(webSocketClient3);
          
          reconnectingWebSocketHandler0.onClose(stubConnection0);
          assertNull(uRI0.getRawQuery());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertTrue(uRI0.isAbsolute());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertFalse(uRI0.isOpaque());
          assertEquals("file", uRI0.getScheme());
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawUserInfo());
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertSame(stubConnection0, stubConnection1);
          assertSame(webSocketClient0, webSocketClient2);
          assertSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient0, webSocketClient3);
          
          byteArray1[0] = (byte)79;
          byteArray1[1] = (byte) (-124);
          byteArray1[2] = (byte)17;
          WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient2.new HandshakeChannelHandler(byteArray1);
          assertFalse(byteArray1.equals((Object)byteArray0));
          assertNull(uRI0.getRawQuery());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertTrue(uRI0.isAbsolute());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertFalse(uRI0.isOpaque());
          assertEquals("file", uRI0.getScheme());
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawUserInfo());
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertArrayEquals(new byte[] {(byte)79, (byte) (-124), (byte)17}, byteArray1);
          assertEquals(3, byteArray1.length);
          assertNotNull(webSocketClient_HandshakeChannelHandler0);
          
          ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
          WebSocketClient webSocketClient4 = webSocketClient3.setupSsl((InputStream) null, "Failed to configure the datagram socket timeout.");
          assertNull(uRI0.getRawQuery());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertTrue(uRI0.isAbsolute());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertFalse(uRI0.isOpaque());
          assertEquals("file", uRI0.getScheme());
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawUserInfo());
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertSame(webSocketClient4, webSocketClient2);
          assertSame(webSocketClient4, webSocketClient1);
          assertSame(webSocketClient4, webSocketClient3);
          assertSame(webSocketClient4, webSocketClient0);
          assertSame(stubConnection0, stubConnection1);
          assertSame(webSocketClient0, webSocketClient4);
          assertSame(webSocketClient0, webSocketClient2);
          assertSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient0, webSocketClient3);
          assertSame(webSocketClient1, webSocketClient0);
          assertSame(webSocketClient1, webSocketClient2);
          assertSame(webSocketClient1, webSocketClient4);
          assertSame(webSocketClient1, webSocketClient3);
          assertSame(webSocketClient2, webSocketClient0);
          assertSame(webSocketClient2, webSocketClient4);
          assertSame(webSocketClient2, webSocketClient3);
          assertSame(webSocketClient2, webSocketClient1);
          assertSame(webSocketClient3, webSocketClient1);
          assertSame(webSocketClient3, webSocketClient4);
          assertSame(webSocketClient3, webSocketClient2);
          assertSame(webSocketClient3, webSocketClient0);
          assertNotNull(webSocketClient4);
          
          WebSocketClient webSocketClient5 = webSocketClient4.start();
          assertNull(uRI0.getRawQuery());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertTrue(uRI0.isAbsolute());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertFalse(uRI0.isOpaque());
          assertEquals("file", uRI0.getScheme());
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawUserInfo());
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertSame(webSocketClient4, webSocketClient2);
          assertSame(webSocketClient4, webSocketClient1);
          assertSame(webSocketClient4, webSocketClient3);
          assertSame(webSocketClient4, webSocketClient0);
          assertSame(webSocketClient4, webSocketClient5);
          assertSame(stubConnection0, stubConnection1);
          assertSame(webSocketClient5, webSocketClient2);
          assertSame(webSocketClient5, webSocketClient4);
          assertSame(webSocketClient5, webSocketClient1);
          assertSame(webSocketClient5, webSocketClient0);
          assertSame(webSocketClient5, webSocketClient3);
          assertSame(webSocketClient0, webSocketClient4);
          assertSame(webSocketClient0, webSocketClient2);
          assertSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient0, webSocketClient3);
          assertSame(webSocketClient0, webSocketClient5);
          assertSame(webSocketClient1, webSocketClient0);
          assertSame(webSocketClient1, webSocketClient5);
          assertSame(webSocketClient1, webSocketClient2);
          assertSame(webSocketClient1, webSocketClient4);
          assertSame(webSocketClient1, webSocketClient3);
          assertSame(webSocketClient2, webSocketClient5);
          assertSame(webSocketClient2, webSocketClient0);
          assertSame(webSocketClient2, webSocketClient4);
          assertSame(webSocketClient2, webSocketClient3);
          assertSame(webSocketClient2, webSocketClient1);
          assertSame(webSocketClient3, webSocketClient1);
          assertSame(webSocketClient3, webSocketClient4);
          assertSame(webSocketClient3, webSocketClient5);
          assertSame(webSocketClient3, webSocketClient2);
          assertSame(webSocketClient3, webSocketClient0);
          assertNotNull(webSocketClient5);
          
          MockThread mockThread0 = new MockThread((Runnable) null, "*DCR,jHX?]vD");
          assertNotNull(mockThread0);
          
          MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "*DCR,jHX?]vD");
          assertFalse(mockThread1.equals((Object)mockThread0));
          assertNotNull(mockThread1);
          
          MockThread mockThread2 = new MockThread(mockThread1);
          assertFalse(mockThread0.equals((Object)mockThread1));
          assertFalse(mockThread1.equals((Object)mockThread0));
          assertFalse(mockThread2.equals((Object)mockThread1));
          assertFalse(mockThread2.equals((Object)mockThread0));
          assertNotNull(mockThread2);
          
          WebSocketClient webSocketClient6 = webSocketClient1.reconnectEvery((byte) (-124));
          assertNull(uRI0.getRawQuery());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertTrue(uRI0.isAbsolute());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertFalse(uRI0.isOpaque());
          assertEquals("file", uRI0.getScheme());
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawUserInfo());
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertSame(stubConnection0, stubConnection1);
          assertSame(webSocketClient0, webSocketClient4);
          assertSame(webSocketClient0, webSocketClient2);
          assertSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient0, webSocketClient3);
          assertSame(webSocketClient0, webSocketClient6);
          assertSame(webSocketClient0, webSocketClient5);
          assertSame(webSocketClient1, webSocketClient6);
          assertSame(webSocketClient1, webSocketClient0);
          assertSame(webSocketClient1, webSocketClient5);
          assertSame(webSocketClient1, webSocketClient2);
          assertSame(webSocketClient1, webSocketClient4);
          assertSame(webSocketClient1, webSocketClient3);
          assertSame(webSocketClient6, webSocketClient1);
          assertSame(webSocketClient6, webSocketClient3);
          assertSame(webSocketClient6, webSocketClient4);
          assertSame(webSocketClient6, webSocketClient2);
          assertSame(webSocketClient6, webSocketClient0);
          assertSame(webSocketClient6, webSocketClient5);
          assertNotNull(webSocketClient6);
          
          ThreadGroup threadGroup1 = (ThreadGroup)mockThread2.getUncaughtExceptionHandler();
          assertFalse(mockThread0.equals((Object)mockThread1));
          assertFalse(mockThread0.equals((Object)mockThread2));
          assertFalse(mockThread1.equals((Object)mockThread2));
          assertFalse(mockThread1.equals((Object)mockThread0));
          assertFalse(mockThread2.equals((Object)mockThread1));
          assertFalse(mockThread2.equals((Object)mockThread0));
          assertFalse(threadGroup1.equals((Object)threadGroup0));
          assertFalse(mockThread0.isInterrupted());
          assertFalse(mockThread0.isDaemon());
          assertEquals(0, mockThread0.countStackFrames());
          assertEquals(0, mockThread1.countStackFrames());
          assertFalse(mockThread1.isInterrupted());
          assertFalse(mockThread1.isDaemon());
          assertFalse(mockThread2.isDaemon());
          assertFalse(mockThread2.isInterrupted());
          assertEquals(0, mockThread2.countStackFrames());
          assertEquals("Test_Execution_Group", threadGroup1.getName());
          assertNotSame(mockThread0, mockThread1);
          assertNotSame(mockThread0, mockThread2);
          assertNotSame(mockThread1, mockThread2);
          assertNotSame(mockThread1, mockThread0);
          assertNotSame(mockThread2, mockThread1);
          assertNotSame(mockThread2, mockThread0);
          assertNotNull(threadGroup1);
          
          WebSocketClient webSocketClient7 = (WebSocketClient)webSocketClient2.uncaughtExceptionHandler(threadGroup1);
          assertFalse(mockThread0.equals((Object)mockThread1));
          assertFalse(mockThread0.equals((Object)mockThread2));
          assertFalse(mockThread1.equals((Object)mockThread2));
          assertFalse(mockThread1.equals((Object)mockThread0));
          assertFalse(mockThread2.equals((Object)mockThread1));
          assertFalse(mockThread2.equals((Object)mockThread0));
          assertFalse(threadGroup1.equals((Object)threadGroup0));
          assertNull(uRI0.getRawQuery());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertTrue(uRI0.isAbsolute());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertFalse(uRI0.isOpaque());
          assertEquals("file", uRI0.getScheme());
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawUserInfo());
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertFalse(mockThread0.isInterrupted());
          assertFalse(mockThread0.isDaemon());
          assertEquals(0, mockThread0.countStackFrames());
          assertEquals(0, mockThread1.countStackFrames());
          assertFalse(mockThread1.isInterrupted());
          assertFalse(mockThread1.isDaemon());
          assertFalse(mockThread2.isDaemon());
          assertFalse(mockThread2.isInterrupted());
          assertEquals(0, mockThread2.countStackFrames());
          assertEquals("Test_Execution_Group", threadGroup1.getName());
          assertSame(stubConnection0, stubConnection1);
          assertSame(webSocketClient0, webSocketClient7);
          assertSame(webSocketClient0, webSocketClient4);
          assertSame(webSocketClient0, webSocketClient2);
          assertSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient0, webSocketClient3);
          assertSame(webSocketClient0, webSocketClient6);
          assertSame(webSocketClient0, webSocketClient5);
          assertNotSame(mockThread0, mockThread1);
          assertNotSame(mockThread0, mockThread2);
          assertNotSame(mockThread1, mockThread2);
          assertNotSame(mockThread1, mockThread0);
          assertSame(webSocketClient1, webSocketClient6);
          assertSame(webSocketClient1, webSocketClient0);
          assertSame(webSocketClient1, webSocketClient7);
          assertSame(webSocketClient1, webSocketClient5);
          assertSame(webSocketClient1, webSocketClient2);
          assertSame(webSocketClient1, webSocketClient4);
          assertSame(webSocketClient1, webSocketClient3);
          assertNotSame(mockThread2, mockThread1);
          assertNotSame(mockThread2, mockThread0);
          assertSame(webSocketClient2, webSocketClient5);
          assertSame(webSocketClient2, webSocketClient0);
          assertSame(webSocketClient2, webSocketClient7);
          assertSame(webSocketClient2, webSocketClient6);
          assertSame(webSocketClient2, webSocketClient4);
          assertSame(webSocketClient2, webSocketClient3);
          assertSame(webSocketClient2, webSocketClient1);
          assertSame(webSocketClient7, webSocketClient0);
          assertSame(webSocketClient7, webSocketClient5);
          assertSame(webSocketClient7, webSocketClient3);
          assertSame(webSocketClient7, webSocketClient6);
          assertSame(webSocketClient7, webSocketClient4);
          assertSame(webSocketClient7, webSocketClient2);
          assertSame(webSocketClient7, webSocketClient1);
          assertNotNull(webSocketClient7);
          
          WebSocketClient webSocketClient8 = (WebSocketClient)webSocketClient0.connectionExceptionHandler(threadGroup1);
          assertFalse(mockThread0.equals((Object)mockThread1));
          assertFalse(mockThread0.equals((Object)mockThread2));
          assertFalse(mockThread1.equals((Object)mockThread2));
          assertFalse(mockThread1.equals((Object)mockThread0));
          assertFalse(mockThread2.equals((Object)mockThread1));
          assertFalse(mockThread2.equals((Object)mockThread0));
          assertFalse(threadGroup1.equals((Object)threadGroup0));
          assertNull(uRI0.getRawQuery());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertTrue(uRI0.isAbsolute());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertFalse(uRI0.isOpaque());
          assertEquals("file", uRI0.getScheme());
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawUserInfo());
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertFalse(mockThread0.isInterrupted());
          assertFalse(mockThread0.isDaemon());
          assertEquals(0, mockThread0.countStackFrames());
          assertEquals(0, mockThread1.countStackFrames());
          assertFalse(mockThread1.isInterrupted());
          assertFalse(mockThread1.isDaemon());
          assertFalse(mockThread2.isDaemon());
          assertFalse(mockThread2.isInterrupted());
          assertEquals(0, mockThread2.countStackFrames());
          assertEquals("Test_Execution_Group", threadGroup1.getName());
          assertSame(stubConnection0, stubConnection1);
          assertSame(webSocketClient0, webSocketClient7);
          assertSame(webSocketClient0, webSocketClient8);
          assertSame(webSocketClient0, webSocketClient4);
          assertSame(webSocketClient0, webSocketClient2);
          assertSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient0, webSocketClient3);
          assertSame(webSocketClient0, webSocketClient6);
          assertSame(webSocketClient0, webSocketClient5);
          assertNotSame(mockThread0, mockThread1);
          assertNotSame(mockThread0, mockThread2);
          assertNotSame(mockThread1, mockThread2);
          assertNotSame(mockThread1, mockThread0);
          assertNotSame(mockThread2, mockThread1);
          assertNotSame(mockThread2, mockThread0);
          assertSame(webSocketClient8, webSocketClient3);
          assertSame(webSocketClient8, webSocketClient4);
          assertSame(webSocketClient8, webSocketClient2);
          assertSame(webSocketClient8, webSocketClient0);
          assertSame(webSocketClient8, webSocketClient1);
          assertSame(webSocketClient8, webSocketClient5);
          assertSame(webSocketClient8, webSocketClient6);
          assertSame(webSocketClient8, webSocketClient7);
          assertNotNull(webSocketClient8);
          
          // Undeclared exception!
          try { 
            webSocketClient0.close();
            fail("Expecting exception: StackOverflowError");
          
          } catch(StackOverflowError e) {
             //
             // no message in exception (getMessage() returned null)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      URI uRI0 = MockURI.URI((String) null, (String) null, (String) null, "Y^{", "L\"a5IW");
      assertEquals("L%22a5IW", uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertEquals("?Y%5E%7B#L%22a5IW", uRI0.toString());
      assertNull(uRI0.getScheme());
      assertEquals("Y%5E%7B", uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNotNull(uRI0);
      
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, (WebSocketHandler) null);
      assertEquals("L%22a5IW", uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertEquals("?Y%5E%7B#L%22a5IW", uRI0.toString());
      assertNull(uRI0.getScheme());
      assertEquals("Y%5E%7B", uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNotNull(webSocketClient0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)73;
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient0.new HandshakeChannelHandler(byteArray0);
      assertEquals("L%22a5IW", uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertEquals("?Y%5E%7B#L%22a5IW", uRI0.toString());
      assertNull(uRI0.getScheme());
      assertEquals("Y%5E%7B", uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-34), (byte) (-83), (byte) (-58), (byte) (-70), (byte)37, (byte)73}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(webSocketClient_HandshakeChannelHandler0);
      
      WebSocket webSocket0 = webSocketClient0.connectionExceptionHandler((Thread.UncaughtExceptionHandler) null);
      assertEquals("L%22a5IW", uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertEquals("?Y%5E%7B#L%22a5IW", uRI0.toString());
      assertNull(uRI0.getScheme());
      assertEquals("Y%5E%7B", uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertSame(webSocketClient0, webSocket0);
      assertSame(webSocket0, webSocketClient0);
      assertNotNull(webSocket0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn((Channel) null).when(channelHandlerContext0).getChannel();
      SimpleChannelHandler simpleChannelHandler0 = new SimpleChannelHandler();
      assertNotNull(simpleChannelHandler0);
      
      SimpleChannelUpstreamHandler simpleChannelUpstreamHandler0 = new SimpleChannelUpstreamHandler();
      assertNotNull(simpleChannelUpstreamHandler0);
      
      // Undeclared exception!
      try { 
        webSocketClient_HandshakeChannelHandler0.adjustPipelineToWebSocket(channelHandlerContext0, (MessageEvent) null, simpleChannelHandler0, simpleChannelUpstreamHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.webbitserver.netty.WebSocketClient$HandshakeChannelHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      URI uRI0 = MockURI.URI((String) null, (String) null, "Sec-WebSocket-Key", 1259, (String) null, ";fbd\"QoLJh|r.", (String) null);
      assertEquals("//Sec-WebSocket-Key:1259?;fbd%22QoLJh%7Cr.", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertEquals("Sec-WebSocket-Key", uRI0.getHost());
      assertEquals(";fbd%22QoLJh%7Cr.", uRI0.getRawQuery());
      assertEquals(1259, uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isAbsolute());
      assertEquals("Sec-WebSocket-Key:1259", uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertNotNull(uRI0);
      
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
      assertEquals("//Sec-WebSocket-Key:1259?;fbd%22QoLJh%7Cr.", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertEquals("Sec-WebSocket-Key", uRI0.getHost());
      assertEquals(";fbd%22QoLJh%7Cr.", uRI0.getRawQuery());
      assertEquals(1259, uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isAbsolute());
      assertEquals("Sec-WebSocket-Key:1259", uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertNotNull(webSocketClient0);
      
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, 0L);
      assertEquals("//Sec-WebSocket-Key:1259?;fbd%22QoLJh%7Cr.", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertEquals("Sec-WebSocket-Key", uRI0.getHost());
      assertEquals(";fbd%22QoLJh%7Cr.", uRI0.getRawQuery());
      assertEquals(1259, uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isAbsolute());
      assertEquals("Sec-WebSocket-Key:1259", uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertNotNull(reconnectingWebSocketHandler0);
      
      StubConnection stubConnection0 = new StubConnection();
      assertNull(stubConnection0.version());
      assertFalse(stubConnection0.closed());
      assertNotNull(stubConnection0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)27;
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertNotNull(uRI0);
      
      StubConnection stubConnection0 = new StubConnection();
      assertFalse(stubConnection0.closed());
      assertNull(stubConnection0.version());
      assertNotNull(stubConnection0);
      
      StubConnection stubConnection1 = stubConnection0.close();
      assertTrue(stubConnection0.closed());
      assertNull(stubConnection0.version());
      assertTrue(stubConnection1.closed());
      assertNull(stubConnection1.version());
      assertSame(stubConnection0, stubConnection1);
      assertSame(stubConnection1, stubConnection0);
      assertNotNull(stubConnection1);
      
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, (WebSocketHandler) null, stubConnection1);
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertTrue(stubConnection0.closed());
      assertNull(stubConnection0.version());
      assertTrue(stubConnection1.closed());
      assertNull(stubConnection1.version());
      assertNotNull(webSocketClient0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte) (-120);
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient0.new HandshakeChannelHandler(byteArray0);
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertTrue(stubConnection0.closed());
      assertNull(stubConnection0.version());
      assertTrue(stubConnection1.closed());
      assertNull(stubConnection1.version());
      assertArrayEquals(new byte[] {(byte)41, (byte)36, (byte) (-27), (byte) (-51), (byte) (-6), (byte) (-8), (byte) (-120)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(webSocketClient_HandshakeChannelHandler0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      try { 
        webSocketClient_HandshakeChannelHandler0.exceptionCaught(channelHandlerContext0, (ExceptionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.webbitserver.netty.WebSocketClient$HandshakeChannelHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "*7";
          URI uRI0 = MockURI.URI("*7");
          assertNull(uRI0.getHost());
          assertFalse(uRI0.isAbsolute());
          assertNull(uRI0.getRawQuery());
          assertEquals("*7", uRI0.getRawPath());
          assertNull(uRI0.getRawUserInfo());
          assertNull(uRI0.getScheme());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertEquals("*7", uRI0.toString());
          assertEquals((-1), uRI0.getPort());
          assertFalse(uRI0.isOpaque());
          assertNotNull(uRI0);
          
          WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
          StubConnection stubConnection0 = new StubConnection();
          assertFalse(stubConnection0.closed());
          assertNull(stubConnection0.version());
          assertNotNull(stubConnection0);
          
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0, stubConnection0);
          assertNull(uRI0.getHost());
          assertFalse(uRI0.isAbsolute());
          assertNull(uRI0.getRawQuery());
          assertEquals("*7", uRI0.getRawPath());
          assertNull(uRI0.getRawUserInfo());
          assertNull(uRI0.getScheme());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertEquals("*7", uRI0.toString());
          assertEquals((-1), uRI0.getPort());
          assertFalse(uRI0.isOpaque());
          assertFalse(stubConnection0.closed());
          assertNull(stubConnection0.version());
          assertNotNull(webSocketClient0);
          
          ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, 0L);
          assertNull(uRI0.getHost());
          assertFalse(uRI0.isAbsolute());
          assertNull(uRI0.getRawQuery());
          assertEquals("*7", uRI0.getRawPath());
          assertNull(uRI0.getRawUserInfo());
          assertNull(uRI0.getScheme());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertEquals("*7", uRI0.toString());
          assertEquals((-1), uRI0.getPort());
          assertFalse(uRI0.isOpaque());
          assertFalse(stubConnection0.closed());
          assertNull(stubConnection0.version());
          assertNotNull(reconnectingWebSocketHandler0);
          
          WebSocketClient webSocketClient1 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0);
          assertFalse(webSocketClient1.equals((Object)webSocketClient0));
          assertNull(uRI0.getHost());
          assertFalse(uRI0.isAbsolute());
          assertNull(uRI0.getRawQuery());
          assertEquals("*7", uRI0.getRawPath());
          assertNull(uRI0.getRawUserInfo());
          assertNull(uRI0.getScheme());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertEquals("*7", uRI0.toString());
          assertEquals((-1), uRI0.getPort());
          assertFalse(uRI0.isOpaque());
          assertFalse(stubConnection0.closed());
          assertNull(stubConnection0.version());
          assertNotNull(webSocketClient1);
          
          byte[] byteArray0 = new byte[6];
          byteArray0[0] = (byte)0;
          byteArray0[1] = (byte)0;
          ThreadGroup threadGroup0 = (ThreadGroup)MockThread.getDefaultUncaughtExceptionHandler();
          assertEquals("Test_Execution_Group", threadGroup0.getName());
          assertNotNull(threadGroup0);
          
          WebSocketClient webSocketClient2 = (WebSocketClient)webSocketClient1.connectionExceptionHandler(threadGroup0);
          assertFalse(webSocketClient0.equals((Object)webSocketClient1));
          assertFalse(webSocketClient1.equals((Object)webSocketClient0));
          assertFalse(webSocketClient2.equals((Object)webSocketClient0));
          assertNull(uRI0.getHost());
          assertFalse(uRI0.isAbsolute());
          assertNull(uRI0.getRawQuery());
          assertEquals("*7", uRI0.getRawPath());
          assertNull(uRI0.getRawUserInfo());
          assertNull(uRI0.getScheme());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertEquals("*7", uRI0.toString());
          assertEquals((-1), uRI0.getPort());
          assertFalse(uRI0.isOpaque());
          assertFalse(stubConnection0.closed());
          assertNull(stubConnection0.version());
          assertEquals("Test_Execution_Group", threadGroup0.getName());
          assertNotSame(webSocketClient0, webSocketClient2);
          assertNotSame(webSocketClient0, webSocketClient1);
          assertNotSame(webSocketClient1, webSocketClient0);
          assertSame(webSocketClient1, webSocketClient2);
          assertSame(webSocketClient2, webSocketClient1);
          assertNotSame(webSocketClient2, webSocketClient0);
          assertNotNull(webSocketClient2);
          
          byteArray0[2] = (byte)0;
          reconnectingWebSocketHandler0.onClose(stubConnection0);
          assertFalse(webSocketClient0.equals((Object)webSocketClient2));
          assertFalse(webSocketClient0.equals((Object)webSocketClient1));
          assertNull(uRI0.getHost());
          assertFalse(uRI0.isAbsolute());
          assertNull(uRI0.getRawQuery());
          assertEquals("*7", uRI0.getRawPath());
          assertNull(uRI0.getRawUserInfo());
          assertNull(uRI0.getScheme());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertEquals("*7", uRI0.toString());
          assertEquals((-1), uRI0.getPort());
          assertFalse(uRI0.isOpaque());
          assertFalse(stubConnection0.closed());
          assertNull(stubConnection0.version());
          assertNotSame(webSocketClient0, webSocketClient2);
          assertNotSame(webSocketClient0, webSocketClient1);
          
          byteArray0[3] = (byte)0;
          byteArray0[4] = (byte)0;
          WebSocketClient webSocketClient3 = (WebSocketClient)webSocketClient1.connectionExceptionHandler(threadGroup0);
          assertFalse(webSocketClient3.equals((Object)webSocketClient0));
          assertFalse(webSocketClient0.equals((Object)webSocketClient2));
          assertFalse(webSocketClient0.equals((Object)webSocketClient1));
          assertFalse(webSocketClient1.equals((Object)webSocketClient0));
          assertNull(uRI0.getHost());
          assertFalse(uRI0.isAbsolute());
          assertNull(uRI0.getRawQuery());
          assertEquals("*7", uRI0.getRawPath());
          assertNull(uRI0.getRawUserInfo());
          assertNull(uRI0.getScheme());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertEquals("*7", uRI0.toString());
          assertEquals((-1), uRI0.getPort());
          assertFalse(uRI0.isOpaque());
          assertFalse(stubConnection0.closed());
          assertNull(stubConnection0.version());
          assertEquals("Test_Execution_Group", threadGroup0.getName());
          assertSame(webSocketClient3, webSocketClient1);
          assertNotSame(webSocketClient3, webSocketClient0);
          assertSame(webSocketClient3, webSocketClient2);
          assertNotSame(webSocketClient0, webSocketClient2);
          assertNotSame(webSocketClient0, webSocketClient3);
          assertNotSame(webSocketClient0, webSocketClient1);
          assertNotSame(webSocketClient1, webSocketClient0);
          assertSame(webSocketClient1, webSocketClient3);
          assertSame(webSocketClient1, webSocketClient2);
          assertNotNull(webSocketClient3);
          
          byteArray0[5] = (byte) (-52);
          WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient1.new HandshakeChannelHandler(byteArray0);
          assertFalse(webSocketClient0.equals((Object)webSocketClient2));
          assertFalse(webSocketClient0.equals((Object)webSocketClient3));
          assertFalse(webSocketClient0.equals((Object)webSocketClient1));
          assertFalse(webSocketClient1.equals((Object)webSocketClient0));
          assertNull(uRI0.getHost());
          assertFalse(uRI0.isAbsolute());
          assertNull(uRI0.getRawQuery());
          assertEquals("*7", uRI0.getRawPath());
          assertNull(uRI0.getRawUserInfo());
          assertNull(uRI0.getScheme());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertEquals("*7", uRI0.toString());
          assertEquals((-1), uRI0.getPort());
          assertFalse(uRI0.isOpaque());
          assertFalse(stubConnection0.closed());
          assertNull(stubConnection0.version());
          assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-52)}, byteArray0);
          assertEquals(6, byteArray0.length);
          assertNotNull(webSocketClient_HandshakeChannelHandler0);
          
          WebSocketClient webSocketClient4 = webSocketClient0.reconnectEvery((byte) (-52));
          assertFalse(webSocketClient4.equals((Object)webSocketClient3));
          assertFalse(webSocketClient4.equals((Object)webSocketClient2));
          assertFalse(webSocketClient4.equals((Object)webSocketClient1));
          assertFalse(webSocketClient0.equals((Object)webSocketClient2));
          assertFalse(webSocketClient0.equals((Object)webSocketClient3));
          assertFalse(webSocketClient0.equals((Object)webSocketClient1));
          assertNull(uRI0.getHost());
          assertFalse(uRI0.isAbsolute());
          assertNull(uRI0.getRawQuery());
          assertEquals("*7", uRI0.getRawPath());
          assertNull(uRI0.getRawUserInfo());
          assertNull(uRI0.getScheme());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertEquals("*7", uRI0.toString());
          assertEquals((-1), uRI0.getPort());
          assertFalse(uRI0.isOpaque());
          assertFalse(stubConnection0.closed());
          assertNull(stubConnection0.version());
          assertNotSame(webSocketClient4, webSocketClient3);
          assertSame(webSocketClient4, webSocketClient0);
          assertNotSame(webSocketClient4, webSocketClient2);
          assertNotSame(webSocketClient4, webSocketClient1);
          assertNotSame(webSocketClient0, webSocketClient2);
          assertNotSame(webSocketClient0, webSocketClient3);
          assertSame(webSocketClient0, webSocketClient4);
          assertNotSame(webSocketClient0, webSocketClient1);
          assertNotNull(webSocketClient4);
          
          WebSocketClient webSocketClient5 = webSocketClient4.start();
          assertFalse(webSocketClient4.equals((Object)webSocketClient3));
          assertFalse(webSocketClient4.equals((Object)webSocketClient2));
          assertFalse(webSocketClient4.equals((Object)webSocketClient1));
          assertFalse(webSocketClient5.equals((Object)webSocketClient2));
          assertFalse(webSocketClient5.equals((Object)webSocketClient3));
          assertFalse(webSocketClient5.equals((Object)webSocketClient1));
          assertFalse(webSocketClient0.equals((Object)webSocketClient2));
          assertFalse(webSocketClient0.equals((Object)webSocketClient3));
          assertFalse(webSocketClient0.equals((Object)webSocketClient1));
          assertNull(uRI0.getHost());
          assertFalse(uRI0.isAbsolute());
          assertNull(uRI0.getRawQuery());
          assertEquals("*7", uRI0.getRawPath());
          assertNull(uRI0.getRawUserInfo());
          assertNull(uRI0.getScheme());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertEquals("*7", uRI0.toString());
          assertEquals((-1), uRI0.getPort());
          assertFalse(uRI0.isOpaque());
          assertFalse(stubConnection0.closed());
          assertNull(stubConnection0.version());
          assertNotSame(webSocketClient4, webSocketClient3);
          assertSame(webSocketClient4, webSocketClient5);
          assertSame(webSocketClient4, webSocketClient0);
          assertNotSame(webSocketClient4, webSocketClient2);
          assertNotSame(webSocketClient4, webSocketClient1);
          assertNotSame(webSocketClient5, webSocketClient2);
          assertSame(webSocketClient5, webSocketClient0);
          assertNotSame(webSocketClient5, webSocketClient3);
          assertSame(webSocketClient5, webSocketClient4);
          assertNotSame(webSocketClient5, webSocketClient1);
          assertNotSame(webSocketClient0, webSocketClient2);
          assertNotSame(webSocketClient0, webSocketClient3);
          assertSame(webSocketClient0, webSocketClient4);
          assertNotSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient0, webSocketClient5);
          assertNotNull(webSocketClient5);
          
          WebSocketClient webSocketClient6 = (WebSocketClient)webSocketClient5.uncaughtExceptionHandler(threadGroup0);
          assertFalse(webSocketClient4.equals((Object)webSocketClient3));
          assertFalse(webSocketClient4.equals((Object)webSocketClient2));
          assertFalse(webSocketClient4.equals((Object)webSocketClient1));
          assertFalse(webSocketClient5.equals((Object)webSocketClient2));
          assertFalse(webSocketClient5.equals((Object)webSocketClient3));
          assertFalse(webSocketClient5.equals((Object)webSocketClient1));
          assertFalse(webSocketClient0.equals((Object)webSocketClient2));
          assertFalse(webSocketClient0.equals((Object)webSocketClient3));
          assertFalse(webSocketClient0.equals((Object)webSocketClient1));
          assertFalse(webSocketClient6.equals((Object)webSocketClient1));
          assertFalse(webSocketClient6.equals((Object)webSocketClient3));
          assertFalse(webSocketClient6.equals((Object)webSocketClient2));
          assertNull(uRI0.getHost());
          assertFalse(uRI0.isAbsolute());
          assertNull(uRI0.getRawQuery());
          assertEquals("*7", uRI0.getRawPath());
          assertNull(uRI0.getRawUserInfo());
          assertNull(uRI0.getScheme());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertEquals("*7", uRI0.toString());
          assertEquals((-1), uRI0.getPort());
          assertFalse(uRI0.isOpaque());
          assertFalse(stubConnection0.closed());
          assertNull(stubConnection0.version());
          assertEquals("Test_Execution_Group", threadGroup0.getName());
          assertNotSame(webSocketClient4, webSocketClient3);
          assertSame(webSocketClient4, webSocketClient6);
          assertSame(webSocketClient4, webSocketClient5);
          assertSame(webSocketClient4, webSocketClient0);
          assertNotSame(webSocketClient4, webSocketClient2);
          assertNotSame(webSocketClient4, webSocketClient1);
          assertNotSame(webSocketClient5, webSocketClient2);
          assertSame(webSocketClient5, webSocketClient0);
          assertSame(webSocketClient5, webSocketClient6);
          assertNotSame(webSocketClient5, webSocketClient3);
          assertSame(webSocketClient5, webSocketClient4);
          assertNotSame(webSocketClient5, webSocketClient1);
          assertNotSame(webSocketClient0, webSocketClient2);
          assertSame(webSocketClient0, webSocketClient6);
          assertNotSame(webSocketClient0, webSocketClient3);
          assertSame(webSocketClient0, webSocketClient4);
          assertNotSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient0, webSocketClient5);
          assertSame(webSocketClient6, webSocketClient4);
          assertNotSame(webSocketClient6, webSocketClient1);
          assertNotSame(webSocketClient6, webSocketClient3);
          assertSame(webSocketClient6, webSocketClient5);
          assertSame(webSocketClient6, webSocketClient0);
          assertNotSame(webSocketClient6, webSocketClient2);
          assertNotNull(webSocketClient6);
          
          // Undeclared exception!
          try { 
            webSocketClient5.start();
            fail("Expecting exception: StackOverflowError");
          
          } catch(StackOverflowError e) {
             //
             // no message in exception (getMessage() returned null)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          URI uRI0 = MockURI.aFTPURI;
          assertEquals("ftp://foo.bar", uRI0.toString());
          assertEquals("", uRI0.getRawPath());
          assertEquals("foo.bar", uRI0.getRawAuthority());
          assertFalse(uRI0.isOpaque());
          assertTrue(uRI0.isAbsolute());
          assertEquals("ftp", uRI0.getScheme());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getRawQuery());
          assertNull(uRI0.getRawUserInfo());
          assertNull(uRI0.getRawFragment());
          assertEquals("foo.bar", uRI0.getHost());
          assertNotNull(uRI0);
          
          ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
          assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
          
          ThreadGroup threadGroup0 = (ThreadGroup)MockThread.getDefaultUncaughtExceptionHandler();
          assertEquals("Test_Execution_Group", threadGroup0.getName());
          assertNotNull(threadGroup0);
          
          ForkJoinPool forkJoinPool0 = new ForkJoinPool(74, forkJoinPool_ForkJoinWorkerThreadFactory0, threadGroup0, true);
          assertEquals("Test_Execution_Group", threadGroup0.getName());
          assertNotNull(forkJoinPool0);
          
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, (WebSocketHandler) null, forkJoinPool0);
          assertEquals("ftp://foo.bar", uRI0.toString());
          assertEquals("", uRI0.getRawPath());
          assertEquals("foo.bar", uRI0.getRawAuthority());
          assertFalse(uRI0.isOpaque());
          assertTrue(uRI0.isAbsolute());
          assertEquals("ftp", uRI0.getScheme());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getRawQuery());
          assertNull(uRI0.getRawUserInfo());
          assertNull(uRI0.getRawFragment());
          assertEquals("foo.bar", uRI0.getHost());
          assertEquals("Test_Execution_Group", threadGroup0.getName());
          assertNotNull(webSocketClient0);
          
          WebSocketClient webSocketClient1 = webSocketClient0.setupSsl((InputStream) null, "wss");
          assertEquals("ftp://foo.bar", uRI0.toString());
          assertEquals("", uRI0.getRawPath());
          assertEquals("foo.bar", uRI0.getRawAuthority());
          assertFalse(uRI0.isOpaque());
          assertTrue(uRI0.isAbsolute());
          assertEquals("ftp", uRI0.getScheme());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getRawQuery());
          assertNull(uRI0.getRawUserInfo());
          assertNull(uRI0.getRawFragment());
          assertEquals("foo.bar", uRI0.getHost());
          assertEquals("Test_Execution_Group", threadGroup0.getName());
          assertSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient1, webSocketClient0);
          assertNotNull(webSocketClient1);
          
          WebSocketClient webSocketClient2 = webSocketClient1.start();
          assertEquals("ftp://foo.bar", uRI0.toString());
          assertEquals("", uRI0.getRawPath());
          assertEquals("foo.bar", uRI0.getRawAuthority());
          assertFalse(uRI0.isOpaque());
          assertTrue(uRI0.isAbsolute());
          assertEquals("ftp", uRI0.getScheme());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getRawQuery());
          assertNull(uRI0.getRawUserInfo());
          assertNull(uRI0.getRawFragment());
          assertEquals("foo.bar", uRI0.getHost());
          assertEquals("Test_Execution_Group", threadGroup0.getName());
          assertSame(webSocketClient0, webSocketClient2);
          assertSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient1, webSocketClient0);
          assertSame(webSocketClient1, webSocketClient2);
          assertSame(webSocketClient2, webSocketClient1);
          assertSame(webSocketClient2, webSocketClient0);
          assertNotNull(webSocketClient2);
          
          byte[] byteArray0 = new byte[9];
          byteArray0[0] = (byte)8;
          byteArray0[1] = (byte) (-20);
          byteArray0[2] = (byte)96;
          byteArray0[3] = (byte)55;
          byteArray0[4] = (byte) (-71);
          byteArray0[5] = (byte)5;
          byteArray0[6] = (byte)7;
          byteArray0[7] = (byte) (-113);
          byteArray0[8] = (byte) (-20);
          WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient2.new HandshakeChannelHandler(byteArray0);
          assertEquals("ftp://foo.bar", uRI0.toString());
          assertEquals("", uRI0.getRawPath());
          assertEquals("foo.bar", uRI0.getRawAuthority());
          assertFalse(uRI0.isOpaque());
          assertTrue(uRI0.isAbsolute());
          assertEquals("ftp", uRI0.getScheme());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getRawQuery());
          assertNull(uRI0.getRawUserInfo());
          assertNull(uRI0.getRawFragment());
          assertEquals("foo.bar", uRI0.getHost());
          assertEquals("Test_Execution_Group", threadGroup0.getName());
          assertArrayEquals(new byte[] {(byte)8, (byte) (-20), (byte)96, (byte)55, (byte) (-71), (byte)5, (byte)7, (byte) (-113), (byte) (-20)}, byteArray0);
          assertEquals(9, byteArray0.length);
          assertNotNull(webSocketClient_HandshakeChannelHandler0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          URI uRI0 = MockURI.URI("*7");
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawQuery());
          assertFalse(uRI0.isAbsolute());
          assertFalse(uRI0.isOpaque());
          assertEquals((-1), uRI0.getPort());
          assertEquals("*7", uRI0.toString());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("*7", uRI0.getRawPath());
          assertNull(uRI0.getScheme());
          assertNotNull(uRI0);
          
          WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
          StubConnection stubConnection0 = new StubConnection();
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertNotNull(stubConnection0);
          
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0, stubConnection0);
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawQuery());
          assertFalse(uRI0.isAbsolute());
          assertFalse(uRI0.isOpaque());
          assertEquals((-1), uRI0.getPort());
          assertEquals("*7", uRI0.toString());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("*7", uRI0.getRawPath());
          assertNull(uRI0.getScheme());
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertNotNull(webSocketClient0);
          
          ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, 0L);
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawQuery());
          assertFalse(uRI0.isAbsolute());
          assertFalse(uRI0.isOpaque());
          assertEquals((-1), uRI0.getPort());
          assertEquals("*7", uRI0.toString());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("*7", uRI0.getRawPath());
          assertNull(uRI0.getScheme());
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertNotNull(reconnectingWebSocketHandler0);
          
          WebSocketClient webSocketClient1 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0);
          assertFalse(webSocketClient1.equals((Object)webSocketClient0));
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawQuery());
          assertFalse(uRI0.isAbsolute());
          assertFalse(uRI0.isOpaque());
          assertEquals((-1), uRI0.getPort());
          assertEquals("*7", uRI0.toString());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("*7", uRI0.getRawPath());
          assertNull(uRI0.getScheme());
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertNotNull(webSocketClient1);
          
          byte[] byteArray0 = new byte[6];
          byteArray0[0] = (byte)0;
          byteArray0[1] = (byte)0;
          ThreadGroup threadGroup0 = (ThreadGroup)MockThread.getDefaultUncaughtExceptionHandler();
          assertEquals("Test_Execution_Group", threadGroup0.getName());
          assertNotNull(threadGroup0);
          
          WebSocketClient webSocketClient2 = (WebSocketClient)webSocketClient1.connectionExceptionHandler(threadGroup0);
          assertFalse(webSocketClient0.equals((Object)webSocketClient1));
          assertFalse(webSocketClient1.equals((Object)webSocketClient0));
          assertFalse(webSocketClient2.equals((Object)webSocketClient0));
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawQuery());
          assertFalse(uRI0.isAbsolute());
          assertFalse(uRI0.isOpaque());
          assertEquals((-1), uRI0.getPort());
          assertEquals("*7", uRI0.toString());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("*7", uRI0.getRawPath());
          assertNull(uRI0.getScheme());
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertEquals("Test_Execution_Group", threadGroup0.getName());
          assertNotSame(webSocketClient0, webSocketClient1);
          assertNotSame(webSocketClient0, webSocketClient2);
          assertSame(webSocketClient1, webSocketClient2);
          assertNotSame(webSocketClient1, webSocketClient0);
          assertSame(webSocketClient2, webSocketClient1);
          assertNotSame(webSocketClient2, webSocketClient0);
          assertNotNull(webSocketClient2);
          
          byteArray0[2] = (byte)0;
          reconnectingWebSocketHandler0.onClose(stubConnection0);
          assertFalse(webSocketClient0.equals((Object)webSocketClient1));
          assertFalse(webSocketClient0.equals((Object)webSocketClient2));
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawQuery());
          assertFalse(uRI0.isAbsolute());
          assertFalse(uRI0.isOpaque());
          assertEquals((-1), uRI0.getPort());
          assertEquals("*7", uRI0.toString());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("*7", uRI0.getRawPath());
          assertNull(uRI0.getScheme());
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertNotSame(webSocketClient0, webSocketClient1);
          assertNotSame(webSocketClient0, webSocketClient2);
          
          byteArray0[3] = (byte)0;
          byteArray0[4] = (byte)0;
          WebSocketClient webSocketClient3 = (WebSocketClient)webSocketClient1.connectionExceptionHandler(threadGroup0);
          assertFalse(webSocketClient0.equals((Object)webSocketClient1));
          assertFalse(webSocketClient0.equals((Object)webSocketClient2));
          assertFalse(webSocketClient1.equals((Object)webSocketClient0));
          assertFalse(webSocketClient3.equals((Object)webSocketClient0));
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawQuery());
          assertFalse(uRI0.isAbsolute());
          assertFalse(uRI0.isOpaque());
          assertEquals((-1), uRI0.getPort());
          assertEquals("*7", uRI0.toString());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("*7", uRI0.getRawPath());
          assertNull(uRI0.getScheme());
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertEquals("Test_Execution_Group", threadGroup0.getName());
          assertNotSame(webSocketClient0, webSocketClient1);
          assertNotSame(webSocketClient0, webSocketClient2);
          assertNotSame(webSocketClient0, webSocketClient3);
          assertSame(webSocketClient1, webSocketClient2);
          assertSame(webSocketClient1, webSocketClient3);
          assertNotSame(webSocketClient1, webSocketClient0);
          assertSame(webSocketClient3, webSocketClient2);
          assertSame(webSocketClient3, webSocketClient1);
          assertNotSame(webSocketClient3, webSocketClient0);
          assertNotNull(webSocketClient3);
          
          byteArray0[5] = (byte) (-52);
          WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient1.new HandshakeChannelHandler(byteArray0);
          assertFalse(webSocketClient0.equals((Object)webSocketClient1));
          assertFalse(webSocketClient0.equals((Object)webSocketClient2));
          assertFalse(webSocketClient0.equals((Object)webSocketClient3));
          assertFalse(webSocketClient1.equals((Object)webSocketClient0));
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawQuery());
          assertFalse(uRI0.isAbsolute());
          assertFalse(uRI0.isOpaque());
          assertEquals((-1), uRI0.getPort());
          assertEquals("*7", uRI0.toString());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("*7", uRI0.getRawPath());
          assertNull(uRI0.getScheme());
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-52)}, byteArray0);
          assertEquals(6, byteArray0.length);
          assertNotNull(webSocketClient_HandshakeChannelHandler0);
          
          WebSocketClient webSocketClient4 = webSocketClient0.reconnectEvery((byte) (-52));
          assertFalse(webSocketClient4.equals((Object)webSocketClient3));
          assertFalse(webSocketClient4.equals((Object)webSocketClient2));
          assertFalse(webSocketClient4.equals((Object)webSocketClient1));
          assertFalse(webSocketClient0.equals((Object)webSocketClient1));
          assertFalse(webSocketClient0.equals((Object)webSocketClient2));
          assertFalse(webSocketClient0.equals((Object)webSocketClient3));
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawQuery());
          assertFalse(uRI0.isAbsolute());
          assertFalse(uRI0.isOpaque());
          assertEquals((-1), uRI0.getPort());
          assertEquals("*7", uRI0.toString());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("*7", uRI0.getRawPath());
          assertNull(uRI0.getScheme());
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertSame(webSocketClient4, webSocketClient0);
          assertNotSame(webSocketClient4, webSocketClient3);
          assertNotSame(webSocketClient4, webSocketClient2);
          assertNotSame(webSocketClient4, webSocketClient1);
          assertNotSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient0, webSocketClient4);
          assertNotSame(webSocketClient0, webSocketClient2);
          assertNotSame(webSocketClient0, webSocketClient3);
          assertNotNull(webSocketClient4);
          
          WebSocketClient webSocketClient5 = webSocketClient4.reconnectEvery((byte)0);
          assertFalse(webSocketClient4.equals((Object)webSocketClient3));
          assertFalse(webSocketClient4.equals((Object)webSocketClient2));
          assertFalse(webSocketClient4.equals((Object)webSocketClient1));
          assertFalse(webSocketClient5.equals((Object)webSocketClient1));
          assertFalse(webSocketClient5.equals((Object)webSocketClient2));
          assertFalse(webSocketClient5.equals((Object)webSocketClient3));
          assertFalse(webSocketClient0.equals((Object)webSocketClient1));
          assertFalse(webSocketClient0.equals((Object)webSocketClient2));
          assertFalse(webSocketClient0.equals((Object)webSocketClient3));
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawQuery());
          assertFalse(uRI0.isAbsolute());
          assertFalse(uRI0.isOpaque());
          assertEquals((-1), uRI0.getPort());
          assertEquals("*7", uRI0.toString());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("*7", uRI0.getRawPath());
          assertNull(uRI0.getScheme());
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertSame(webSocketClient4, webSocketClient0);
          assertNotSame(webSocketClient4, webSocketClient3);
          assertSame(webSocketClient4, webSocketClient5);
          assertNotSame(webSocketClient4, webSocketClient2);
          assertNotSame(webSocketClient4, webSocketClient1);
          assertNotSame(webSocketClient5, webSocketClient1);
          assertNotSame(webSocketClient5, webSocketClient2);
          assertNotSame(webSocketClient5, webSocketClient3);
          assertSame(webSocketClient5, webSocketClient0);
          assertSame(webSocketClient5, webSocketClient4);
          assertSame(webSocketClient0, webSocketClient5);
          assertNotSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient0, webSocketClient4);
          assertNotSame(webSocketClient0, webSocketClient2);
          assertNotSame(webSocketClient0, webSocketClient3);
          assertNotNull(webSocketClient5);
          
          WebSocketClient webSocketClient6 = webSocketClient5.start();
          assertFalse(webSocketClient4.equals((Object)webSocketClient3));
          assertFalse(webSocketClient4.equals((Object)webSocketClient2));
          assertFalse(webSocketClient4.equals((Object)webSocketClient1));
          assertFalse(webSocketClient5.equals((Object)webSocketClient1));
          assertFalse(webSocketClient5.equals((Object)webSocketClient2));
          assertFalse(webSocketClient5.equals((Object)webSocketClient3));
          assertFalse(webSocketClient0.equals((Object)webSocketClient1));
          assertFalse(webSocketClient0.equals((Object)webSocketClient2));
          assertFalse(webSocketClient0.equals((Object)webSocketClient3));
          assertFalse(webSocketClient6.equals((Object)webSocketClient1));
          assertFalse(webSocketClient6.equals((Object)webSocketClient2));
          assertFalse(webSocketClient6.equals((Object)webSocketClient3));
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawQuery());
          assertFalse(uRI0.isAbsolute());
          assertFalse(uRI0.isOpaque());
          assertEquals((-1), uRI0.getPort());
          assertEquals("*7", uRI0.toString());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("*7", uRI0.getRawPath());
          assertNull(uRI0.getScheme());
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertSame(webSocketClient4, webSocketClient0);
          assertNotSame(webSocketClient4, webSocketClient3);
          assertSame(webSocketClient4, webSocketClient6);
          assertSame(webSocketClient4, webSocketClient5);
          assertNotSame(webSocketClient4, webSocketClient2);
          assertNotSame(webSocketClient4, webSocketClient1);
          assertNotSame(webSocketClient5, webSocketClient1);
          assertNotSame(webSocketClient5, webSocketClient2);
          assertNotSame(webSocketClient5, webSocketClient3);
          assertSame(webSocketClient5, webSocketClient6);
          assertSame(webSocketClient5, webSocketClient0);
          assertSame(webSocketClient5, webSocketClient4);
          assertSame(webSocketClient0, webSocketClient6);
          assertSame(webSocketClient0, webSocketClient5);
          assertNotSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient0, webSocketClient4);
          assertNotSame(webSocketClient0, webSocketClient2);
          assertNotSame(webSocketClient0, webSocketClient3);
          assertNotSame(webSocketClient6, webSocketClient1);
          assertSame(webSocketClient6, webSocketClient4);
          assertSame(webSocketClient6, webSocketClient0);
          assertNotSame(webSocketClient6, webSocketClient2);
          assertNotSame(webSocketClient6, webSocketClient3);
          assertSame(webSocketClient6, webSocketClient5);
          assertNotNull(webSocketClient6);
          
          WebSocketClient webSocketClient7 = webSocketClient4.reconnectEvery((-1L));
          assertFalse(webSocketClient4.equals((Object)webSocketClient3));
          assertFalse(webSocketClient4.equals((Object)webSocketClient2));
          assertFalse(webSocketClient4.equals((Object)webSocketClient1));
          assertFalse(webSocketClient0.equals((Object)webSocketClient1));
          assertFalse(webSocketClient0.equals((Object)webSocketClient2));
          assertFalse(webSocketClient0.equals((Object)webSocketClient3));
          assertFalse(webSocketClient7.equals((Object)webSocketClient2));
          assertFalse(webSocketClient7.equals((Object)webSocketClient3));
          assertFalse(webSocketClient7.equals((Object)webSocketClient1));
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawQuery());
          assertFalse(uRI0.isAbsolute());
          assertFalse(uRI0.isOpaque());
          assertEquals((-1), uRI0.getPort());
          assertEquals("*7", uRI0.toString());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("*7", uRI0.getRawPath());
          assertNull(uRI0.getScheme());
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertSame(webSocketClient4, webSocketClient0);
          assertNotSame(webSocketClient4, webSocketClient3);
          assertSame(webSocketClient4, webSocketClient6);
          assertSame(webSocketClient4, webSocketClient5);
          assertNotSame(webSocketClient4, webSocketClient2);
          assertSame(webSocketClient4, webSocketClient7);
          assertNotSame(webSocketClient4, webSocketClient1);
          assertSame(webSocketClient0, webSocketClient6);
          assertSame(webSocketClient0, webSocketClient5);
          assertNotSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient0, webSocketClient7);
          assertSame(webSocketClient0, webSocketClient4);
          assertNotSame(webSocketClient0, webSocketClient2);
          assertNotSame(webSocketClient0, webSocketClient3);
          assertNotSame(webSocketClient7, webSocketClient2);
          assertNotSame(webSocketClient7, webSocketClient3);
          assertSame(webSocketClient7, webSocketClient0);
          assertSame(webSocketClient7, webSocketClient6);
          assertSame(webSocketClient7, webSocketClient5);
          assertNotSame(webSocketClient7, webSocketClient1);
          assertSame(webSocketClient7, webSocketClient4);
          assertNotNull(webSocketClient7);
          
          WebSocketClient webSocketClient8 = webSocketClient7.setupSsl((InputStream) null, "*7");
          assertFalse(webSocketClient4.equals((Object)webSocketClient3));
          assertFalse(webSocketClient4.equals((Object)webSocketClient2));
          assertFalse(webSocketClient4.equals((Object)webSocketClient1));
          assertFalse(webSocketClient0.equals((Object)webSocketClient1));
          assertFalse(webSocketClient0.equals((Object)webSocketClient2));
          assertFalse(webSocketClient0.equals((Object)webSocketClient3));
          assertFalse(webSocketClient7.equals((Object)webSocketClient2));
          assertFalse(webSocketClient7.equals((Object)webSocketClient3));
          assertFalse(webSocketClient7.equals((Object)webSocketClient1));
          assertFalse(webSocketClient8.equals((Object)webSocketClient2));
          assertFalse(webSocketClient8.equals((Object)webSocketClient3));
          assertFalse(webSocketClient8.equals((Object)webSocketClient1));
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawQuery());
          assertFalse(uRI0.isAbsolute());
          assertFalse(uRI0.isOpaque());
          assertEquals((-1), uRI0.getPort());
          assertEquals("*7", uRI0.toString());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("*7", uRI0.getRawPath());
          assertNull(uRI0.getScheme());
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertSame(webSocketClient4, webSocketClient0);
          assertNotSame(webSocketClient4, webSocketClient3);
          assertSame(webSocketClient4, webSocketClient6);
          assertSame(webSocketClient4, webSocketClient8);
          assertSame(webSocketClient4, webSocketClient5);
          assertNotSame(webSocketClient4, webSocketClient2);
          assertSame(webSocketClient4, webSocketClient7);
          assertNotSame(webSocketClient4, webSocketClient1);
          assertSame(webSocketClient0, webSocketClient6);
          assertSame(webSocketClient0, webSocketClient5);
          assertSame(webSocketClient0, webSocketClient8);
          assertNotSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient0, webSocketClient7);
          assertSame(webSocketClient0, webSocketClient4);
          assertNotSame(webSocketClient0, webSocketClient2);
          assertNotSame(webSocketClient0, webSocketClient3);
          assertNotSame(webSocketClient7, webSocketClient2);
          assertNotSame(webSocketClient7, webSocketClient3);
          assertSame(webSocketClient7, webSocketClient0);
          assertSame(webSocketClient7, webSocketClient6);
          assertSame(webSocketClient7, webSocketClient5);
          assertSame(webSocketClient7, webSocketClient8);
          assertNotSame(webSocketClient7, webSocketClient1);
          assertSame(webSocketClient7, webSocketClient4);
          assertSame(webSocketClient8, webSocketClient4);
          assertNotSame(webSocketClient8, webSocketClient2);
          assertNotSame(webSocketClient8, webSocketClient3);
          assertSame(webSocketClient8, webSocketClient7);
          assertNotSame(webSocketClient8, webSocketClient1);
          assertSame(webSocketClient8, webSocketClient6);
          assertSame(webSocketClient8, webSocketClient5);
          assertSame(webSocketClient8, webSocketClient0);
          assertNotNull(webSocketClient8);
          
          WebSocketClient webSocketClient9 = (WebSocketClient)webSocketClient4.close();
          assertFalse(webSocketClient4.equals((Object)webSocketClient3));
          assertFalse(webSocketClient4.equals((Object)webSocketClient2));
          assertFalse(webSocketClient4.equals((Object)webSocketClient1));
          assertFalse(webSocketClient0.equals((Object)webSocketClient1));
          assertFalse(webSocketClient0.equals((Object)webSocketClient2));
          assertFalse(webSocketClient0.equals((Object)webSocketClient3));
          assertFalse(webSocketClient9.equals((Object)webSocketClient1));
          assertFalse(webSocketClient9.equals((Object)webSocketClient2));
          assertFalse(webSocketClient9.equals((Object)webSocketClient3));
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawQuery());
          assertFalse(uRI0.isAbsolute());
          assertFalse(uRI0.isOpaque());
          assertEquals((-1), uRI0.getPort());
          assertEquals("*7", uRI0.toString());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("*7", uRI0.getRawPath());
          assertNull(uRI0.getScheme());
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertSame(webSocketClient4, webSocketClient9);
          assertSame(webSocketClient4, webSocketClient0);
          assertNotSame(webSocketClient4, webSocketClient3);
          assertSame(webSocketClient4, webSocketClient6);
          assertSame(webSocketClient4, webSocketClient8);
          assertSame(webSocketClient4, webSocketClient5);
          assertNotSame(webSocketClient4, webSocketClient2);
          assertSame(webSocketClient4, webSocketClient7);
          assertNotSame(webSocketClient4, webSocketClient1);
          assertSame(webSocketClient0, webSocketClient6);
          assertSame(webSocketClient0, webSocketClient5);
          assertSame(webSocketClient0, webSocketClient8);
          assertNotSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient0, webSocketClient7);
          assertSame(webSocketClient0, webSocketClient9);
          assertSame(webSocketClient0, webSocketClient4);
          assertNotSame(webSocketClient0, webSocketClient2);
          assertNotSame(webSocketClient0, webSocketClient3);
          assertNotSame(webSocketClient9, webSocketClient1);
          assertNotSame(webSocketClient9, webSocketClient2);
          assertNotSame(webSocketClient9, webSocketClient3);
          assertSame(webSocketClient9, webSocketClient8);
          assertSame(webSocketClient9, webSocketClient0);
          assertSame(webSocketClient9, webSocketClient5);
          assertSame(webSocketClient9, webSocketClient6);
          assertSame(webSocketClient9, webSocketClient4);
          assertSame(webSocketClient9, webSocketClient7);
          assertNotNull(webSocketClient9);
          
          ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
          NettyWebSocketConnection nettyWebSocketConnection0 = new NettyWebSocketConnection(stubConnection0, (NettyHttpRequest) null, (ChannelHandlerContext) null, byteArray0);
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertNull(nettyWebSocketConnection0.version());
          assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-52)}, byteArray0);
          assertEquals(6, byteArray0.length);
          assertNotNull(nettyWebSocketConnection0);
          
          // Undeclared exception!
          try { 
            nettyWebSocketConnection0.getChannel();
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("org.webbitserver.netty.NettyWebSocketConnection", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "";
          URI uRI0 = MockURI.URI("");
          assertNull(uRI0.getRawUserInfo());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getRawFragment());
          assertEquals("", uRI0.toString());
          assertNull(uRI0.getScheme());
          assertEquals("", uRI0.getRawPath());
          assertNull(uRI0.getRawQuery());
          assertNull(uRI0.getHost());
          assertFalse(uRI0.isAbsolute());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getRawAuthority());
          assertNotNull(uRI0);
          
          WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
          assertNull(uRI0.getRawUserInfo());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getRawFragment());
          assertEquals("", uRI0.toString());
          assertNull(uRI0.getScheme());
          assertEquals("", uRI0.getRawPath());
          assertNull(uRI0.getRawQuery());
          assertNull(uRI0.getHost());
          assertFalse(uRI0.isAbsolute());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getRawAuthority());
          assertNotNull(webSocketClient0);
          
          ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, 431L);
          assertNull(uRI0.getRawUserInfo());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getRawFragment());
          assertEquals("", uRI0.toString());
          assertNull(uRI0.getScheme());
          assertEquals("", uRI0.getRawPath());
          assertNull(uRI0.getRawQuery());
          assertNull(uRI0.getHost());
          assertFalse(uRI0.isAbsolute());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getRawAuthority());
          assertNotNull(reconnectingWebSocketHandler0);
          
          WebSocketClient webSocketClient1 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0, (Executor) null);
          assertFalse(webSocketClient1.equals((Object)webSocketClient0));
          assertNull(uRI0.getRawUserInfo());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getRawFragment());
          assertEquals("", uRI0.toString());
          assertNull(uRI0.getScheme());
          assertEquals("", uRI0.getRawPath());
          assertNull(uRI0.getRawQuery());
          assertNull(uRI0.getHost());
          assertFalse(uRI0.isAbsolute());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getRawAuthority());
          assertNotNull(webSocketClient1);
          
          // Undeclared exception!
          try { 
            webSocketClient1.start();
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("org.webbitserver.netty.WebSocketClient", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          URI uRI0 = MockURI.create("state");
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getHost());
          assertFalse(uRI0.isAbsolute());
          assertNull(uRI0.getRawQuery());
          assertEquals("state", uRI0.toString());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("state", uRI0.getRawPath());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getScheme());
          assertNotNull(uRI0);
          
          WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getHost());
          assertFalse(uRI0.isAbsolute());
          assertNull(uRI0.getRawQuery());
          assertEquals("state", uRI0.toString());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("state", uRI0.getRawPath());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getScheme());
          assertNotNull(webSocketClient0);
          
          ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, 4294967295L);
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getHost());
          assertFalse(uRI0.isAbsolute());
          assertNull(uRI0.getRawQuery());
          assertEquals("state", uRI0.toString());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("state", uRI0.getRawPath());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getScheme());
          assertNotNull(reconnectingWebSocketHandler0);
          
          StubConnection stubConnection0 = new StubConnection();
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertNotNull(stubConnection0);
          
          StubConnection stubConnection1 = stubConnection0.close();
          assertTrue(stubConnection0.closed());
          assertNull(stubConnection0.version());
          assertTrue(stubConnection1.closed());
          assertNull(stubConnection1.version());
          assertSame(stubConnection0, stubConnection1);
          assertSame(stubConnection1, stubConnection0);
          assertNotNull(stubConnection1);
          
          WebSocketClient webSocketClient1 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0, stubConnection1);
          assertFalse(webSocketClient1.equals((Object)webSocketClient0));
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getHost());
          assertFalse(uRI0.isAbsolute());
          assertNull(uRI0.getRawQuery());
          assertEquals("state", uRI0.toString());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("state", uRI0.getRawPath());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getScheme());
          assertTrue(stubConnection0.closed());
          assertNull(stubConnection0.version());
          assertTrue(stubConnection1.closed());
          assertNull(stubConnection1.version());
          assertNotNull(webSocketClient1);
          
          WebSocketClient webSocketClient2 = webSocketClient1.start();
          assertFalse(webSocketClient0.equals((Object)webSocketClient1));
          assertFalse(webSocketClient1.equals((Object)webSocketClient0));
          assertFalse(webSocketClient2.equals((Object)webSocketClient0));
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getHost());
          assertFalse(uRI0.isAbsolute());
          assertNull(uRI0.getRawQuery());
          assertEquals("state", uRI0.toString());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("state", uRI0.getRawPath());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getScheme());
          assertTrue(stubConnection0.closed());
          assertNull(stubConnection0.version());
          assertTrue(stubConnection1.closed());
          assertNull(stubConnection1.version());
          assertNotSame(webSocketClient0, webSocketClient1);
          assertNotSame(webSocketClient0, webSocketClient2);
          assertSame(stubConnection0, stubConnection1);
          assertSame(stubConnection1, stubConnection0);
          assertSame(webSocketClient1, webSocketClient2);
          assertNotSame(webSocketClient1, webSocketClient0);
          assertSame(webSocketClient2, webSocketClient1);
          assertNotSame(webSocketClient2, webSocketClient0);
          assertNotNull(webSocketClient2);
          
          WebSocketClient webSocketClient3 = webSocketClient2.reconnectEvery(933L);
          assertFalse(webSocketClient0.equals((Object)webSocketClient1));
          assertFalse(webSocketClient0.equals((Object)webSocketClient2));
          assertFalse(webSocketClient1.equals((Object)webSocketClient0));
          assertFalse(webSocketClient2.equals((Object)webSocketClient0));
          assertFalse(webSocketClient3.equals((Object)webSocketClient0));
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getHost());
          assertFalse(uRI0.isAbsolute());
          assertNull(uRI0.getRawQuery());
          assertEquals("state", uRI0.toString());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("state", uRI0.getRawPath());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getScheme());
          assertTrue(stubConnection0.closed());
          assertNull(stubConnection0.version());
          assertTrue(stubConnection1.closed());
          assertNull(stubConnection1.version());
          assertNotSame(webSocketClient0, webSocketClient3);
          assertNotSame(webSocketClient0, webSocketClient1);
          assertNotSame(webSocketClient0, webSocketClient2);
          assertSame(stubConnection0, stubConnection1);
          assertSame(stubConnection1, stubConnection0);
          assertSame(webSocketClient1, webSocketClient3);
          assertSame(webSocketClient1, webSocketClient2);
          assertNotSame(webSocketClient1, webSocketClient0);
          assertSame(webSocketClient2, webSocketClient3);
          assertSame(webSocketClient2, webSocketClient1);
          assertNotSame(webSocketClient2, webSocketClient0);
          assertSame(webSocketClient3, webSocketClient2);
          assertSame(webSocketClient3, webSocketClient1);
          assertNotSame(webSocketClient3, webSocketClient0);
          assertNotNull(webSocketClient3);
          
          WebSocketClient webSocketClient4 = webSocketClient3.start();
          assertFalse(webSocketClient0.equals((Object)webSocketClient3));
          assertFalse(webSocketClient0.equals((Object)webSocketClient1));
          assertFalse(webSocketClient0.equals((Object)webSocketClient2));
          assertFalse(webSocketClient1.equals((Object)webSocketClient0));
          assertFalse(webSocketClient2.equals((Object)webSocketClient0));
          assertFalse(webSocketClient3.equals((Object)webSocketClient0));
          assertFalse(webSocketClient4.equals((Object)webSocketClient0));
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getHost());
          assertFalse(uRI0.isAbsolute());
          assertNull(uRI0.getRawQuery());
          assertEquals("state", uRI0.toString());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("state", uRI0.getRawPath());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getScheme());
          assertTrue(stubConnection0.closed());
          assertNull(stubConnection0.version());
          assertTrue(stubConnection1.closed());
          assertNull(stubConnection1.version());
          assertNotSame(webSocketClient0, webSocketClient3);
          assertNotSame(webSocketClient0, webSocketClient1);
          assertNotSame(webSocketClient0, webSocketClient2);
          assertNotSame(webSocketClient0, webSocketClient4);
          assertSame(stubConnection0, stubConnection1);
          assertSame(stubConnection1, stubConnection0);
          assertSame(webSocketClient1, webSocketClient3);
          assertSame(webSocketClient1, webSocketClient2);
          assertSame(webSocketClient1, webSocketClient4);
          assertNotSame(webSocketClient1, webSocketClient0);
          assertSame(webSocketClient2, webSocketClient3);
          assertSame(webSocketClient2, webSocketClient1);
          assertSame(webSocketClient2, webSocketClient4);
          assertNotSame(webSocketClient2, webSocketClient0);
          assertSame(webSocketClient3, webSocketClient4);
          assertSame(webSocketClient3, webSocketClient2);
          assertSame(webSocketClient3, webSocketClient1);
          assertNotSame(webSocketClient3, webSocketClient0);
          assertSame(webSocketClient4, webSocketClient2);
          assertNotSame(webSocketClient4, webSocketClient0);
          assertSame(webSocketClient4, webSocketClient3);
          assertSame(webSocketClient4, webSocketClient1);
          assertNotNull(webSocketClient4);
          
          byte[] byteArray0 = new byte[2];
          byteArray0[0] = (byte) (-69);
          byteArray0[1] = (byte)0;
          WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient1.new HandshakeChannelHandler(byteArray0);
          assertFalse(webSocketClient0.equals((Object)webSocketClient3));
          assertFalse(webSocketClient0.equals((Object)webSocketClient1));
          assertFalse(webSocketClient0.equals((Object)webSocketClient2));
          assertFalse(webSocketClient0.equals((Object)webSocketClient4));
          assertFalse(webSocketClient1.equals((Object)webSocketClient0));
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getHost());
          assertFalse(uRI0.isAbsolute());
          assertNull(uRI0.getRawQuery());
          assertEquals("state", uRI0.toString());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("state", uRI0.getRawPath());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getScheme());
          assertTrue(stubConnection0.closed());
          assertNull(stubConnection0.version());
          assertTrue(stubConnection1.closed());
          assertNull(stubConnection1.version());
          assertArrayEquals(new byte[] {(byte) (-69), (byte)0}, byteArray0);
          assertEquals(2, byteArray0.length);
          assertNotNull(webSocketClient_HandshakeChannelHandler0);
          
          ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
          doReturn((Channel) null).when(channelHandlerContext0).getChannel();
          NettyWebSocketConnection nettyWebSocketConnection0 = new NettyWebSocketConnection(stubConnection1, (NettyHttpRequest) null, channelHandlerContext0, byteArray0);
          assertTrue(stubConnection0.closed());
          assertNull(stubConnection0.version());
          assertTrue(stubConnection1.closed());
          assertNull(stubConnection1.version());
          assertNull(nettyWebSocketConnection0.version());
          assertArrayEquals(new byte[] {(byte) (-69), (byte)0}, byteArray0);
          assertEquals(2, byteArray0.length);
          assertNotNull(nettyWebSocketConnection0);
          
          Channel channel0 = nettyWebSocketConnection0.getChannel();
          assertTrue(stubConnection0.closed());
          assertNull(stubConnection0.version());
          assertTrue(stubConnection1.closed());
          assertNull(stubConnection1.version());
          assertNull(nettyWebSocketConnection0.version());
          assertArrayEquals(new byte[] {(byte) (-69), (byte)0}, byteArray0);
          assertSame(stubConnection0, stubConnection1);
          assertSame(stubConnection1, stubConnection0);
          assertEquals(2, byteArray0.length);
          assertNull(channel0);
          
          MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("state", (byte)0);
          assertNotNull(mockInetSocketAddress0);
          
          UpstreamMessageEvent upstreamMessageEvent0 = null;
          try {
            upstreamMessageEvent0 = new UpstreamMessageEvent((Channel) null, stubConnection0, mockInetSocketAddress0);
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // channel
             //
             verifyException("org.jboss.netty.channel.UpstreamMessageEvent", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNotNull(uRI0);
      
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0, forkJoinPool0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      URI uRI0 = MockURI.URI("(&'DVXpv)s");
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertEquals("(&'DVXpv)s", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isAbsolute());
      assertEquals("(&'DVXpv)s", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertNotNull(uRI0);
      
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3, threadPoolExecutor_CallerRunsPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0, scheduledThreadPoolExecutor0);
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertEquals("(&'DVXpv)s", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isAbsolute());
      assertEquals("(&'DVXpv)s", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertNotNull(webSocketClient0);
      
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, 3);
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertEquals("(&'DVXpv)s", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isAbsolute());
      assertEquals("(&'DVXpv)s", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertNotNull(reconnectingWebSocketHandler0);
      
      WebSocketClient webSocketClient1 = webSocketClient0.reconnectEvery((-1834L));
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertEquals("(&'DVXpv)s", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isAbsolute());
      assertEquals("(&'DVXpv)s", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertSame(webSocketClient0, webSocketClient1);
      assertSame(webSocketClient1, webSocketClient0);
      assertNotNull(webSocketClient1);
      
      StubHttpRequest stubHttpRequest0 = new StubHttpRequest();
      assertEquals(0L, stubHttpRequest0.timestamp());
      assertEquals("/", stubHttpRequest0.uri());
      assertEquals("GET", stubHttpRequest0.method());
      assertNull(stubHttpRequest0.body());
      assertNotNull(stubHttpRequest0);
      
      StubConnection stubConnection0 = new StubConnection(stubHttpRequest0);
      assertEquals(0L, stubHttpRequest0.timestamp());
      assertEquals("/", stubHttpRequest0.uri());
      assertEquals("GET", stubHttpRequest0.method());
      assertNull(stubHttpRequest0.body());
      assertNull(stubConnection0.version());
      assertFalse(stubConnection0.closed());
      assertNotNull(stubConnection0);
      
      WebSocketConnectionWrapper webSocketConnectionWrapper0 = new WebSocketConnectionWrapper(stubConnection0);
      assertEquals(0L, stubHttpRequest0.timestamp());
      assertEquals("/", stubHttpRequest0.uri());
      assertEquals("GET", stubHttpRequest0.method());
      assertNull(stubHttpRequest0.body());
      assertNull(stubConnection0.version());
      assertFalse(stubConnection0.closed());
      assertNull(webSocketConnectionWrapper0.version());
      assertNotNull(webSocketConnectionWrapper0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte)56;
      WebSocketConnectionWrapper webSocketConnectionWrapper1 = webSocketConnectionWrapper0.send(byteArray0);
      assertNull(webSocketConnectionWrapper1.version());
      assertEquals(0L, stubHttpRequest0.timestamp());
      assertEquals("/", stubHttpRequest0.uri());
      assertEquals("GET", stubHttpRequest0.method());
      assertNull(stubHttpRequest0.body());
      assertNull(stubConnection0.version());
      assertFalse(stubConnection0.closed());
      assertNull(webSocketConnectionWrapper0.version());
      assertArrayEquals(new byte[] {(byte) (-102), (byte)80, (byte)17, (byte)87, (byte)0, (byte) (-122), (byte)56}, byteArray0);
      assertSame(webSocketConnectionWrapper1, webSocketConnectionWrapper0);
      assertSame(webSocketConnectionWrapper0, webSocketConnectionWrapper1);
      assertEquals(7, byteArray0.length);
      assertNotNull(webSocketConnectionWrapper1);
      
      WebSocketConnectionWrapper webSocketConnectionWrapper2 = webSocketConnectionWrapper0.data("(&'DVXpv)s", (Object) stubHttpRequest0);
      assertNull(webSocketConnectionWrapper2.version());
      assertEquals(0L, stubHttpRequest0.timestamp());
      assertEquals("/", stubHttpRequest0.uri());
      assertEquals("GET", stubHttpRequest0.method());
      assertNull(stubHttpRequest0.body());
      assertNull(stubConnection0.version());
      assertFalse(stubConnection0.closed());
      assertNull(webSocketConnectionWrapper0.version());
      assertSame(webSocketConnectionWrapper2, webSocketConnectionWrapper0);
      assertSame(webSocketConnectionWrapper2, webSocketConnectionWrapper1);
      assertSame(webSocketConnectionWrapper0, webSocketConnectionWrapper1);
      assertSame(webSocketConnectionWrapper0, webSocketConnectionWrapper2);
      assertNotNull(webSocketConnectionWrapper2);
      
      WebSocketConnectionWrapper webSocketConnectionWrapper3 = webSocketConnectionWrapper2.send("(&'DVXpv)s");
      assertNull(webSocketConnectionWrapper2.version());
      assertNull(webSocketConnectionWrapper3.version());
      assertEquals(0L, stubHttpRequest0.timestamp());
      assertEquals("/", stubHttpRequest0.uri());
      assertEquals("GET", stubHttpRequest0.method());
      assertNull(stubHttpRequest0.body());
      assertNull(stubConnection0.version());
      assertFalse(stubConnection0.closed());
      assertNull(webSocketConnectionWrapper0.version());
      assertSame(webSocketConnectionWrapper2, webSocketConnectionWrapper0);
      assertSame(webSocketConnectionWrapper2, webSocketConnectionWrapper3);
      assertSame(webSocketConnectionWrapper2, webSocketConnectionWrapper1);
      assertSame(webSocketConnectionWrapper3, webSocketConnectionWrapper1);
      assertSame(webSocketConnectionWrapper3, webSocketConnectionWrapper2);
      assertSame(webSocketConnectionWrapper3, webSocketConnectionWrapper0);
      assertSame(webSocketConnectionWrapper0, webSocketConnectionWrapper3);
      assertSame(webSocketConnectionWrapper0, webSocketConnectionWrapper1);
      assertSame(webSocketConnectionWrapper0, webSocketConnectionWrapper2);
      assertNotNull(webSocketConnectionWrapper3);
      
      WebSocketConnectionWrapper webSocketConnectionWrapper4 = webSocketConnectionWrapper3.close();
      assertNull(webSocketConnectionWrapper2.version());
      assertNull(webSocketConnectionWrapper3.version());
      assertNull(webSocketConnectionWrapper4.version());
      assertEquals(0L, stubHttpRequest0.timestamp());
      assertEquals("/", stubHttpRequest0.uri());
      assertEquals("GET", stubHttpRequest0.method());
      assertNull(stubHttpRequest0.body());
      assertNull(stubConnection0.version());
      assertTrue(stubConnection0.closed());
      assertNull(webSocketConnectionWrapper0.version());
      assertSame(webSocketConnectionWrapper2, webSocketConnectionWrapper0);
      assertSame(webSocketConnectionWrapper2, webSocketConnectionWrapper3);
      assertSame(webSocketConnectionWrapper2, webSocketConnectionWrapper1);
      assertSame(webSocketConnectionWrapper2, webSocketConnectionWrapper4);
      assertSame(webSocketConnectionWrapper3, webSocketConnectionWrapper1);
      assertSame(webSocketConnectionWrapper3, webSocketConnectionWrapper4);
      assertSame(webSocketConnectionWrapper3, webSocketConnectionWrapper2);
      assertSame(webSocketConnectionWrapper3, webSocketConnectionWrapper0);
      assertSame(webSocketConnectionWrapper4, webSocketConnectionWrapper2);
      assertSame(webSocketConnectionWrapper4, webSocketConnectionWrapper0);
      assertSame(webSocketConnectionWrapper4, webSocketConnectionWrapper1);
      assertSame(webSocketConnectionWrapper4, webSocketConnectionWrapper3);
      assertSame(webSocketConnectionWrapper0, webSocketConnectionWrapper3);
      assertSame(webSocketConnectionWrapper0, webSocketConnectionWrapper4);
      assertSame(webSocketConnectionWrapper0, webSocketConnectionWrapper1);
      assertSame(webSocketConnectionWrapper0, webSocketConnectionWrapper2);
      assertNotNull(webSocketConnectionWrapper4);
      
      reconnectingWebSocketHandler0.onClose(webSocketConnectionWrapper4);
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertEquals("(&'DVXpv)s", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isAbsolute());
      assertEquals("(&'DVXpv)s", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertNull(webSocketConnectionWrapper2.version());
      assertNull(webSocketConnectionWrapper3.version());
      assertNull(webSocketConnectionWrapper4.version());
      assertEquals(0L, stubHttpRequest0.timestamp());
      assertEquals("/", stubHttpRequest0.uri());
      assertEquals("GET", stubHttpRequest0.method());
      assertNull(stubHttpRequest0.body());
      assertNull(stubConnection0.version());
      assertTrue(stubConnection0.closed());
      assertNull(webSocketConnectionWrapper0.version());
      assertSame(webSocketConnectionWrapper2, webSocketConnectionWrapper0);
      assertSame(webSocketConnectionWrapper2, webSocketConnectionWrapper3);
      assertSame(webSocketConnectionWrapper2, webSocketConnectionWrapper1);
      assertSame(webSocketConnectionWrapper2, webSocketConnectionWrapper4);
      assertSame(webSocketConnectionWrapper3, webSocketConnectionWrapper1);
      assertSame(webSocketConnectionWrapper3, webSocketConnectionWrapper4);
      assertSame(webSocketConnectionWrapper3, webSocketConnectionWrapper2);
      assertSame(webSocketConnectionWrapper3, webSocketConnectionWrapper0);
      assertSame(webSocketClient0, webSocketClient1);
      assertSame(webSocketConnectionWrapper4, webSocketConnectionWrapper2);
      assertSame(webSocketConnectionWrapper4, webSocketConnectionWrapper0);
      assertSame(webSocketConnectionWrapper4, webSocketConnectionWrapper1);
      assertSame(webSocketConnectionWrapper4, webSocketConnectionWrapper3);
      assertSame(webSocketConnectionWrapper0, webSocketConnectionWrapper3);
      assertSame(webSocketConnectionWrapper0, webSocketConnectionWrapper4);
      assertSame(webSocketConnectionWrapper0, webSocketConnectionWrapper1);
      assertSame(webSocketConnectionWrapper0, webSocketConnectionWrapper2);
      
      WebSocketClient webSocketClient2 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0);
      assertFalse(webSocketClient2.equals((Object)webSocketClient0));
      assertFalse(webSocketClient2.equals((Object)webSocketClient1));
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertEquals("(&'DVXpv)s", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isAbsolute());
      assertEquals("(&'DVXpv)s", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertNotNull(webSocketClient2);
      
      WebSocketClient webSocketClient3 = webSocketClient2.reconnectEvery(3);
      assertFalse(webSocketClient0.equals((Object)webSocketClient2));
      assertFalse(webSocketClient2.equals((Object)webSocketClient0));
      assertFalse(webSocketClient2.equals((Object)webSocketClient1));
      assertFalse(webSocketClient3.equals((Object)webSocketClient0));
      assertFalse(webSocketClient3.equals((Object)webSocketClient1));
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertEquals("(&'DVXpv)s", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isAbsolute());
      assertEquals("(&'DVXpv)s", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertNotSame(webSocketClient0, webSocketClient3);
      assertNotSame(webSocketClient0, webSocketClient2);
      assertSame(webSocketClient0, webSocketClient1);
      assertNotSame(webSocketClient2, webSocketClient0);
      assertSame(webSocketClient2, webSocketClient3);
      assertNotSame(webSocketClient2, webSocketClient1);
      assertNotSame(webSocketClient3, webSocketClient0);
      assertSame(webSocketClient3, webSocketClient2);
      assertNotSame(webSocketClient3, webSocketClient1);
      assertNotNull(webSocketClient3);
      
      // Undeclared exception!
      try { 
        webSocketClient3.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.webbitserver.netty.WebSocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      byte[] byteArray0 = new byte[12];
      URI uRI0 = MockURI.URI((String) null, "Z", (String) null, (String) null, "");
      assertEquals("", uRI0.getRawPath());
      assertEquals("Z", uRI0.getHost());
      assertEquals("Z", uRI0.getRawAuthority());
      assertNull(uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals("//Z#", uRI0.toString());
      assertEquals("", uRI0.getRawFragment());
      assertNotNull(uRI0);
      
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, (WebSocketHandler) null);
      assertEquals("", uRI0.getRawPath());
      assertEquals("Z", uRI0.getHost());
      assertEquals("Z", uRI0.getRawAuthority());
      assertNull(uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals("//Z#", uRI0.toString());
      assertEquals("", uRI0.getRawFragment());
      assertNotNull(webSocketClient0);
      
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler((WebSocketHandler) null, webSocketClient0, 2090L);
      assertEquals("", uRI0.getRawPath());
      assertEquals("Z", uRI0.getHost());
      assertEquals("Z", uRI0.getRawAuthority());
      assertNull(uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals("//Z#", uRI0.toString());
      assertEquals("", uRI0.getRawFragment());
      assertNotNull(reconnectingWebSocketHandler0);
      
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      assertNotNull(threadPoolExecutor_AbortPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(6, threadPoolExecutor_AbortPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      WebSocketClient webSocketClient1 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0, scheduledThreadPoolExecutor0);
      assertFalse(webSocketClient1.equals((Object)webSocketClient0));
      assertEquals("", uRI0.getRawPath());
      assertEquals("Z", uRI0.getHost());
      assertEquals("Z", uRI0.getRawAuthority());
      assertNull(uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals("//Z#", uRI0.toString());
      assertEquals("", uRI0.getRawFragment());
      assertNotNull(webSocketClient1);
      
      // Undeclared exception!
      try { 
        webSocketClient1.setupSsl((InputStream) null, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.webbitserver.helpers.SslFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertNotNull(uRI0);
      
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      assertFalse(uRI1.equals((Object)uRI0));
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getScheme());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getRawAuthority());
      assertFalse(uRI1.isOpaque());
      assertEquals("", uRI1.toString());
      assertEquals("", uRI1.getRawPath());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getHost());
      assertFalse(uRI1.isAbsolute());
      assertNull(uRI1.getRawUserInfo());
      assertNotSame(uRI0, uRI1);
      assertNotSame(uRI1, uRI0);
      assertNotNull(uRI1);
      
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URI uRI0 = null;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient((URI) null, webSocketHandler0, forkJoinPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = null;
      URI uRI0 = MockURI.URI((String) null, (String) null, ",PkK7K5&41;^Y.l", ",PkK7K5&41;^Y.l", ",PkK7K5&41;^Y.l");
      assertEquals(",PkK7K5&41;%5EY.%7Fl?,PkK7K5&41;%5EY.%7Fl#,PkK7K5&41;%5EY.%7Fl", uRI0.toString());
      assertNull(uRI0.getHost());
      assertEquals(",PkK7K5&41;%5EY.%7Fl", uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals(",PkK7K5&41;%5EY.%7Fl", uRI0.getRawPath());
      assertEquals(",PkK7K5&41;%5EY.%7Fl", uRI0.getRawFragment());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNotNull(uRI0);
      
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, (WebSocketHandler) null, (Executor) null);
      assertEquals(",PkK7K5&41;%5EY.%7Fl?,PkK7K5&41;%5EY.%7Fl#,PkK7K5&41;%5EY.%7Fl", uRI0.toString());
      assertNull(uRI0.getHost());
      assertEquals(",PkK7K5&41;%5EY.%7Fl", uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals(",PkK7K5&41;%5EY.%7Fl", uRI0.getRawPath());
      assertEquals(",PkK7K5&41;%5EY.%7Fl", uRI0.getRawFragment());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNotNull(webSocketClient0);
      
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler((WebSocketHandler) null, webSocketClient0, 255L);
      assertEquals(",PkK7K5&41;%5EY.%7Fl?,PkK7K5&41;%5EY.%7Fl#,PkK7K5&41;%5EY.%7Fl", uRI0.toString());
      assertNull(uRI0.getHost());
      assertEquals(",PkK7K5&41;%5EY.%7Fl", uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals(",PkK7K5&41;%5EY.%7Fl", uRI0.getRawPath());
      assertEquals(",PkK7K5&41;%5EY.%7Fl", uRI0.getRawFragment());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNotNull(reconnectingWebSocketHandler0);
      
      WebSocketClient webSocketClient1 = new WebSocketClient(uRI0, reconnectingWebSocketHandler0);
      assertFalse(webSocketClient1.equals((Object)webSocketClient0));
      assertEquals(",PkK7K5&41;%5EY.%7Fl?,PkK7K5&41;%5EY.%7Fl#,PkK7K5&41;%5EY.%7Fl", uRI0.toString());
      assertNull(uRI0.getHost());
      assertEquals(",PkK7K5&41;%5EY.%7Fl", uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals(",PkK7K5&41;%5EY.%7Fl", uRI0.getRawPath());
      assertEquals(",PkK7K5&41;%5EY.%7Fl", uRI0.getRawFragment());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNotNull(webSocketClient1);
      
      ThreadGroup threadGroup0 = (ThreadGroup)MockThread.getDefaultUncaughtExceptionHandler();
      assertEquals("Test_Execution_Group", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      WebSocketClient webSocketClient2 = (WebSocketClient)webSocketClient1.connectionExceptionHandler(threadGroup0);
      assertFalse(webSocketClient0.equals((Object)webSocketClient1));
      assertFalse(webSocketClient1.equals((Object)webSocketClient0));
      assertFalse(webSocketClient2.equals((Object)webSocketClient0));
      assertEquals(",PkK7K5&41;%5EY.%7Fl?,PkK7K5&41;%5EY.%7Fl#,PkK7K5&41;%5EY.%7Fl", uRI0.toString());
      assertNull(uRI0.getHost());
      assertEquals(",PkK7K5&41;%5EY.%7Fl", uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals(",PkK7K5&41;%5EY.%7Fl", uRI0.getRawPath());
      assertEquals(",PkK7K5&41;%5EY.%7Fl", uRI0.getRawFragment());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals("Test_Execution_Group", threadGroup0.getName());
      assertNotSame(webSocketClient0, webSocketClient1);
      assertNotSame(webSocketClient0, webSocketClient2);
      assertNotSame(webSocketClient1, webSocketClient0);
      assertSame(webSocketClient1, webSocketClient2);
      assertNotSame(webSocketClient2, webSocketClient0);
      assertSame(webSocketClient2, webSocketClient1);
      assertNotNull(webSocketClient2);
      
      WebSocketClient webSocketClient3 = (WebSocketClient)webSocketClient1.uncaughtExceptionHandler(threadGroup0);
      assertFalse(webSocketClient0.equals((Object)webSocketClient1));
      assertFalse(webSocketClient0.equals((Object)webSocketClient2));
      assertFalse(webSocketClient1.equals((Object)webSocketClient0));
      assertFalse(webSocketClient3.equals((Object)webSocketClient0));
      assertEquals(",PkK7K5&41;%5EY.%7Fl?,PkK7K5&41;%5EY.%7Fl#,PkK7K5&41;%5EY.%7Fl", uRI0.toString());
      assertNull(uRI0.getHost());
      assertEquals(",PkK7K5&41;%5EY.%7Fl", uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals(",PkK7K5&41;%5EY.%7Fl", uRI0.getRawPath());
      assertEquals(",PkK7K5&41;%5EY.%7Fl", uRI0.getRawFragment());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals("Test_Execution_Group", threadGroup0.getName());
      assertNotSame(webSocketClient0, webSocketClient1);
      assertNotSame(webSocketClient0, webSocketClient2);
      assertNotSame(webSocketClient0, webSocketClient3);
      assertSame(webSocketClient1, webSocketClient3);
      assertNotSame(webSocketClient1, webSocketClient0);
      assertSame(webSocketClient1, webSocketClient2);
      assertNotSame(webSocketClient3, webSocketClient0);
      assertSame(webSocketClient3, webSocketClient1);
      assertSame(webSocketClient3, webSocketClient2);
      assertNotNull(webSocketClient3);
      
      // Undeclared exception!
      try { 
        webSocketClient0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.webbitserver.netty.WebSocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      URI uRI0 = null;
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient((URI) null, webSocketHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "000000";
          URI uRI0 = MockURI.URI("000000");
          assertEquals("000000", uRI0.getRawPath());
          assertEquals("000000", uRI0.toString());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawAuthority());
          assertFalse(uRI0.isOpaque());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getScheme());
          assertNull(uRI0.getRawQuery());
          assertFalse(uRI0.isAbsolute());
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawUserInfo());
          assertNotNull(uRI0);
          
          URI uRI1 = MockURI.resolve(uRI0, uRI0);
          assertTrue(uRI1.equals((Object)uRI0));
          assertEquals("000000", uRI0.getRawPath());
          assertEquals("000000", uRI0.toString());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawAuthority());
          assertFalse(uRI0.isOpaque());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getScheme());
          assertNull(uRI0.getRawQuery());
          assertFalse(uRI0.isAbsolute());
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawUserInfo());
          assertNull(uRI1.getRawFragment());
          assertEquals("000000", uRI1.getRawPath());
          assertFalse(uRI1.isAbsolute());
          assertNull(uRI1.getHost());
          assertNull(uRI1.getRawUserInfo());
          assertEquals("000000", uRI1.toString());
          assertNull(uRI1.getScheme());
          assertEquals((-1), uRI1.getPort());
          assertNull(uRI1.getRawQuery());
          assertFalse(uRI1.isOpaque());
          assertNull(uRI1.getRawAuthority());
          assertNotSame(uRI0, uRI1);
          assertNotSame(uRI1, uRI0);
          assertNotNull(uRI1);
          
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI1, (WebSocketHandler) null);
          assertTrue(uRI0.equals((Object)uRI1));
          assertTrue(uRI1.equals((Object)uRI0));
          assertEquals("000000", uRI0.getRawPath());
          assertEquals("000000", uRI0.toString());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawAuthority());
          assertFalse(uRI0.isOpaque());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getScheme());
          assertNull(uRI0.getRawQuery());
          assertFalse(uRI0.isAbsolute());
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawUserInfo());
          assertNull(uRI1.getRawFragment());
          assertEquals("000000", uRI1.getRawPath());
          assertFalse(uRI1.isAbsolute());
          assertNull(uRI1.getHost());
          assertNull(uRI1.getRawUserInfo());
          assertEquals("000000", uRI1.toString());
          assertNull(uRI1.getScheme());
          assertEquals((-1), uRI1.getPort());
          assertNull(uRI1.getRawQuery());
          assertFalse(uRI1.isOpaque());
          assertNull(uRI1.getRawAuthority());
          assertNotNull(webSocketClient0);
          
          WebSocketClient webSocketClient1 = webSocketClient0.reconnectEvery(3300L);
          assertTrue(uRI0.equals((Object)uRI1));
          assertTrue(uRI1.equals((Object)uRI0));
          assertEquals("000000", uRI0.getRawPath());
          assertEquals("000000", uRI0.toString());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawAuthority());
          assertFalse(uRI0.isOpaque());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getScheme());
          assertNull(uRI0.getRawQuery());
          assertFalse(uRI0.isAbsolute());
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawUserInfo());
          assertNull(uRI1.getRawFragment());
          assertEquals("000000", uRI1.getRawPath());
          assertFalse(uRI1.isAbsolute());
          assertNull(uRI1.getHost());
          assertNull(uRI1.getRawUserInfo());
          assertEquals("000000", uRI1.toString());
          assertNull(uRI1.getScheme());
          assertEquals((-1), uRI1.getPort());
          assertNull(uRI1.getRawQuery());
          assertFalse(uRI1.isOpaque());
          assertNull(uRI1.getRawAuthority());
          assertNotSame(uRI0, uRI1);
          assertNotSame(uRI1, uRI0);
          assertSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient1, webSocketClient0);
          assertNotNull(webSocketClient1);
          
          WebSocketClient webSocketClient2 = webSocketClient1.start();
          assertTrue(uRI0.equals((Object)uRI1));
          assertTrue(uRI1.equals((Object)uRI0));
          assertEquals("000000", uRI0.getRawPath());
          assertEquals("000000", uRI0.toString());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawAuthority());
          assertFalse(uRI0.isOpaque());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getScheme());
          assertNull(uRI0.getRawQuery());
          assertFalse(uRI0.isAbsolute());
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawUserInfo());
          assertNull(uRI1.getRawFragment());
          assertEquals("000000", uRI1.getRawPath());
          assertFalse(uRI1.isAbsolute());
          assertNull(uRI1.getHost());
          assertNull(uRI1.getRawUserInfo());
          assertEquals("000000", uRI1.toString());
          assertNull(uRI1.getScheme());
          assertEquals((-1), uRI1.getPort());
          assertNull(uRI1.getRawQuery());
          assertFalse(uRI1.isOpaque());
          assertNull(uRI1.getRawAuthority());
          assertNotSame(uRI0, uRI1);
          assertNotSame(uRI1, uRI0);
          assertSame(webSocketClient0, webSocketClient2);
          assertSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient1, webSocketClient2);
          assertSame(webSocketClient1, webSocketClient0);
          assertSame(webSocketClient2, webSocketClient1);
          assertSame(webSocketClient2, webSocketClient0);
          assertNotNull(webSocketClient2);
          
          ThreadGroup threadGroup0 = (ThreadGroup)MockThread.getDefaultUncaughtExceptionHandler();
          assertEquals("Test_Execution_Group", threadGroup0.getName());
          assertNotNull(threadGroup0);
          
          WebSocketClient webSocketClient3 = (WebSocketClient)webSocketClient2.connectionExceptionHandler(threadGroup0);
          assertTrue(uRI0.equals((Object)uRI1));
          assertTrue(uRI1.equals((Object)uRI0));
          assertEquals("000000", uRI0.getRawPath());
          assertEquals("000000", uRI0.toString());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawAuthority());
          assertFalse(uRI0.isOpaque());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getScheme());
          assertNull(uRI0.getRawQuery());
          assertFalse(uRI0.isAbsolute());
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawUserInfo());
          assertNull(uRI1.getRawFragment());
          assertEquals("000000", uRI1.getRawPath());
          assertFalse(uRI1.isAbsolute());
          assertNull(uRI1.getHost());
          assertNull(uRI1.getRawUserInfo());
          assertEquals("000000", uRI1.toString());
          assertNull(uRI1.getScheme());
          assertEquals((-1), uRI1.getPort());
          assertNull(uRI1.getRawQuery());
          assertFalse(uRI1.isOpaque());
          assertNull(uRI1.getRawAuthority());
          assertEquals("Test_Execution_Group", threadGroup0.getName());
          assertNotSame(uRI0, uRI1);
          assertNotSame(uRI1, uRI0);
          assertSame(webSocketClient0, webSocketClient2);
          assertSame(webSocketClient0, webSocketClient3);
          assertSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient1, webSocketClient2);
          assertSame(webSocketClient1, webSocketClient0);
          assertSame(webSocketClient1, webSocketClient3);
          assertSame(webSocketClient2, webSocketClient3);
          assertSame(webSocketClient2, webSocketClient1);
          assertSame(webSocketClient2, webSocketClient0);
          assertSame(webSocketClient3, webSocketClient1);
          assertSame(webSocketClient3, webSocketClient2);
          assertSame(webSocketClient3, webSocketClient0);
          assertNotNull(webSocketClient3);
          
          ByteArrayInputStream byteArrayInputStream0 = null;
          try {
            byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null, 4, 0);
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("java.io.ByteArrayInputStream", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      URI uRI0 = MockURI.URI((String) null, (String) null, (String) null, (String) null, "L\"a5IW");
      assertEquals("#L%22a5IW", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("L%22a5IW", uRI0.getRawFragment());
      assertNotNull(uRI0);
      
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, (WebSocketHandler) null);
      assertEquals("#L%22a5IW", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("L%22a5IW", uRI0.getRawFragment());
      assertNotNull(webSocketClient0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)37;
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient0.new HandshakeChannelHandler(byteArray0);
      assertEquals("#L%22a5IW", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("L%22a5IW", uRI0.getRawFragment());
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-34), (byte) (-83), (byte) (-58), (byte) (-70), (byte)37, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(webSocketClient_HandshakeChannelHandler0);
      
      WebSocketClient webSocketClient1 = (WebSocketClient)webSocketClient0.connectionExceptionHandler((Thread.UncaughtExceptionHandler) null);
      assertEquals("#L%22a5IW", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("L%22a5IW", uRI0.getRawFragment());
      assertSame(webSocketClient0, webSocketClient1);
      assertSame(webSocketClient1, webSocketClient0);
      assertNotNull(webSocketClient1);
      
      ChannelPipeline channelPipeline0 = mock(ChannelPipeline.class, new ViolatedAssumptionAnswer());
      doReturn(webSocketClient_HandshakeChannelHandler0).when(channelPipeline0).remove(anyString());
      doReturn(webSocketClient_HandshakeChannelHandler0, webSocketClient_HandshakeChannelHandler0, webSocketClient_HandshakeChannelHandler0).when(channelPipeline0).replace(anyString() , anyString() , any(org.jboss.netty.channel.ChannelHandler.class));
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(channelPipeline0).when(channel0).getPipeline();
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn(channel0).when(channelHandlerContext0).getChannel();
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler1 = webSocketClient1.new HandshakeChannelHandler(byteArray0);
      assertFalse(webSocketClient_HandshakeChannelHandler1.equals((Object)webSocketClient_HandshakeChannelHandler0));
      assertEquals("#L%22a5IW", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("L%22a5IW", uRI0.getRawFragment());
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-34), (byte) (-83), (byte) (-58), (byte) (-70), (byte)37, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(webSocketClient_HandshakeChannelHandler1);
      
      webSocketClient_HandshakeChannelHandler0.adjustPipelineToWebSocket(channelHandlerContext0, (MessageEvent) null, webSocketClient_HandshakeChannelHandler1, webSocketClient_HandshakeChannelHandler1);
      assertFalse(webSocketClient_HandshakeChannelHandler1.equals((Object)webSocketClient_HandshakeChannelHandler0));
      assertFalse(webSocketClient_HandshakeChannelHandler0.equals((Object)webSocketClient_HandshakeChannelHandler1));
      assertEquals("#L%22a5IW", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("L%22a5IW", uRI0.getRawFragment());
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-34), (byte) (-83), (byte) (-58), (byte) (-70), (byte)37, (byte)0}, byteArray0);
      assertNotSame(webSocketClient_HandshakeChannelHandler1, webSocketClient_HandshakeChannelHandler0);
      assertSame(webSocketClient0, webSocketClient1);
      assertNotSame(webSocketClient_HandshakeChannelHandler0, webSocketClient_HandshakeChannelHandler1);
      assertSame(webSocketClient1, webSocketClient0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          System.setCurrentTimeMillis(1000000L);
          URI uRI0 = MockURI.aFTPURI;
          assertNull(uRI0.getRawQuery());
          assertEquals("ftp://foo.bar", uRI0.toString());
          assertEquals("", uRI0.getRawPath());
          assertNull(uRI0.getRawFragment());
          assertTrue(uRI0.isAbsolute());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("foo.bar", uRI0.getHost());
          assertEquals("ftp", uRI0.getScheme());
          assertEquals((-1), uRI0.getPort());
          assertEquals("foo.bar", uRI0.getRawAuthority());
          assertFalse(uRI0.isOpaque());
          assertNotNull(uRI0);
          
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, (WebSocketHandler) null);
          assertNull(uRI0.getRawQuery());
          assertEquals("ftp://foo.bar", uRI0.toString());
          assertEquals("", uRI0.getRawPath());
          assertNull(uRI0.getRawFragment());
          assertTrue(uRI0.isAbsolute());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("foo.bar", uRI0.getHost());
          assertEquals("ftp", uRI0.getScheme());
          assertEquals((-1), uRI0.getPort());
          assertEquals("foo.bar", uRI0.getRawAuthority());
          assertFalse(uRI0.isOpaque());
          assertNotNull(webSocketClient0);
          
          WebSocketClient webSocketClient1 = webSocketClient0.setupSsl((InputStream) null, "\" 9G4r0X");
          assertNull(uRI0.getRawQuery());
          assertEquals("ftp://foo.bar", uRI0.toString());
          assertEquals("", uRI0.getRawPath());
          assertNull(uRI0.getRawFragment());
          assertTrue(uRI0.isAbsolute());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("foo.bar", uRI0.getHost());
          assertEquals("ftp", uRI0.getScheme());
          assertEquals((-1), uRI0.getPort());
          assertEquals("foo.bar", uRI0.getRawAuthority());
          assertFalse(uRI0.isOpaque());
          assertSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient1, webSocketClient0);
          assertNotNull(webSocketClient1);
          
          WebSocketClient webSocketClient2 = webSocketClient1.start();
          assertNull(uRI0.getRawQuery());
          assertEquals("ftp://foo.bar", uRI0.toString());
          assertEquals("", uRI0.getRawPath());
          assertNull(uRI0.getRawFragment());
          assertTrue(uRI0.isAbsolute());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("foo.bar", uRI0.getHost());
          assertEquals("ftp", uRI0.getScheme());
          assertEquals((-1), uRI0.getPort());
          assertEquals("foo.bar", uRI0.getRawAuthority());
          assertFalse(uRI0.isOpaque());
          assertSame(webSocketClient0, webSocketClient2);
          assertSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient1, webSocketClient0);
          assertSame(webSocketClient1, webSocketClient2);
          assertSame(webSocketClient2, webSocketClient0);
          assertSame(webSocketClient2, webSocketClient1);
          assertNotNull(webSocketClient2);
          
          byte[] byteArray0 = new byte[9];
          byteArray0[1] = (byte)126;
          byteArray0[2] = (byte) (-54);
          byteArray0[3] = (byte)124;
          byteArray0[4] = (byte) (-103);
          byteArray0[5] = (byte)61;
          byteArray0[7] = (byte) (-56);
          byteArray0[8] = (byte) (-44);
          WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient2.new HandshakeChannelHandler(byteArray0);
          assertNull(uRI0.getRawQuery());
          assertEquals("ftp://foo.bar", uRI0.toString());
          assertEquals("", uRI0.getRawPath());
          assertNull(uRI0.getRawFragment());
          assertTrue(uRI0.isAbsolute());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("foo.bar", uRI0.getHost());
          assertEquals("ftp", uRI0.getScheme());
          assertEquals((-1), uRI0.getPort());
          assertEquals("foo.bar", uRI0.getRawAuthority());
          assertFalse(uRI0.isOpaque());
          assertArrayEquals(new byte[] {(byte)0, (byte)126, (byte) (-54), (byte)124, (byte) (-103), (byte)61, (byte)0, (byte) (-56), (byte) (-44)}, byteArray0);
          assertEquals(9, byteArray0.length);
          assertNotNull(webSocketClient_HandshakeChannelHandler0);
          
          ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
          try { 
            webSocketClient_HandshakeChannelHandler0.messageReceived(channelHandlerContext0, (MessageEvent) null);
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("org.webbitserver.netty.WebSocketClient$HandshakeChannelHandler", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          URI uRI0 = MockURI.URI("*7");
          assertEquals("*7", uRI0.toString());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawQuery());
          assertFalse(uRI0.isAbsolute());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("*7", uRI0.getRawPath());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getScheme());
          assertFalse(uRI0.isOpaque());
          assertNotNull(uRI0);
          
          WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
          StubConnection stubConnection0 = new StubConnection();
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertNotNull(stubConnection0);
          
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0, stubConnection0);
          assertEquals("*7", uRI0.toString());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawQuery());
          assertFalse(uRI0.isAbsolute());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("*7", uRI0.getRawPath());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getScheme());
          assertFalse(uRI0.isOpaque());
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertNotNull(webSocketClient0);
          
          byte[] byteArray0 = new byte[6];
          byteArray0[1] = (byte)14;
          ThreadGroup threadGroup0 = (ThreadGroup)MockThread.getDefaultUncaughtExceptionHandler();
          assertEquals("Test_Execution_Group", threadGroup0.getName());
          assertNotNull(threadGroup0);
          
          byteArray0[2] = (byte)0;
          byteArray0[4] = (byte)0;
          byteArray0[5] = (byte) (-52);
          WebSocketClient webSocketClient1 = webSocketClient0.reconnectEvery((byte) (-52));
          assertEquals("*7", uRI0.toString());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawQuery());
          assertFalse(uRI0.isAbsolute());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("*7", uRI0.getRawPath());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getScheme());
          assertFalse(uRI0.isOpaque());
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient1, webSocketClient0);
          assertNotNull(webSocketClient1);
          
          WebSocketClient webSocketClient2 = webSocketClient1.reconnectEvery((byte)0);
          assertEquals("*7", uRI0.toString());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawQuery());
          assertFalse(uRI0.isAbsolute());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("*7", uRI0.getRawPath());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getScheme());
          assertFalse(uRI0.isOpaque());
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertSame(webSocketClient0, webSocketClient2);
          assertSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient1, webSocketClient0);
          assertSame(webSocketClient1, webSocketClient2);
          assertSame(webSocketClient2, webSocketClient1);
          assertSame(webSocketClient2, webSocketClient0);
          assertNotNull(webSocketClient2);
          
          WebSocketClient webSocketClient3 = webSocketClient2.start();
          assertEquals("*7", uRI0.toString());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawQuery());
          assertFalse(uRI0.isAbsolute());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("*7", uRI0.getRawPath());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getScheme());
          assertFalse(uRI0.isOpaque());
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertSame(webSocketClient0, webSocketClient2);
          assertSame(webSocketClient0, webSocketClient3);
          assertSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient1, webSocketClient0);
          assertSame(webSocketClient1, webSocketClient2);
          assertSame(webSocketClient1, webSocketClient3);
          assertSame(webSocketClient2, webSocketClient1);
          assertSame(webSocketClient2, webSocketClient3);
          assertSame(webSocketClient2, webSocketClient0);
          assertSame(webSocketClient3, webSocketClient0);
          assertSame(webSocketClient3, webSocketClient1);
          assertSame(webSocketClient3, webSocketClient2);
          assertNotNull(webSocketClient3);
          
          byte[] byteArray1 = new byte[0];
          assertFalse(byteArray1.equals((Object)byteArray0));
          
          ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
          assertFalse(byteArray1.equals((Object)byteArray0));
          assertEquals(0, byteArrayInputStream0.available());
          assertArrayEquals(new byte[] {}, byteArray1);
          assertEquals(0, byteArray1.length);
          assertNotNull(byteArrayInputStream0);
          
          WebSocketClient webSocketClient4 = webSocketClient0.start();
          assertEquals("*7", uRI0.toString());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawQuery());
          assertFalse(uRI0.isAbsolute());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("*7", uRI0.getRawPath());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getScheme());
          assertFalse(uRI0.isOpaque());
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertSame(webSocketClient0, webSocketClient2);
          assertSame(webSocketClient0, webSocketClient3);
          assertSame(webSocketClient0, webSocketClient4);
          assertSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient4, webSocketClient0);
          assertSame(webSocketClient4, webSocketClient3);
          assertSame(webSocketClient4, webSocketClient2);
          assertSame(webSocketClient4, webSocketClient1);
          assertNotNull(webSocketClient4);
          
          WebSocketClient webSocketClient5 = (WebSocketClient)webSocketClient1.close();
          assertEquals("*7", uRI0.toString());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getHost());
          assertNull(uRI0.getRawQuery());
          assertFalse(uRI0.isAbsolute());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("*7", uRI0.getRawPath());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getScheme());
          assertFalse(uRI0.isOpaque());
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertSame(webSocketClient5, webSocketClient4);
          assertSame(webSocketClient5, webSocketClient0);
          assertSame(webSocketClient5, webSocketClient3);
          assertSame(webSocketClient5, webSocketClient2);
          assertSame(webSocketClient5, webSocketClient1);
          assertSame(webSocketClient0, webSocketClient5);
          assertSame(webSocketClient0, webSocketClient2);
          assertSame(webSocketClient0, webSocketClient3);
          assertSame(webSocketClient0, webSocketClient4);
          assertSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient1, webSocketClient4);
          assertSame(webSocketClient1, webSocketClient0);
          assertSame(webSocketClient1, webSocketClient2);
          assertSame(webSocketClient1, webSocketClient5);
          assertSame(webSocketClient1, webSocketClient3);
          assertNotNull(webSocketClient5);
          
          ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
          NettyWebSocketConnection nettyWebSocketConnection0 = new NettyWebSocketConnection(stubConnection0, (NettyHttpRequest) null, (ChannelHandlerContext) null, byteArray0);
          assertFalse(byteArray0.equals((Object)byteArray1));
          assertNull(nettyWebSocketConnection0.version());
          assertNull(stubConnection0.version());
          assertFalse(stubConnection0.closed());
          assertArrayEquals(new byte[] {(byte)0, (byte)14, (byte)0, (byte)0, (byte)0, (byte) (-52)}, byteArray0);
          assertEquals(6, byteArray0.length);
          assertNotNull(nettyWebSocketConnection0);
          
          // Undeclared exception!
          try { 
            nettyWebSocketConnection0.getChannel();
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("org.webbitserver.netty.NettyWebSocketConnection", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRI0.toString());
      assertNotNull(uRI0);
      
      URI uRI1 = MockURI.aFTPURI;
      assertFalse(uRI1.equals((Object)uRI0));
      assertNull(uRI1.getRawQuery());
      assertEquals((-1), uRI1.getPort());
      assertEquals("foo.bar", uRI1.getRawAuthority());
      assertEquals("foo.bar", uRI1.getHost());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawFragment());
      assertTrue(uRI1.isAbsolute());
      assertFalse(uRI1.isOpaque());
      assertEquals("ftp://foo.bar", uRI1.toString());
      assertEquals("", uRI1.getRawPath());
      assertEquals("ftp", uRI1.getScheme());
      assertNotSame(uRI1, uRI0);
      assertNotNull(uRI1);
      
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = null;
      try {
        webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketConnectionWrapper webSocketConnectionWrapper0 = new WebSocketConnectionWrapper((WebSocketConnection) null);
      assertNotNull(webSocketConnectionWrapper0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      ThreadGroup threadGroup0 = (ThreadGroup)MockThread.getDefaultUncaughtExceptionHandler();
      assertEquals("Test_Execution_Group", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      byte[] byteArray0 = new byte[0];
  }
}
