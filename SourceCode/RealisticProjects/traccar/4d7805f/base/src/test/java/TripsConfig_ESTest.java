/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 11 19:55:19 GMT 2019
 */

import org.junit.Test;
import static org.junit.Assert.*;
import org.br.TripsConfig;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TripsConfig_ESTest extends TripsConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TripsConfig tripsConfig0 = new TripsConfig();
      //boolean boolean0 = tripsConfig0.getUseIgnition();
      //assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TripsConfig tripsConfig0 = new TripsConfig();
      tripsConfig0.setMinimalTripDuration(318L);
      long long0 = tripsConfig0.getMinimalTripDuration();
      assertEquals(318L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TripsConfig tripsConfig0 = new TripsConfig();
      tripsConfig0.setMinimalTripDuration((-1L));
      long long0 = tripsConfig0.getMinimalTripDuration();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TripsConfig tripsConfig0 = new TripsConfig();
      double double0 = tripsConfig0.getMinimalTripDistance();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TripsConfig tripsConfig0 = new TripsConfig();
      tripsConfig0.setMinimalTripDistance(4011.409774570319);
      double double0 = tripsConfig0.getMinimalTripDistance();
      assertEquals(4011.409774570319, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TripsConfig tripsConfig0 = new TripsConfig();
      tripsConfig0.setMinimalParkingDuration(1085L);
      long long0 = tripsConfig0.getMinimalParkingDuration();
      assertEquals(1085L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TripsConfig tripsConfig0 = new TripsConfig((-1.0), 1281L, (-2403L), true, 0L);
      long long0 = tripsConfig0.getMinimalParkingDuration();
      assertTrue(tripsConfig0.getGreedyParking());
      assertEquals((-1.0), tripsConfig0.getMinimalTripDistance(), 0.01);
      assertEquals(1281L, tripsConfig0.getMinimalTripDuration());
      //assertTrue(tripsConfig0.getUseIgnition());
      assertEquals((-2403L), long0);
      assertEquals(0L, tripsConfig0.getMinimalNoDataDuration());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TripsConfig tripsConfig0 = new TripsConfig();
      tripsConfig0.setMinimalNoDataDuration(3307L);
      long long0 = tripsConfig0.getMinimalNoDataDuration();
      assertEquals(3307L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TripsConfig tripsConfig0 = new TripsConfig();
      tripsConfig0.setMinimalNoDataDuration((-398L));
      long long0 = tripsConfig0.getMinimalNoDataDuration();
      assertEquals((-398L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TripsConfig tripsConfig0 = new TripsConfig();
      tripsConfig0.setGreedyParking(true);
      boolean boolean0 = tripsConfig0.getGreedyParking();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TripsConfig tripsConfig0 = new TripsConfig();
      boolean boolean0 = tripsConfig0.getGreedyParking();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TripsConfig tripsConfig0 = new TripsConfig();
      long long0 = tripsConfig0.getMinimalNoDataDuration();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TripsConfig tripsConfig0 = new TripsConfig();
     // tripsConfig0.setUseIgnition(false);
     // assertFalse(tripsConfig0.getUseIgnition());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TripsConfig tripsConfig0 = new TripsConfig();
      long long0 = tripsConfig0.getMinimalParkingDuration();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TripsConfig tripsConfig0 = new TripsConfig();
      long long0 = tripsConfig0.getMinimalTripDuration();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TripsConfig tripsConfig0 = new TripsConfig((-1.0), 1615L, 1615L, true, (-2016L));
      double double0 = tripsConfig0.getMinimalTripDistance();
      assertEquals(1615L, tripsConfig0.getMinimalTripDuration());
      assertEquals((-2016L), tripsConfig0.getMinimalNoDataDuration());
      assertEquals(1615L, tripsConfig0.getMinimalParkingDuration());
      assertEquals((-1.0), double0, 0.01);
      //assertTrue(tripsConfig0.getUseIgnition());
      assertTrue(tripsConfig0.getGreedyParking());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TripsConfig tripsConfig0 = new TripsConfig((-1.0), 1615L, 1615L, true, (-2016L));
      //boolean boolean0 = tripsConfig0.getUseIgnition();
      assertEquals((-2016L), tripsConfig0.getMinimalNoDataDuration());
      assertEquals((-1.0), tripsConfig0.getMinimalTripDistance(), 0.01);
      assertEquals(1615L, tripsConfig0.getMinimalParkingDuration());
      assertEquals(1615L, tripsConfig0.getMinimalTripDuration());
      //assertTrue(boolean0);
      assertTrue(tripsConfig0.getGreedyParking());
  }
}
