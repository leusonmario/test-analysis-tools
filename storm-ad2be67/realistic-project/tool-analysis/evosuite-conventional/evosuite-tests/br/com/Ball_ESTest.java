/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 17 17:42:24 GMT 2019
 */

package br.com;

import org.junit.Test;
import static org.junit.Assert.*;
import br.com.Ball;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Ball_ESTest extends Ball_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Ball ball0 = new Ball(1L, 0, 1, (String) null, (String) null, "Gnp.Ay", "Gnp.Ay", (String) null, "Gnp.Ay", "", (String) null, ".@j@Bu\"p-DVN");
      ball0.getTopicWildcardPattern();
      assertEquals("KafkaSpoutConfig{kafkaProps=null, keyDeserializer=Gnp.Ay, valueDeserializer=, pollTimeoutMs=, offsetCommitPeriodMs=1, maxUncommittedOffsets=1, firstPollOffsetStrategy=null, kafkaSpoutStreams=null, tuplesBuilder=Gnp.Ay, retryService=Gnp.Ay, topics=null, topicWildcardPattern=.@j@Bu\"p-DVN}", ball0.getFinalString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Ball ball0 = new Ball(1L, (-1), (-1), "}q9+Ys4^HINYM>Ys80p", "}q9+Ys4^HINYM>Ys80p", "}q9+Ys4^HINYM>Ys80p", "}q9+Ys4^HINYM>Ys80p", "}q9+Ys4^HINYM>Ys80p", "%Q*3u;abJ", "%Q*3u;abJ", "", "");
      ball0.getTopicWildcardPattern();
      assertEquals("KafkaSpoutConfig{kafkaProps=}q9+Ys4^HINYM>Ys80p, keyDeserializer=%Q*3u;abJ, valueDeserializer=%Q*3u;abJ, pollTimeoutMs=%Q*3u;abJ, offsetCommitPeriodMs=1, maxUncommittedOffsets=-1, firstPollOffsetStrategy=}q9+Ys4^HINYM>Ys80p, kafkaSpoutStreams=}q9+Ys4^HINYM>Ys80p, tuplesBuilder=}q9+Ys4^HINYM>Ys80p, retryService=}q9+Ys4^HINYM>Ys80p, topics=, topicWildcardPattern=}", ball0.getFinalString());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Ball ball0 = new Ball(1415L, 1513, 1, "", "", "HHY>", "", "", (String) null, "HHY>", (String) null, "1Y!K=i(AMD5RTjD");
      ball0.getSubscribedTopics();
      assertEquals("KafkaSpoutConfig{kafkaProps=, keyDeserializer=null, valueDeserializer=HHY>, pollTimeoutMs=HHY>, offsetCommitPeriodMs=1415, maxUncommittedOffsets=1, firstPollOffsetStrategy=, kafkaSpoutStreams=, tuplesBuilder=HHY>, retryService=, topics=null, topicWildcardPattern=1Y!K=i(AMD5RTjD}", ball0.getFinalString());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Ball ball0 = new Ball(0L, (-2041), 2902, "", "", (String) null, "", "", "", (String) null, "", (String) null);
      ball0.getSubscribedTopics();
      assertEquals("KafkaSpoutConfig{kafkaProps=, keyDeserializer=, valueDeserializer=null, pollTimeoutMs=null, offsetCommitPeriodMs=0, maxUncommittedOffsets=2902, firstPollOffsetStrategy=, kafkaSpoutStreams=, tuplesBuilder=null, retryService=, topics=, topicWildcardPattern=null}", ball0.getFinalString());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Ball ball0 = new Ball(0L, (-2041), 2902, "", "", (String) null, "", "", "", (String) null, "", (String) null);
      String string0 = ball0.finalString();
      assertEquals("KafkaSpoutConfig{kafkaProps=, keyDeserializer=, valueDeserializer=null, pollTimeoutMs=null, offsetCommitPeriodMs=0, maxUncommittedOffsets=2902, firstPollOffsetStrategy=, kafkaSpoutStreams=, tuplesBuilder=null, retryService=, topics=, topicWildcardPattern=null}", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Ball ball0 = new Ball(0L, (-2041), 2902, "", "", (String) null, "", "", "", (String) null, "", (String) null);
      ball0.getTopicWildcardPattern();
      assertEquals("KafkaSpoutConfig{kafkaProps=, keyDeserializer=, valueDeserializer=null, pollTimeoutMs=null, offsetCommitPeriodMs=0, maxUncommittedOffsets=2902, firstPollOffsetStrategy=, kafkaSpoutStreams=, tuplesBuilder=null, retryService=, topics=, topicWildcardPattern=null}", ball0.getFinalString());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Ball ball0 = new Ball(0L, 0, 0, "YOBm.", "YOBm.", "YOBm.", "KafkaSpoutConfig{kafkaProps=", "YOBm.", "KafkaSpoutConfig{kafkaProps=", "YOBm.", "pNa", "KafkaSpoutConfig{kafkaProps=");
      ball0.getSubscribedTopics();
      assertEquals("KafkaSpoutConfig{kafkaProps=YOBm., keyDeserializer=KafkaSpoutConfig{kafkaProps=, valueDeserializer=YOBm., pollTimeoutMs=YOBm., offsetCommitPeriodMs=0, maxUncommittedOffsets=0, firstPollOffsetStrategy=YOBm., kafkaSpoutStreams=YOBm., tuplesBuilder=YOBm., retryService=KafkaSpoutConfig{kafkaProps=, topics=pNa, topicWildcardPattern=KafkaSpoutConfig{kafkaProps=}", ball0.getFinalString());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Ball ball0 = new Ball((-3), (-3), (-3), (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null);
      String string0 = ball0.getFinalString();
      assertEquals("KafkaSpoutConfig{kafkaProps=null, keyDeserializer=null, valueDeserializer=null, pollTimeoutMs=null, offsetCommitPeriodMs=-3, maxUncommittedOffsets=-3, firstPollOffsetStrategy=null, kafkaSpoutStreams=null, tuplesBuilder=null, retryService=null, topics=null, topicWildcardPattern=null}", string0);
  }
}
