/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 08 15:27:41 GMT 2019
 */

package org.apache.storm.kafka.spout;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import clojure.lang.PersistentList;
import java.time.ZoneId;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import java.util.regex.Pattern;
import kafka.server.ThrottledResponse;
import org.apache.kafka.common.serialization.ByteArrayDeserializer;
import org.apache.kafka.common.serialization.ByteBufferDeserializer;
import org.apache.kafka.common.serialization.BytesDeserializer;
import org.apache.kafka.common.serialization.Deserializer;
import org.apache.kafka.common.serialization.DoubleDeserializer;
import org.apache.kafka.common.serialization.IntegerDeserializer;
import org.apache.kafka.common.serialization.LongDeserializer;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.apache.storm.kafka.spout.DefaultRecordTranslator;
import org.apache.storm.kafka.spout.KafkaSpoutConfig;
import org.apache.storm.kafka.spout.KafkaSpoutRetryService;
import org.apache.storm.kafka.spout.ManualPartitionNamedSubscription;
import org.apache.storm.kafka.spout.ManualPartitionPatternSubscription;
import org.apache.storm.kafka.spout.RoundRobinManualPartitioner;
import org.apache.storm.kafka.spout.SerializableDeserializer;
import org.apache.storm.kafka.spout.Subscription;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KafkaSpoutConfig_ESTest extends KafkaSpoutConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SerializableDeserializer<BytesDeserializer> serializableDeserializer0 = (SerializableDeserializer<BytesDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("dWYBjmDl;MPhR8pW", "dWYBjmDl;MPhR8pW", "dWYBjmDl;MPhR8pW").when(serializableDeserializer0).toString();
      SerializableDeserializer<ByteArrayDeserializer> serializableDeserializer1 = (SerializableDeserializer<ByteArrayDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("dWYBjmDl;MPhR8pW", "dWYBjmDl;MPhR8pW", "$").when(serializableDeserializer1).toString();
      Pattern pattern0 = Pattern.compile("dWYBjmDl;MPhR8pW");
      KafkaSpoutConfig.Builder<BytesDeserializer, ByteArrayDeserializer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<BytesDeserializer, ByteArrayDeserializer>("dWYBjmDl;MPhR8pW", serializableDeserializer0, serializableDeserializer1, pattern0);
      KafkaSpoutConfig<BytesDeserializer, ByteArrayDeserializer> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      String[] stringArray0 = new String[2];
      SerializableDeserializer<Object> serializableDeserializer2 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("m", "m", "qd").when(serializableDeserializer2).toString();
      SerializableDeserializer<BytesDeserializer> serializableDeserializer3 = (SerializableDeserializer<BytesDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("m", "$", "m").when(serializableDeserializer3).toString();
      KafkaSpoutConfig.Builder<Object, BytesDeserializer> kafkaSpoutConfig_Builder1 = new KafkaSpoutConfig.Builder<Object, BytesDeserializer>("$", serializableDeserializer2, serializableDeserializer3, stringArray0);
      KafkaSpoutConfig.Builder<Object, BytesDeserializer> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setRetry(kafkaSpoutConfig0.UNIT_TEST_RETRY_SERVICE);
      KafkaSpoutConfig<Object, BytesDeserializer> kafkaSpoutConfig1 = kafkaSpoutConfig_Builder2.build();
      assertEquals(200L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(10000000, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig1.getMaxTupleRetries());
      assertEquals(2000L, kafkaSpoutConfig1.getPartitionRefreshPeriodMs());
      assertFalse(kafkaSpoutConfig1.isConsumerAutoCommitMode());
      assertEquals(30000L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      SerializableDeserializer<IntegerDeserializer> serializableDeserializer0 = (SerializableDeserializer<IntegerDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(serializableDeserializer0).toString();
      SerializableDeserializer<String> serializableDeserializer1 = (SerializableDeserializer<String>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(serializableDeserializer1).toString();
      KafkaSpoutConfig.Builder<IntegerDeserializer, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<IntegerDeserializer, String>("H", serializableDeserializer0, serializableDeserializer1, hashSet0);
      KafkaSpoutConfig.Builder<IntegerDeserializer, String> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setMaxUncommittedOffsets(1658);
      KafkaSpoutConfig<IntegerDeserializer, String> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder1.build();
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(1658, kafkaSpoutConfig0.getMaxUncommittedOffsets());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SerializableDeserializer<Object> serializableDeserializer0 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("0Bx", "enable.auto.commit", "0Bx").when(serializableDeserializer0).toString();
      SerializableDeserializer<ByteBufferDeserializer> serializableDeserializer1 = (SerializableDeserializer<ByteBufferDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("enable.auto.commit", "enable.auto.commit", "0Bx").when(serializableDeserializer1).toString();
      RoundRobinManualPartitioner roundRobinManualPartitioner0 = new RoundRobinManualPartitioner();
      Pattern pattern0 = Pattern.compile("org.apache.storm.generated.Nimbus$createStateInZookeeper_args$_Fields");
      ManualPartitionPatternSubscription manualPartitionPatternSubscription0 = new ManualPartitionPatternSubscription(roundRobinManualPartitioner0, pattern0);
      KafkaSpoutConfig.Builder<Object, ByteBufferDeserializer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, ByteBufferDeserializer>("0Bx", serializableDeserializer0, serializableDeserializer1, manualPartitionPatternSubscription0);
      kafkaSpoutConfig_Builder0.setMaxRetries((-39));
      KafkaSpoutConfig<Object, ByteBufferDeserializer> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals((-39), kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SerializableDeserializer<Object> serializableDeserializer0 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("0Bx", "enable.auto.commit", "0Bx").when(serializableDeserializer0).toString();
      SerializableDeserializer<ByteBufferDeserializer> serializableDeserializer1 = (SerializableDeserializer<ByteBufferDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("enable.auto.commit", "enable.auto.commit", "0Bx").when(serializableDeserializer1).toString();
      RoundRobinManualPartitioner roundRobinManualPartitioner0 = new RoundRobinManualPartitioner();
      Pattern pattern0 = Pattern.compile("org.apache.storm.generated.Nimbus$createStateInZookeeper_args$_Fields");
      ManualPartitionPatternSubscription manualPartitionPatternSubscription0 = new ManualPartitionPatternSubscription(roundRobinManualPartitioner0, pattern0);
      KafkaSpoutConfig.Builder<Object, ByteBufferDeserializer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, ByteBufferDeserializer>("0Bx", serializableDeserializer0, serializableDeserializer1, manualPartitionPatternSubscription0);
      kafkaSpoutConfig_Builder0.setPollTimeoutMs((-39L));
      KafkaSpoutConfig<Object, ByteBufferDeserializer> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals((-39L), kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SerializableDeserializer<ByteBufferDeserializer> serializableDeserializer0 = (SerializableDeserializer<ByteBufferDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("bkYP=", "bkYP=", "bkYP=").when(serializableDeserializer0).toString();
      SerializableDeserializer<Object> serializableDeserializer1 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("bkYP=", "bkYP=", "bkYP=").when(serializableDeserializer1).toString();
      KafkaSpoutConfig.Builder<ByteBufferDeserializer, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<ByteBufferDeserializer, Object>("bkYP=", serializableDeserializer0, serializableDeserializer1, (Subscription) null);
      kafkaSpoutConfig_Builder0.setOffsetCommitPeriodMs(2000L);
      KafkaSpoutConfig<ByteBufferDeserializer, Object> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      long long0 = kafkaSpoutConfig0.getOffsetsCommitPeriodMs();
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(2000L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SerializableDeserializer<Object> serializableDeserializer0 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      SerializableDeserializer<ByteBufferDeserializer> serializableDeserializer1 = (SerializableDeserializer<ByteBufferDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      RoundRobinManualPartitioner roundRobinManualPartitioner0 = new RoundRobinManualPartitioner();
      Pattern pattern0 = Pattern.compile("org.apache.storm.generated.Nimbus$createStateInZookeeper_args$_Fields");
      ManualPartitionPatternSubscription manualPartitionPatternSubscription0 = new ManualPartitionPatternSubscription(roundRobinManualPartitioner0, pattern0);
      KafkaSpoutConfig.Builder<Object, ByteBufferDeserializer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, ByteBufferDeserializer>("0Bx", serializableDeserializer0, serializableDeserializer1, manualPartitionPatternSubscription0);
      KafkaSpoutConfig.Builder<Object, ByteBufferDeserializer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setSSLKeystore("org.apache.storm.generated.Nimbus$createStateInZookeeper_args$_Fields", "6=w");
      assertNotNull(kafkaSpoutConfig_Builder1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      SerializableDeserializer<Object> serializableDeserializer0 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      SerializableDeserializer<ByteBufferDeserializer> serializableDeserializer1 = (SerializableDeserializer<ByteBufferDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      RoundRobinManualPartitioner roundRobinManualPartitioner0 = new RoundRobinManualPartitioner();
      Pattern pattern0 = Pattern.compile("org.apache.storm.generated.Nimbus$createStateInZookeeper_args$_Fields");
      ManualPartitionPatternSubscription manualPartitionPatternSubscription0 = new ManualPartitionPatternSubscription(roundRobinManualPartitioner0, pattern0);
      KafkaSpoutConfig.Builder<Object, ByteBufferDeserializer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, ByteBufferDeserializer>("0Bx", serializableDeserializer0, serializableDeserializer1, manualPartitionPatternSubscription0);
      KafkaSpoutConfig.Builder<Object, ByteBufferDeserializer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setProp("k(ca]/64qu", (Object) set0);
      assertNotNull(kafkaSpoutConfig_Builder1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Pattern pattern0 = Pattern.compile(", firstPollOffsetStrategy=");
      KafkaSpoutConfig.builder(", firstPollOffsetStrategy=", pattern0);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      SerializableDeserializer<Object> serializableDeserializer0 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      SerializableDeserializer<String> serializableDeserializer1 = (SerializableDeserializer<String>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<Object, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, String>(", firstPollOffsetStrategy=", serializableDeserializer0, serializableDeserializer1, treeSet0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SerializableDeserializer<ByteBufferDeserializer> serializableDeserializer0 = (SerializableDeserializer<ByteBufferDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("bkYP=", ", value=", "bkYP=").when(serializableDeserializer0).toString();
      KafkaSpoutConfig.Builder<ByteBufferDeserializer, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<ByteBufferDeserializer, Object>("bkYP=", serializableDeserializer0, (SerializableDeserializer<Object>) null, (Subscription) null);
      KafkaSpoutConfig<ByteBufferDeserializer, Object> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      Deserializer<Object> deserializer0 = kafkaSpoutConfig0.getValueDeserializer();
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertNull(deserializer0);
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SerializableDeserializer<BytesDeserializer> serializableDeserializer0 = (SerializableDeserializer<BytesDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("dWYBjmDl;MPhR8pW", (String) null, "dWYBjmDl;MPhR8pW").when(serializableDeserializer0).toString();
      SerializableDeserializer<ByteArrayDeserializer> serializableDeserializer1 = (SerializableDeserializer<ByteArrayDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(";DR,b]6>drlAB>6", ";DR,b]6>drlAB>6", "aX@[]#").when(serializableDeserializer1).toString();
      Pattern pattern0 = Pattern.compile("enable.auto.commit");
      KafkaSpoutConfig.Builder<BytesDeserializer, ByteArrayDeserializer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<BytesDeserializer, ByteArrayDeserializer>("dWYBjmDl;MPhR8pW", serializableDeserializer0, serializableDeserializer1, pattern0);
      KafkaSpoutConfig<BytesDeserializer, ByteArrayDeserializer> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      kafkaSpoutConfig0.getSubscription();
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SerializableDeserializer<ByteBufferDeserializer> serializableDeserializer0 = (SerializableDeserializer<ByteBufferDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("", "bkYP=", "", "").when(serializableDeserializer0).toString();
      SerializableDeserializer<Object> serializableDeserializer1 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("bkYP=", "", "").when(serializableDeserializer1).toString();
      KafkaSpoutConfig.Builder<ByteBufferDeserializer, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<ByteBufferDeserializer, Object>("bkYP=", serializableDeserializer0, serializableDeserializer1, (Subscription) null);
      KafkaSpoutConfig<ByteBufferDeserializer, Object> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      kafkaSpoutConfig0.getKeyDeserializer();
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      SerializableDeserializer<Object> serializableDeserializer0 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(", firstPollOffsetStrategy=", ", firstPollOffsetStrategy=", ", firstPollOffsetStrategy=").when(serializableDeserializer0).toString();
      SerializableDeserializer<String> serializableDeserializer1 = (SerializableDeserializer<String>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(", firstPollOffsetStrategy=", ", firstPollOffsetStrategy=", ", firstPollOffsetStrategy=").when(serializableDeserializer1).toString();
      KafkaSpoutConfig.Builder<Object, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, String>(", firstPollOffsetStrategy=", serializableDeserializer0, serializableDeserializer1, treeSet0);
      kafkaSpoutConfig_Builder0.setGroupId("+Fd");
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      String string0 = kafkaSpoutConfig0.getConsumerGroupId();
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertNotNull(string0);
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      SerializableDeserializer<Object> serializableDeserializer0 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(", firstPollOffsetStrategy=", "A", "Mx0").when(serializableDeserializer0).toString();
      SerializableDeserializer<String> serializableDeserializer1 = (SerializableDeserializer<String>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("", (String) null, "").when(serializableDeserializer1).toString();
      KafkaSpoutConfig.Builder<Object, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, String>(", firstPollOffsetStrategy=", serializableDeserializer0, serializableDeserializer1, treeSet0);
      KafkaSpoutConfig.Builder<Object, String> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setGroupId("");
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder1.build();
      String string0 = kafkaSpoutConfig0.getConsumerGroupId();
      assertNotNull(string0);
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[2];
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder0 = KafkaSpoutConfig.builder("ssl.key.password", stringArray0);
      assertNotNull(kafkaSpoutConfig_Builder0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultRecordTranslator<Integer, Integer> defaultRecordTranslator0 = new DefaultRecordTranslator<Integer, Integer>();
      List<String> list0 = defaultRecordTranslator0.streams();
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder0 = KafkaSpoutConfig.builder("false", (Collection<String>) list0);
      assertNotNull(kafkaSpoutConfig_Builder0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        KafkaSpoutConfig.builder("clojure.core$aset_long", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        KafkaSpoutConfig.builder((String) null, (Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RoundRobinManualPartitioner roundRobinManualPartitioner0 = new RoundRobinManualPartitioner();
      String[] stringArray0 = new String[20];
      ManualPartitionNamedSubscription manualPartitionNamedSubscription0 = new ManualPartitionNamedSubscription(roundRobinManualPartitioner0, stringArray0);
      PersistentList persistentList0 = new PersistentList(manualPartitionNamedSubscription0);
      // Undeclared exception!
      try { 
        KafkaSpoutConfig.builder(stringArray0[1], (Collection<String>) persistentList0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class clojure.lang.RT
         //
         verifyException("clojure.lang.ASeq", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        KafkaSpoutConfig.builder((String) null, (Collection<String>) set0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bootstrap servers cannot be null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SerializableDeserializer<ByteBufferDeserializer> serializableDeserializer0 = (SerializableDeserializer<ByteBufferDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "").when(serializableDeserializer0).toString();
      SerializableDeserializer<Object> serializableDeserializer1 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("bkYP=", "", "bkYP=", "bkYP=").when(serializableDeserializer1).toString();
      KafkaSpoutConfig.Builder<ByteBufferDeserializer, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<ByteBufferDeserializer, Object>("bkYP=", serializableDeserializer0, serializableDeserializer1, (Subscription) null);
      KafkaSpoutConfig<ByteBufferDeserializer, Object> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      kafkaSpoutConfig0.getValueDeserializer();
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      KafkaSpoutConfig.Builder<ByteBufferDeserializer, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<ByteBufferDeserializer, Object>("bkYP=", (SerializableDeserializer<ByteBufferDeserializer>) null, (SerializableDeserializer<Object>) null, (Subscription) null);
      KafkaSpoutConfig<ByteBufferDeserializer, Object> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      kafkaSpoutConfig0.getKeyDeserializer();
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SerializableDeserializer<Object> serializableDeserializer0 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("0Bx", "0Bx", "0Bx", (String) null, (String) null).when(serializableDeserializer0).toString();
      SerializableDeserializer<ByteBufferDeserializer> serializableDeserializer1 = (SerializableDeserializer<ByteBufferDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(",GPl{^cQT|=RZs!$", ",GPl{^cQT|=RZs!$", "0Bx", (String) null, (String) null).when(serializableDeserializer1).toString();
      RoundRobinManualPartitioner roundRobinManualPartitioner0 = new RoundRobinManualPartitioner();
      Pattern pattern0 = Pattern.compile("org.apache.storm.generated.Nimbus$createStateInZookeeper_args$_Fields");
      ManualPartitionPatternSubscription manualPartitionPatternSubscription0 = new ManualPartitionPatternSubscription(roundRobinManualPartitioner0, pattern0);
      KafkaSpoutConfig.Builder<Object, ByteBufferDeserializer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, ByteBufferDeserializer>("0Bx", serializableDeserializer0, serializableDeserializer1, manualPartitionPatternSubscription0);
      KafkaSpoutConfig<Object, ByteBufferDeserializer> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      kafkaSpoutConfig0.getToString();
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SerializableDeserializer<ByteBufferDeserializer> serializableDeserializer0 = (SerializableDeserializer<ByteBufferDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("Was expecting value of type BoltAggregateStats for field 'bolt', but got ", "bkYP=", "bkYP=", (String) null, (String) null).when(serializableDeserializer0).toString();
      SerializableDeserializer<Object> serializableDeserializer1 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("p}OSf 9 ^", "]<5", "]<5", (String) null, (String) null).when(serializableDeserializer1).toString();
      KafkaSpoutConfig.Builder<ByteBufferDeserializer, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<ByteBufferDeserializer, Object>("bkYP=", serializableDeserializer0, serializableDeserializer1, (Subscription) null);
      KafkaSpoutConfig<ByteBufferDeserializer, Object> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      kafkaSpoutConfig0.toString();
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SerializableDeserializer<Object> serializableDeserializer0 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("m", "m", "qd").when(serializableDeserializer0).toString();
      SerializableDeserializer<BytesDeserializer> serializableDeserializer1 = (SerializableDeserializer<BytesDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("m", "$", "m").when(serializableDeserializer1).toString();
      KafkaSpoutConfig.Builder<Object, BytesDeserializer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, BytesDeserializer>("$", serializableDeserializer0, serializableDeserializer1, stringArray0);
      KafkaSpoutConfig<Object, BytesDeserializer> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      boolean boolean0 = kafkaSpoutConfig0.isConsumerAutoCommitMode();
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertFalse(boolean0);
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SerializableDeserializer<DoubleDeserializer> serializableDeserializer0 = (SerializableDeserializer<DoubleDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      SerializableDeserializer<BytesDeserializer> serializableDeserializer1 = (SerializableDeserializer<BytesDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<DoubleDeserializer, BytesDeserializer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<DoubleDeserializer, BytesDeserializer>("org.apache.storm.thrift.scheme.StandardScheme", serializableDeserializer0, serializableDeserializer1, (Pattern) null);
      // Undeclared exception!
      try { 
        kafkaSpoutConfig_Builder0.setRetry((KafkaSpoutRetryService) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // retryService cannot be null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("");
      // Undeclared exception!
      try { 
        KafkaSpoutConfig.builder("", pattern0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bootstrap servers cannot be null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SerializableDeserializer<ByteBufferDeserializer> serializableDeserializer0 = (SerializableDeserializer<ByteBufferDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("bkYP=", "bkYP=", "bkYP=", "bkYP=", "bkYP=").when(serializableDeserializer0).toString();
      SerializableDeserializer<Object> serializableDeserializer1 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("bkYP=", "bkYP=", "bkYP=", "bkYP=", "bkYP=").when(serializableDeserializer1).toString();
      KafkaSpoutConfig.Builder<ByteBufferDeserializer, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<ByteBufferDeserializer, Object>("bkYP=", serializableDeserializer0, serializableDeserializer1, (Subscription) null);
      kafkaSpoutConfig_Builder0.build();
      KafkaSpoutConfig<ByteBufferDeserializer, Object> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("enable.auto.commit", (-89));
      String[] stringArray0 = pattern0.split((CharSequence) "enable.auto.commit", (-89));
      SerializableDeserializer<DoubleDeserializer> serializableDeserializer0 = (SerializableDeserializer<DoubleDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      SerializableDeserializer<ThrottledResponse> serializableDeserializer1 = (SerializableDeserializer<ThrottledResponse>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<DoubleDeserializer, ThrottledResponse> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<DoubleDeserializer, ThrottledResponse>("enable.auto.commit", serializableDeserializer0, serializableDeserializer1, stringArray0);
      SerializableDeserializer<DoubleDeserializer> serializableDeserializer2 = (SerializableDeserializer<DoubleDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<DoubleDeserializer, ThrottledResponse> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setKey(serializableDeserializer2);
      assertNotNull(kafkaSpoutConfig_Builder1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SerializableDeserializer<StringDeserializer> serializableDeserializer0 = (SerializableDeserializer<StringDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      KafkaSpoutConfig.Builder<StringDeserializer, LongDeserializer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<StringDeserializer, LongDeserializer>("org.apache.storm.kafka.spout.KafkaSpoutConfig$1", serializableDeserializer0, (SerializableDeserializer<LongDeserializer>) null, stringArray0);
      KafkaSpoutConfig.Builder<StringDeserializer, LongDeserializer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setFetchMinBytes(32812);
      assertNotNull(kafkaSpoutConfig_Builder1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("enable.auto.commit", (-89));
      String[] stringArray0 = pattern0.split((CharSequence) "enable.auto.commit", (-89));
      SerializableDeserializer<DoubleDeserializer> serializableDeserializer0 = (SerializableDeserializer<DoubleDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      SerializableDeserializer<ThrottledResponse> serializableDeserializer1 = (SerializableDeserializer<ThrottledResponse>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<DoubleDeserializer, ThrottledResponse> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<DoubleDeserializer, ThrottledResponse>("enable.auto.commit", serializableDeserializer0, serializableDeserializer1, stringArray0);
      SerializableDeserializer<ThrottledResponse> serializableDeserializer2 = (SerializableDeserializer<ThrottledResponse>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<DoubleDeserializer, ThrottledResponse> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setValue(serializableDeserializer2);
      assertNotNull(kafkaSpoutConfig_Builder1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SerializableDeserializer<BytesDeserializer> serializableDeserializer0 = (SerializableDeserializer<BytesDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      SerializableDeserializer<ByteArrayDeserializer> serializableDeserializer1 = (SerializableDeserializer<ByteArrayDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      Pattern pattern0 = Pattern.compile("dWYBjmDl;MPhR8pW");
      KafkaSpoutConfig.Builder<BytesDeserializer, ByteArrayDeserializer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<BytesDeserializer, ByteArrayDeserializer>("dWYBjmDl;MPhR8pW", serializableDeserializer0, serializableDeserializer1, pattern0);
      KafkaSpoutConfig.Builder<BytesDeserializer, ByteArrayDeserializer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setBootstrapServers("$");
      assertNotNull(kafkaSpoutConfig_Builder1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SerializableDeserializer<StringDeserializer> serializableDeserializer0 = (SerializableDeserializer<StringDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[11];
      KafkaSpoutConfig.Builder<StringDeserializer, StringDeserializer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<StringDeserializer, StringDeserializer>("enabpe.auo.comGit", serializableDeserializer0, serializableDeserializer0, stringArray0);
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.LATEST;
      KafkaSpoutConfig.Builder<StringDeserializer, StringDeserializer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setFirstPollOffsetStrategy(kafkaSpoutConfig_FirstPollOffsetStrategy0);
      assertNotNull(kafkaSpoutConfig_Builder1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      SerializableDeserializer<Object> serializableDeserializer0 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(", firstPollOffsetStrategy=", ", firstPollOffsetStrategy=", ", firstPollOffsetStrategy=").when(serializableDeserializer0).toString();
      SerializableDeserializer<String> serializableDeserializer1 = (SerializableDeserializer<String>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(", firstPollOffsetStrategy=", ", firstPollOffsetStrategy=", ", firstPollOffsetStrategy=").when(serializableDeserializer1).toString();
      KafkaSpoutConfig.Builder<Object, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, String>(", firstPollOffsetStrategy=", serializableDeserializer0, serializableDeserializer1, treeSet0);
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      kafkaSpoutConfig0.getConsumerGroupId();
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SerializableDeserializer<ByteBufferDeserializer> serializableDeserializer0 = (SerializableDeserializer<ByteBufferDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("bkYP=", "bkYP=", "bkYP=").when(serializableDeserializer0).toString();
      SerializableDeserializer<Object> serializableDeserializer1 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("bkYP=", "bkYP=", "bkYP=").when(serializableDeserializer1).toString();
      KafkaSpoutConfig.Builder<ByteBufferDeserializer, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<ByteBufferDeserializer, Object>("bkYP=", serializableDeserializer0, serializableDeserializer1, (Subscription) null);
      KafkaSpoutConfig<ByteBufferDeserializer, Object> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      int int0 = kafkaSpoutConfig0.getMaxUncommittedOffsets();
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(10000000, int0);
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SerializableDeserializer<Object> serializableDeserializer0 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("0Bx", "0Bx", "0Bx").when(serializableDeserializer0).toString();
      SerializableDeserializer<ByteBufferDeserializer> serializableDeserializer1 = (SerializableDeserializer<ByteBufferDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("0Bx", "0Bx", "0Bx").when(serializableDeserializer1).toString();
      RoundRobinManualPartitioner roundRobinManualPartitioner0 = new RoundRobinManualPartitioner();
      Pattern pattern0 = Pattern.compile("0Bx");
      ManualPartitionPatternSubscription manualPartitionPatternSubscription0 = new ManualPartitionPatternSubscription(roundRobinManualPartitioner0, pattern0);
      KafkaSpoutConfig.Builder<Object, ByteBufferDeserializer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, ByteBufferDeserializer>("0Bx", serializableDeserializer0, serializableDeserializer1, manualPartitionPatternSubscription0);
      KafkaSpoutConfig<Object, ByteBufferDeserializer> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      kafkaSpoutConfig0.getFinalToString();
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SerializableDeserializer<ByteBufferDeserializer> serializableDeserializer0 = (SerializableDeserializer<ByteBufferDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("bkYP=", "", "bkYP=").when(serializableDeserializer0).toString();
      SerializableDeserializer<Object> serializableDeserializer1 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("bkYP=", "", "bkYP=").when(serializableDeserializer1).toString();
      KafkaSpoutConfig.Builder<ByteBufferDeserializer, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<ByteBufferDeserializer, Object>("bkYP=", serializableDeserializer0, serializableDeserializer1, (Subscription) null);
      KafkaSpoutConfig<ByteBufferDeserializer, Object> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      kafkaSpoutConfig0.getSubscription();
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SerializableDeserializer<ByteBufferDeserializer> serializableDeserializer0 = (SerializableDeserializer<ByteBufferDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("bkYP=", "bkYP=", "bkYP=").when(serializableDeserializer0).toString();
      SerializableDeserializer<Object> serializableDeserializer1 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("bkYP=", "bkYP=", "bkYP=").when(serializableDeserializer1).toString();
      KafkaSpoutConfig.Builder<ByteBufferDeserializer, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<ByteBufferDeserializer, Object>("bkYP=", serializableDeserializer0, serializableDeserializer1, (Subscription) null);
      KafkaSpoutConfig<ByteBufferDeserializer, Object> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      long long0 = kafkaSpoutConfig0.getOffsetsCommitPeriodMs();
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(30000L, long0);
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        KafkaSpoutConfig.builder(stringArray0[1], stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bootstrap servers cannot be null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SerializableDeserializer<ByteBufferDeserializer> serializableDeserializer0 = (SerializableDeserializer<ByteBufferDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("bkYP=", "", "bkYP=").when(serializableDeserializer0).toString();
      SerializableDeserializer<Object> serializableDeserializer1 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("bkYP=", "", "bkYP=").when(serializableDeserializer1).toString();
      KafkaSpoutConfig.Builder<ByteBufferDeserializer, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<ByteBufferDeserializer, Object>("bkYP=", serializableDeserializer0, serializableDeserializer1, (Subscription) null);
      KafkaSpoutConfig<ByteBufferDeserializer, Object> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      long long0 = kafkaSpoutConfig0.getPartitionRefreshPeriodMs();
      assertEquals(2000L, long0);
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SerializableDeserializer<BytesDeserializer> serializableDeserializer0 = (SerializableDeserializer<BytesDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("dWYBjmDl;MPhR8pW", "dWYBjmDl;MPhR8pW", "dWYBjmDl;MPhR8pW").when(serializableDeserializer0).toString();
      SerializableDeserializer<ByteArrayDeserializer> serializableDeserializer1 = (SerializableDeserializer<ByteArrayDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("dWYBjmDl;MPhR8pW", "dWYBjmDl;MPhR8pW", "$").when(serializableDeserializer1).toString();
      Pattern pattern0 = Pattern.compile("dWYBjmDl;MPhR8pW");
      KafkaSpoutConfig.Builder<BytesDeserializer, ByteArrayDeserializer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<BytesDeserializer, ByteArrayDeserializer>("dWYBjmDl;MPhR8pW", serializableDeserializer0, serializableDeserializer1, pattern0);
      KafkaSpoutConfig<BytesDeserializer, ByteArrayDeserializer> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      kafkaSpoutConfig0.getRetryService();
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("enable.auto.commit", (-89));
      String[] stringArray0 = pattern0.split((CharSequence) "enable.auto.commit", (-89));
      SerializableDeserializer<DoubleDeserializer> serializableDeserializer0 = (SerializableDeserializer<DoubleDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(serializableDeserializer0).toString();
      SerializableDeserializer<ThrottledResponse> serializableDeserializer1 = (SerializableDeserializer<ThrottledResponse>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(serializableDeserializer1).toString();
      KafkaSpoutConfig.Builder<DoubleDeserializer, ThrottledResponse> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<DoubleDeserializer, ThrottledResponse>("enable.auto.commit", serializableDeserializer0, serializableDeserializer1, stringArray0);
      KafkaSpoutConfig<DoubleDeserializer, ThrottledResponse> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      int int0 = kafkaSpoutConfig0.getMaxTupleRetries();
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
  }
}
