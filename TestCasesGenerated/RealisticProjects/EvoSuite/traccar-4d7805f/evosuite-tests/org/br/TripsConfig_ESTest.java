/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 11 19:52:00 GMT 2019
 */

package org.br;

import org.junit.Test;
import static org.junit.Assert.*;
import org.br.TripsConfig;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TripsConfig_ESTest extends TripsConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TripsConfig tripsConfig0 = new TripsConfig(0.0, (-409L), (-409L), (-409L));
      tripsConfig0.setMinimalTripDuration(67L);
      long long0 = tripsConfig0.getMinimalTripDuration();
      assertEquals(67L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TripsConfig tripsConfig0 = new TripsConfig();
      tripsConfig0.setMinimalTripDuration((-2030L));
      long long0 = tripsConfig0.getMinimalTripDuration();
      assertEquals((-2030L), long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TripsConfig tripsConfig0 = new TripsConfig(0.0, (-409L), (-409L), (-409L));
      tripsConfig0.setMinimalTripDistance(1.0);
      double double0 = tripsConfig0.getMinimalTripDistance();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TripsConfig tripsConfig0 = new TripsConfig(0.0, (-409L), (-409L), (-409L));
      tripsConfig0.setMinimalTripDistance((-501.65819019482));
      double double0 = tripsConfig0.getMinimalTripDistance();
      assertEquals((-501.65819019482), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TripsConfig tripsConfig0 = new TripsConfig(0.0, (-409L), (-409L), (-409L));
      long long0 = tripsConfig0.getMinimalParkingDuration();
      assertEquals((-409L), tripsConfig0.getMinimalTripDuration());
      assertEquals(0.0, tripsConfig0.getMinimalTripDistance(), 0.01);
      assertEquals((-409L), tripsConfig0.getMinimalNoDataDuration());
      assertEquals((-409L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TripsConfig tripsConfig0 = new TripsConfig();
      tripsConfig0.setMinimalNoDataDuration(1L);
      long long0 = tripsConfig0.getMinimalNoDataDuration();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TripsConfig tripsConfig0 = new TripsConfig(0.0, (-409L), (-409L), (-409L));
      long long0 = tripsConfig0.getMinimalNoDataDuration();
      assertEquals(0.0, tripsConfig0.getMinimalTripDistance(), 0.01);
      assertEquals((-409L), tripsConfig0.getMinimalParkingDuration());
      assertEquals((-409L), long0);
      assertEquals((-409L), tripsConfig0.getMinimalTripDuration());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TripsConfig tripsConfig0 = new TripsConfig();
      long long0 = tripsConfig0.getMinimalNoDataDuration();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TripsConfig tripsConfig0 = new TripsConfig();
      long long0 = tripsConfig0.getMinimalParkingDuration();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TripsConfig tripsConfig0 = new TripsConfig();
      tripsConfig0.setMinimalParkingDuration(1L);
      long long0 = tripsConfig0.getMinimalParkingDuration();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TripsConfig tripsConfig0 = new TripsConfig();
      long long0 = tripsConfig0.getMinimalTripDuration();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TripsConfig tripsConfig0 = new TripsConfig();
      double double0 = tripsConfig0.getMinimalTripDistance();
      assertEquals(0.0, double0, 0.01);
  }
}
