/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 17 19:50:09 GMT 2019
 */

package org.apache.storm.kafka.spout;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.regex.Pattern;
import org.apache.storm.kafka.spout.KafkaSpoutConfig;
import org.apache.storm.kafka.spout.KafkaSpoutRetryExponentialBackoff;
import org.apache.storm.kafka.spout.KafkaSpoutRetryService;
import org.apache.storm.kafka.spout.KafkaSpoutStream;
import org.apache.storm.kafka.spout.KafkaSpoutStreams;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsWildcardTopics;
import org.apache.storm.kafka.spout.KafkaSpoutTupleBuilder;
import org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder;
import org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilderWildcardTopics;
import org.apache.storm.kafka.spout.SerializableDeserializer;
import org.apache.storm.tuple.Fields;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KafkaSpoutConfig_ESTest extends KafkaSpoutConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      Fields fields0 = new Fields(stringArray0);
      Pattern pattern0 = Pattern.compile("nT,!kSf");
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, "nT,!kSf", pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      hashMap0.put("", "");
      KafkaSpoutTupleBuilder<String, String> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<String, String>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<String, String> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<String, String>(kafkaSpoutTupleBuilder0);
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<String, String>(hashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setOffsetCommitPeriodMs(0L);
      KafkaSpoutConfig<String, String> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder1.build();
      kafkaSpoutConfig0.toString();
      assertEquals(2, hashMap0.size());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "nT,!kSf";
      Fields fields0 = new Fields(stringArray0);
      Pattern pattern0 = Pattern.compile("");
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, "org.apache.kafka.common.TopicPartition", pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      KafkaSpoutTupleBuilder<Object, Object> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Object, Object>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      hashMap0.put("[)@17", "[)@17");
      KafkaSpoutTuplesBuilderWildcardTopics<Object, Object> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Object, Object>(kafkaSpoutTupleBuilder0);
      KafkaSpoutConfig.Builder<Object, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, Object>(hashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      kafkaSpoutConfig_Builder0.setPollTimeoutMs((-2972L));
      KafkaSpoutConfig<Object, Object> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      kafkaSpoutConfig0.toString();
      assertEquals(2, hashMap0.size());
      assertEquals((-2972L), kafkaSpoutConfig0.getPollTimeoutMs());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      KafkaSpoutConfig.Builder<Object, Locale.LanguageRange> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, Locale.LanguageRange>(hashMap0, (KafkaSpoutStreams) null, (KafkaSpoutTuplesBuilder<Object, Locale.LanguageRange>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: {}
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      Fields fields0 = new Fields(stringArray0);
      Pattern pattern0 = Pattern.compile("nT,!kSf");
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, "nT,!kSf", pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      hashMap0.put("", "");
      KafkaSpoutTupleBuilder<String, String> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<String, String>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<String, String> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<String, String>(kafkaSpoutTupleBuilder0);
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<String, String>(hashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setOffsetCommitPeriodMs((-1L));
      KafkaSpoutConfig<String, String> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder1.build();
      long long0 = kafkaSpoutConfig0.getOffsetsCommitPeriodMs();
      assertEquals(2, hashMap0.size());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      Fields fields0 = new Fields(stringArray0);
      Pattern pattern0 = Pattern.compile("");
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, "org.apache.kafka.common.TopicPartition", pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      KafkaSpoutTupleBuilder<Object, Object> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Object, Object>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      hashMap0.put("[)@17", "[)@17");
      KafkaSpoutTuplesBuilderWildcardTopics<Object, Object> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Object, Object>(kafkaSpoutTupleBuilder0);
      KafkaSpoutConfig.Builder<Object, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, Object>(hashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      KafkaSpoutConfig<Object, Object> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      kafkaSpoutConfig0.getTopicWildcardPattern();
      assertEquals(2, hashMap0.size());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      Fields fields0 = new Fields(stringArray0);
      Pattern pattern0 = Pattern.compile("");
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, "org.apache.kafka.common.TopicPartition", pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      KafkaSpoutTupleBuilder<Object, Object> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Object, Object>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      hashMap0.put("[)@17", "[)@17");
      KafkaSpoutTuplesBuilderWildcardTopics<Object, Object> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Object, Object>(kafkaSpoutTupleBuilder0);
      KafkaSpoutConfig.Builder<Object, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, Object>(hashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      KafkaSpoutConfig<Object, Object> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      kafkaSpoutConfig0.getSubscribedTopics();
      assertEquals(2, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      Fields fields0 = new Fields(stringArray0);
      Pattern pattern0 = Pattern.compile("nT,!kSf");
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, "nT,!kSf", pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      hashMap0.put("", "");
      KafkaSpoutTupleBuilder<Integer, Object> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Integer, Object>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<Integer, Object> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Integer, Object>(kafkaSpoutTupleBuilder0);
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, Object>(hashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0, (KafkaSpoutRetryService) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must specify at implementation of retry service
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "jT,+kSf";
      Fields fields0 = new Fields(stringArray0);
      Pattern pattern0 = Pattern.compile("");
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, "bootstrap.servers", pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      hashMap0.put("Must specify at last one tuple builder per topic declared in KafkaSpoutStreams", "Must specify at last one tuple builder per topic declared in KafkaSpoutStreams");
      KafkaSpoutConfig.Builder<Object, Object> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, Object>(hashMap0, kafkaSpoutStreamsWildcardTopics0, (KafkaSpoutTuplesBuilder<Object, Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must specify at last one tuple builder per topic declared in KafkaSpoutStreams
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("OZf", "OZf");
      KafkaSpoutConfig.Builder<Object, Locale.LanguageRange> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, Locale.LanguageRange>(hashMap0, (KafkaSpoutStreams) null, (KafkaSpoutTuplesBuilder<Object, Locale.LanguageRange>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must specify stream associated with each topic. Multiple topics can emit to the same stream
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KafkaSpoutTupleBuilder<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutTupleBuilder0);
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics>((Map<String, Object>) null, (KafkaSpoutStreams) null, kafkaSpoutTuplesBuilderWildcardTopics0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      Fields fields0 = new Fields(stringArray0);
      Pattern pattern0 = Pattern.compile("");
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, "org.apache.kafka.common.TopicPartition", pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      hashMap0.put("[)@17", "[)@17");
      KafkaSpoutTupleBuilder<Object, Integer> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Object, Integer>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<Object, Integer> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Object, Integer>(kafkaSpoutTupleBuilder0);
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval0 = KafkaSpoutRetryExponentialBackoff.TimeInterval.seconds((-1L));
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = new KafkaSpoutRetryExponentialBackoff((KafkaSpoutRetryExponentialBackoff.TimeInterval) null, (KafkaSpoutRetryExponentialBackoff.TimeInterval) null, 292, kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      KafkaSpoutConfig.Builder<Object, Integer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, Integer>(hashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0, kafkaSpoutRetryExponentialBackoff0);
      KafkaSpoutConfig.Builder<Object, Integer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setMaxUncommittedOffsets(4);
      assertNotNull(kafkaSpoutConfig_Builder1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      Fields fields0 = new Fields(stringArray0);
      Pattern pattern0 = Pattern.compile("nT,!kSf");
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, "nT,!kSf", pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      hashMap0.put("", "");
      KafkaSpoutTupleBuilder<String, String> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<String, String>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<String, String> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<String, String>(kafkaSpoutTupleBuilder0);
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<String, String>(hashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      SerializableDeserializer<String> serializableDeserializer0 = (SerializableDeserializer<String>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setValueDeserializer(serializableDeserializer0);
      assertNotNull(kafkaSpoutConfig_Builder1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      Fields fields0 = new Fields(stringArray0);
      Pattern pattern0 = Pattern.compile("");
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, "org.apache.kafka.common.TopicPartition", pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      hashMap0.put("[)@17", "[)@17");
      KafkaSpoutTupleBuilder<Object, Integer> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Object, Integer>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<Object, Integer> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Object, Integer>(kafkaSpoutTupleBuilder0);
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval0 = KafkaSpoutRetryExponentialBackoff.TimeInterval.seconds((-1L));
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = new KafkaSpoutRetryExponentialBackoff((KafkaSpoutRetryExponentialBackoff.TimeInterval) null, (KafkaSpoutRetryExponentialBackoff.TimeInterval) null, 292, kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      KafkaSpoutConfig.Builder<Object, Integer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, Integer>(hashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0, kafkaSpoutRetryExponentialBackoff0);
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.EARLIEST;
      KafkaSpoutConfig.Builder<Object, Integer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setFirstPollOffsetStrategy(kafkaSpoutConfig_FirstPollOffsetStrategy0);
      assertNotNull(kafkaSpoutConfig_Builder1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      Fields fields0 = new Fields(stringArray0);
      Pattern pattern0 = Pattern.compile("");
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, "org.apache.kafka.common.TopicPartition", pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      hashMap0.put("[)@17", "[)@17");
      KafkaSpoutTupleBuilder<Integer, Locale.LanguageRange> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Integer, Locale.LanguageRange>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<Integer, Locale.LanguageRange> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Integer, Locale.LanguageRange>(kafkaSpoutTupleBuilder0);
      KafkaSpoutConfig.Builder<Integer, Locale.LanguageRange> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, Locale.LanguageRange>(hashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      SerializableDeserializer<Integer> serializableDeserializer0 = (SerializableDeserializer<Integer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<Integer, Locale.LanguageRange> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setKeyDeserializer(serializableDeserializer0);
      assertNotNull(kafkaSpoutConfig_Builder1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "nT,!kSf";
      Fields fields0 = new Fields(stringArray0);
      Pattern pattern0 = Pattern.compile("");
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, "org.apache.kafka.common.TopicPartition", pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      KafkaSpoutTupleBuilder<Object, Object> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Object, Object>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      hashMap0.put("[)@17", "[)@17");
      KafkaSpoutTuplesBuilderWildcardTopics<Object, Object> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Object, Object>(kafkaSpoutTupleBuilder0);
      KafkaSpoutConfig.Builder<Object, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, Object>(hashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      KafkaSpoutConfig<Object, Object> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      kafkaSpoutConfig0.getConsumerGroupId();
      assertEquals(2, hashMap0.size());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      Fields fields0 = new Fields(stringArray0);
      Pattern pattern0 = Pattern.compile("nT,!kSf");
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, "nT,!kSf", pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      hashMap0.put("", "");
      KafkaSpoutTupleBuilder<String, String> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<String, String>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<String, String> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<String, String>(kafkaSpoutTupleBuilder0);
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<String, String>(hashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      KafkaSpoutConfig<String, String> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      long long0 = kafkaSpoutConfig0.getOffsetsCommitPeriodMs();
      assertEquals(2, hashMap0.size());
      assertEquals(30000L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "nT,!kSf";
      Fields fields0 = new Fields(stringArray0);
      Pattern pattern0 = Pattern.compile("nT,!kSf");
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, "org.apache.kafka.common.TopicPartition", pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      KafkaSpoutTupleBuilder<Object, Object> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Object, Object>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      hashMap0.put("enable.auto.commit", "enable.auto.commit");
      KafkaSpoutTuplesBuilderWildcardTopics<Object, Object> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Object, Object>(kafkaSpoutTupleBuilder0);
      KafkaSpoutConfig.Builder<Object, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, Object>(hashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      KafkaSpoutConfig<Object, Object> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      kafkaSpoutConfig0.getValueDeserializer();
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      Fields fields0 = new Fields(stringArray0);
      Pattern pattern0 = Pattern.compile("nT,!kSf");
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, "nT,!kSf", pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      hashMap0.put("", "");
      KafkaSpoutTupleBuilder<String, String> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<String, String>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<String, String> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<String, String>(kafkaSpoutTupleBuilder0);
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<String, String>(hashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      KafkaSpoutConfig<String, String> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      int int0 = kafkaSpoutConfig0.getMaxUncommittedOffsets();
      assertEquals(2, hashMap0.size());
      assertEquals(10000000, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      Fields fields0 = new Fields(stringArray0);
      Pattern pattern0 = Pattern.compile("nT,!kSf");
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, "nT,!kSf", pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      hashMap0.put("", "");
      KafkaSpoutTupleBuilder<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<KafkaSpoutStreamsWildcardTopics, Object>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<KafkaSpoutStreamsWildcardTopics, Object>(kafkaSpoutTupleBuilder0);
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = new KafkaSpoutRetryExponentialBackoff((KafkaSpoutRetryExponentialBackoff.TimeInterval) null, (KafkaSpoutRetryExponentialBackoff.TimeInterval) null, 10000000, (KafkaSpoutRetryExponentialBackoff.TimeInterval) null);
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Object>(hashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0, kafkaSpoutRetryExponentialBackoff0);
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      kafkaSpoutConfig0.getKafkaSpoutStreams();
      assertEquals(2, hashMap0.size());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      Fields fields0 = new Fields(stringArray0);
      Pattern pattern0 = Pattern.compile("nT,!kSf");
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, "nT,!kSf", pattern0);
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      KafkaSpoutTupleBuilder<Object, Object> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Object, Object>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      hashMap0.put("", "");
      KafkaSpoutTuplesBuilderWildcardTopics<Object, Object> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Object, Object>(kafkaSpoutTupleBuilder0);
      KafkaSpoutConfig.Builder<Object, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, Object>(hashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      KafkaSpoutConfig<Object, Object> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      kafkaSpoutConfig0.getFirstPollOffsetStrategy();
      assertEquals(2, hashMap0.size());
  }
}
