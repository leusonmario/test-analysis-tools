/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 09 14:02:33 GMT 2019
 */

package com.zaxxer.hikari.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zaxxer.hikari.pool.PoolEntry;
import com.zaxxer.hikari.util.ConcurrentBag;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConcurrentBag_ESTest extends ConcurrentBag_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ConcurrentBag<PoolEntry> concurrentBag0 = new ConcurrentBag<PoolEntry>((ConcurrentBag.IBagStateListener) null);
      PoolEntry poolEntry0 = mock(PoolEntry.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(poolEntry0).compareAndSet(anyInt() , anyInt());
      concurrentBag0.unreserve(poolEntry0);
      assertEquals(0, concurrentBag0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConcurrentBag<PoolEntry> concurrentBag0 = new ConcurrentBag<PoolEntry>((ConcurrentBag.IBagStateListener) null);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        concurrentBag0.borrow(0L, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.util.ConcurrentBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConcurrentBag<PoolEntry> concurrentBag0 = new ConcurrentBag<PoolEntry>((ConcurrentBag.IBagStateListener) null);
      int int0 = concurrentBag0.getPendingQueue();
      assertEquals(0, int0);
  }
}
