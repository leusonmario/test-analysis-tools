/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 09 17:40:41 GMT 2019
 */

package com.zaxxer.hikari.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.codahale.metrics.InstrumentedThreadFactory;
import com.codahale.metrics.MetricRegistry;
import com.zaxxer.hikari.util.UtilityElf;
import java.util.concurrent.RejectedExecutionHandler;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UtilityElf_ESTest extends UtilityElf_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long long0 = UtilityElf.elapsedTimeMs(9223372036854775807L);
      assertEquals((-9221979627573L), long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      MetricRegistry metricRegistry0 = new MetricRegistry();
      InstrumentedThreadFactory instrumentedThreadFactory0 = new InstrumentedThreadFactory(threadFactory0, metricRegistry0, "com.zaxxer.hikari.util.UtilityElf");
      // Undeclared exception!
      try { 
        UtilityElf.createThreadPoolExecutor(1816, "com.zaxxer.hikari.util.UtilityElf", instrumentedThreadFactory0, (RejectedExecutionHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      UtilityElf.quietlySleep((-3493L), timeUnit0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        UtilityElf.getTransactionIsolation("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid transaction isolation value: 
         //
         verifyException("com.zaxxer.hikari.util.UtilityElf", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = UtilityElf.getTransactionIsolation((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = UtilityElf.createThreadPoolExecutor(1, " [/9!Q'ylijXiLkbEO", (ThreadFactory) null, threadPoolExecutor_AbortPolicy0);
      assertNotNull(threadPoolExecutor0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      MetricRegistry metricRegistry0 = new MetricRegistry();
      InstrumentedThreadFactory instrumentedThreadFactory0 = new InstrumentedThreadFactory(threadFactory0, metricRegistry0, "/noYGO3m@Y>cNz7d?=");
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      // Undeclared exception!
      try { 
        UtilityElf.createThreadPoolExecutor((-847), "57P01", instrumentedThreadFactory0, threadPoolExecutor_CallerRunsPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.LinkedBlockingQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) class0;
      objectArray0[4] = (Object) "com.zaxxer.hikari.util.UtilityElf";
      // Undeclared exception!
      try { 
        UtilityElf.createInstance("com.zaxxer.hikari.util.UtilityElf", class0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NoSuchMethodException: com.zaxxer.hikari.util.UtilityElf.<init>(java.lang.Class, java.lang.Class, java.lang.Class, java.lang.Class, java.lang.String)
         //
         verifyException("com.zaxxer.hikari.util.UtilityElf", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[9];
      Object object0 = UtilityElf.createInstance((String) null, class0, objectArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = UtilityElf.elapsedTimeMs(0L);
      assertEquals(1392409281L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UtilityElf utilityElf0 = new UtilityElf();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UtilityElf.quietlySleepMs(0L);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long long0 = UtilityElf.elapsedNanos((-1));
      assertEquals(1392409281320001L, long0);
  }
}
