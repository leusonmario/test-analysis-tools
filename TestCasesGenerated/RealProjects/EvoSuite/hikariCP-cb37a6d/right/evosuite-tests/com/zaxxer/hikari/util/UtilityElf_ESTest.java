/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 09 18:06:48 GMT 2019
 */

package com.zaxxer.hikari.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.codahale.metrics.InstrumentedThreadFactory;
import com.codahale.metrics.MetricRegistry;
import com.zaxxer.hikari.util.UtilityElf;
import java.util.Map;
import java.util.concurrent.RejectedExecutionHandler;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UtilityElf_ESTest extends UtilityElf_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UtilityElf utilityElf0 = new UtilityElf();
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) class0;
      // Undeclared exception!
      try { 
        UtilityElf.createInstance("com.codahale.metrics.ScheduledReporter$NamedThreadFactory", class0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NoSuchMethodException: com.codahale.metrics.ScheduledReporter$NamedThreadFactory.<init>(java.lang.Class)
         //
         verifyException("com.zaxxer.hikari.util.UtilityElf", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UtilityElf.quietlySleep(9223372036854775807L);
      Class<Object> class0 = Object.class;
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long long0 = UtilityElf.elapsedTimeMs(1392409281320L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = UtilityElf.elapsedTimeMs(9223372036854775807L);
      assertEquals((-9223370644445494487L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      MetricRegistry metricRegistry0 = new MetricRegistry();
      InstrumentedThreadFactory instrumentedThreadFactory0 = new InstrumentedThreadFactory(threadFactory0, metricRegistry0, "y1RgH)>}:/J");
      // Undeclared exception!
      try { 
        UtilityElf.createThreadPoolExecutor(64, "y1RgH)>}:/J", instrumentedThreadFactory0, (RejectedExecutionHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      // Undeclared exception!
      try { 
        UtilityElf.createThreadPoolExecutor((-741), "i", threadFactory0, threadPoolExecutor_DiscardOldestPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.LinkedBlockingQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        UtilityElf.getTransactionIsolation("Oyakl)e\"k7^7;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid transaction isolation value: Oyakl)e\"k7^7;
         //
         verifyException("com.zaxxer.hikari.util.UtilityElf", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UtilityElf.getTransactionIsolation((String) null);
      Class<Object> class0 = Object.class;
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      UtilityElf.createThreadPoolExecutor(1, "Oyakl)e\"k7^7;", (ThreadFactory) null, threadPoolExecutor_DiscardPolicy0);
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "com.codahale.metrics.RatioGauge";
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        UtilityElf.createInstance("com.codahale.metrics.RatioGauge", class0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.InstantiationException
         //
         verifyException("com.zaxxer.hikari.util.UtilityElf", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "com.zaxxer.hikari.util.UtilityElf";
      Class<UtilityElf> class0 = UtilityElf.class;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "com.zaxxer.hikari.util.UtilityElf";
      objectArray0[1] = (Object) class0;
      objectArray0[2] = objectArray0[1];
      objectArray0[3] = (Object) "com.zaxxer.hikari.util.UtilityElf";
      // Undeclared exception!
      try { 
        UtilityElf.createInstance("com.zaxxer.hikari.util.UtilityElf", class0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NoSuchMethodException: com.zaxxer.hikari.util.UtilityElf.<init>(java.lang.String, java.lang.Class, java.lang.Class, java.lang.String)
         //
         verifyException("com.zaxxer.hikari.util.UtilityElf", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[3];
      UtilityElf.createInstance((String) null, class0, objectArray0);
      Class<UtilityElf> class1 = UtilityElf.class;
      // Undeclared exception!
      try { 
        UtilityElf.createInstance("Unable to unregister counter", class1, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'Unable to unregister counter.class' should be in target project, but could not be found!
         //
         verifyException("com.zaxxer.hikari.util.UtilityElf", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UtilityElf.elapsedTimeMs((-2734L));
      String string0 = ">n=Lm %7#olviUM0.9";
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UtilityElf utilityElf0 = new UtilityElf();
      // Undeclared exception!
      try { 
        UtilityElf.quietlySleep((-316L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }
}
