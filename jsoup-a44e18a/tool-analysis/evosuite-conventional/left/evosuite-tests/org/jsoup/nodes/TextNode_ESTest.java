/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 21:15:42 GMT 2019
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextNode_ESTest extends TextNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("S");
      char[] charArray0 = new char[25];
      stringBuilder0.append(charArray0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("", "");
      // Undeclared exception!
      try { 
        textNode0.splitText(221);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "");
      textNode0.siblingIndex = 32;
      TextNode textNode1 = textNode0.text("0#Qe^>kKQ:7k");
      assertEquals(32, textNode1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("3mq%4?zbb=*of7i", "#text");
      TextNode textNode1 = textNode0.text("3mq%4?zbb=*of7i");
      textNode1.siblingIndex = (-1422);
      TextNode textNode2 = textNode1.text("3mq%4?zbb=*of7i");
      assertEquals("#text", textNode2.baseUri());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("", "");
      TextNode textNode1 = textNode0.text("98>@4Nn[Uq1V)/");
      TextNode textNode2 = textNode1.splitText(0);
      String string0 = textNode0.text();
      assertEquals("", string0);
      assertNotSame(textNode0, textNode2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = TextNode.stripLeadingWhitespace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("", "");
      List<Node> list0 = textNode0.childNodesCopy();
      textNode0.childNodes = list0;
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) textNode0;
      nodeArray0[1] = (Node) textNode0;
      nodeArray0[2] = (Node) textNode0;
      nodeArray0[3] = (Node) textNode0;
      textNode0.addChildren(nodeArray0);
      TextNode textNode1 = textNode0.text("98>@4Nn[Uq1V)/");
      TextNode textNode2 = textNode1.splitText(0);
      Node node0 = textNode2.removeAttr("98>@4Nn[Uq1V)/");
      assertEquals(1, node0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("|C7", "|C7");
      TextNode textNode1 = textNode0.text("d,pW$3S_]");
      textNode1.siblingIndex = (-2668);
      Node node0 = textNode0.removeAttr("|C7");
      assertSame(node0, textNode1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("", "");
      List<Node> list0 = textNode0.childNodesCopy();
      textNode0.childNodes = list0;
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) textNode0;
      nodeArray0[1] = (Node) textNode0;
      nodeArray0[2] = (Node) textNode0;
      nodeArray0[3] = (Node) textNode0;
      textNode0.addChildren(nodeArray0);
      Node node0 = textNode0.removeAttr("/,sHFu1c0K2ag?");
      assertEquals(1, node0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = TextNode.normaliseWhitespace("J^9mN*B6rD)L[@C=9");
      assertEquals("J^9mN*B6rD)L[@C=9", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = TextNode.normaliseWhitespace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "|+%PnA");
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("S");
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "pSz*bG{H`");
      boolean boolean0 = textNode0.isBlank();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("w33", "NhxS97=~^.]o/");
      boolean boolean0 = textNode0.hasAttr("text");
      assertEquals("NhxS97=~^.]o/", textNode0.baseUri());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextNode textNode0 = new TextNode((String) null, (String) null);
      String string0 = textNode0.getWholeText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextNode textNode0 = new TextNode("?5q/E)9@Wa%9", "");
      textNode0.setSiblingIndex(979);
      Node node0 = textNode0.attr("^@49g*N", "^@49g*N");
      assertSame(textNode0, node0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextNode textNode0 = new TextNode("de1+rZPDv:", "CP*Ux");
      textNode0.setSiblingIndex((-811));
      Node node0 = textNode0.attr("org.jsoup.nodes.TextNode", "");
      assertSame(textNode0, node0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextNode textNode0 = new TextNode("on V-&J", "w,u.");
      TextNode textNode1 = textNode0.text("on V-&J");
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      textNode1.childNodes = (List<Node>) linkedList0;
      linkedList0.add((Node) textNode0);
      Node node0 = textNode1.attr("J^9mN*B6rD)L[@C=9", "text");
      assertEquals(0, node0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("ThPf5OU=kFH`&7},", "5~{<}Ln'ci]mZ3^");
      String string0 = textNode0.attr("text");
      assertEquals("5~{<}Ln'ci]mZ3^", textNode0.baseUri());
      assertEquals("ThPf5OU=kFH`&7},", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextNode textNode0 = new TextNode((String) null, (String) null);
      // Undeclared exception!
      try { 
        textNode0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextNode textNode0 = new TextNode("3yxZ20)ksP.J9WC^", "3yxZ20)ksP.J9WC^");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(true);
      textNode0.setSiblingIndex(666);
      Document document0 = new Document("3yxZ20)ksP.J9WC^");
      document0.outputSettings(document_OutputSettings1);
      textNode0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        textNode0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextNode textNode0 = new TextNode(";", ";");
      Document document0 = Document.createShell(";");
      document0.parentNode = (Node) textNode0;
      textNode0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        textNode0.toString();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.TextNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("missing semicolon", "missing semicolon");
      Document document0 = new Document("]");
      textNode0.setParentNode(document0);
      textNode0.setSiblingIndex((-2769));
      // Undeclared exception!
      try { 
        textNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextNode textNode0 = new TextNode((String) null, "X?<W7tQj0X!");
      // Undeclared exception!
      try { 
        textNode0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        TextNode.stripLeadingWhitespace((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("t\"QD0Q0L>;3'_=", "t\"QD0Q0L>;3'_=");
      Attributes attributes0 = new Attributes();
      textNode0.attributes = attributes0;
      // Undeclared exception!
      try { 
        textNode0.splitText(1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("", "");
      TextNode textNode1 = textNode0.text((String) null);
      // Undeclared exception!
      try { 
        textNode1.splitText(18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("|C7", "|C7");
      textNode0.parentNode = (Node) textNode0;
      List<Node> list0 = textNode0.childNodesCopy();
      textNode0.childNodes = list0;
      // Undeclared exception!
      try { 
        textNode0.splitText(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("", "x<&uN]iQ1_5 g");
      // Undeclared exception!
      try { 
        textNode0.removeAttr("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextNode textNode0 = new TextNode("y", "y");
      StringBuilder stringBuilder0 = new StringBuilder("y");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(1095);
      Document document0 = Document.createShell("y");
      textNode0.parentNode = (Node) document0;
      // Undeclared exception!
      textNode0.outerHtmlHead(stringBuilder0, 1095, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead((StringBuilder) null, (-296), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("missing semicolon", "missing semicolon");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "missing semicolon");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Comment comment0 = new Comment("^s+", "UR");
      textNode0.setParentNode(comment0);
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(true);
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, 1095, document_OutputSettings1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      TextNode textNode0 = new TextNode("_V[?B", "_V[?B");
      Document document0 = new Document("NdkR |]wj{7^");
      document0.appendChild(textNode0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, (-1089), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "");
      StringBuilder stringBuilder0 = new StringBuilder("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document0 = Document.createShell("");
      document0.setParentNode(textNode0);
      textNode0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, 1095, document_OutputSettings0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.TextNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        TextNode.normaliseWhitespace((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        TextNode.lastCharIsWhitespace((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TextNode textNode0 = new TextNode((String) null, (String) null);
      // Undeclared exception!
      try { 
        textNode0.hasAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        TextNode.createFromEncoded((String) null, "head");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextNode textNode0 = new TextNode((String) null, (String) null);
      // Undeclared exception!
      try { 
        textNode0.attributes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("bIk^mV'pTrKdk+2'q}D", "nav");
      textNode0.text((String) null);
      // Undeclared exception!
      try { 
        textNode0.attr("D$|", "bIk^mV'pTrKdk+2'q}D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TextNode textNode0 = new TextNode((String) null, (String) null);
      // Undeclared exception!
      try { 
        textNode0.attr("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TextNode textNode0 = new TextNode("#YP)TWGs", "#YP)TWGs");
      // Undeclared exception!
      try { 
        textNode0.absUrl("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "");
      String string0 = textNode0.getWholeText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TextNode textNode0 = new TextNode("`T", (String) null);
      String string0 = textNode0.nodeName();
      assertEquals("#text", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TextNode textNode0 = new TextNode("swPj6^>bWuaYNf", "Split offset must not be greater than current text length");
      boolean boolean0 = textNode0.isBlank();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TextNode textNode0 = new TextNode("swPj6^>bWuaYNf", "Split offset must not be greater than current text length");
      textNode0.hasAttr("");
      String string0 = textNode0.getWholeText();
      assertEquals("swPj6^>bWuaYNf", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TextNode textNode0 = new TextNode("swPj6^>bWuaYNf", "Split offset must not be greater than current text length");
      String string0 = textNode0.attr("swPj6^>bWuaYNf");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = Document.createShell("AfterAtrib eV4luKquoted");
      document0.title("AfterAtrib eV4luKquoted");
      document0.text("AfterAtrib eV4luKquoted");
      Elements elements0 = document0.getElementsContainingText("AfterAtrib eV4luKquoted");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TextNode textNode0 = new TextNode("y", "y");
      StringBuilder stringBuilder0 = new StringBuilder("y");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(true);
      textNode0.setSiblingIndex(1095);
      Document document0 = Document.createShell("y");
      textNode0.parentNode = (Node) document0;
      textNode0.outerHtmlHead(stringBuilder0, 1095, document_OutputSettings1);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "");
      StringBuilder stringBuilder0 = new StringBuilder("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(true);
      Document document0 = Document.createShell("");
      textNode0.parentNode = (Node) document0;
      textNode0.outerHtmlHead(stringBuilder0, (-365), document_OutputSettings1);
      assertTrue(document_OutputSettings1.prettyPrint());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "");
      StringBuilder stringBuilder0 = new StringBuilder("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(true);
      textNode0.outerHtmlHead(stringBuilder0, (-365), document_OutputSettings1);
      assertTrue(document_OutputSettings1.prettyPrint());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "");
      textNode0.setSiblingIndex(1095);
      textNode0.toString();
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Document document0 = Document.createShell("AfterAtrib eV4luKquoted");
      document0.title("AfterAtrib eV4luKquoted");
      stringBuilder0.insert(0, (Object) document0);
      assertEquals("<html>\n <head>\n  <title>AfterAtrib eV4luKquoted</title>\n </head>\n <body></body>\n</html>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TextNode textNode0 = new TextNode("swPj6^>bWuaYNf", "Split offset must not be greater than current text length");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      textNode0.outerHtmlHead(stringBuilder0, 1, document_OutputSettings1);
      assertEquals("swPj6^&gt;bWuaYNf", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "");
      // Undeclared exception!
      try { 
        textNode0.splitText((-1328));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("O@u]hK0mGThnrm", "O@u]hK0mGThnrm");
      Node node0 = textNode0.attr("O@u]hK0mGThnrm", "O@u]hK0mGThnrm");
      TextNode textNode1 = textNode0.splitText(2);
      assertNotSame(textNode1, node0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TextNode textNode0 = new TextNode("`T", (String) null);
      TextNode textNode1 = (TextNode)textNode0.attr(";fgeLo{P", ";fgeLo{P");
      // Undeclared exception!
      try { 
        textNode1.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("AfterAtrib eV4luKquoted", "AfterAtrib eV4luKquoted");
      textNode0.splitText(0);
      // Undeclared exception!
      try { 
        textNode0.splitText(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TextNode textNode0 = new TextNode("M%;}Ff`549V{k%xk9", "M%;}Ff`549V{k%xk9");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode0.outerHtmlTail((StringBuilder) null, 1, document_OutputSettings0);
      assertEquals("M%;}Ff`549V{k%xk9", textNode0.baseUri());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TextNode textNode0 = new TextNode("3xZ20)sP.J9W^", "3xZ20)sP.J9W^");
      textNode0.toString();
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("|C7", "|C7");
      textNode0.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        textNode0.splitText(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TextNode textNode0 = new TextNode("M%;}Ff`549V{k%xk9", "M%;}Ff`549V{k%xk9");
      Attributes attributes0 = textNode0.attributes();
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TextNode textNode0 = new TextNode("3xZ20)sP.J9W^", "3xZ20)sP.J9W^");
      String string0 = textNode0.text();
      assertEquals("3xZ20)sP.J9W^", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TextNode textNode0 = new TextNode("3xZ20)sP.J9W^", "3xZ20)sP.J9W^");
      String string0 = textNode0.absUrl("\n3xZ20)sP.J9W^");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = TextNode.stripLeadingWhitespace("|C7");
      assertEquals("|C7", string0);
  }
}
