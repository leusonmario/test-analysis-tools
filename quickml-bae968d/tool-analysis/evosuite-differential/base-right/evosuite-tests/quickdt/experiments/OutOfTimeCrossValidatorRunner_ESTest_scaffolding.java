/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Wed Jul 24 20:12:24 GMT 2019
 */

package quickdt.experiments;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class OutOfTimeCrossValidatorRunner_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "quickdt.experiments.OutOfTimeCrossValidatorRunner"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    /*No java.lang.System property to set*/
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(OutOfTimeCrossValidatorRunner_ESTest_scaffolding.class.getClassLoader() ,
      "org.apache.commons.io.filefilter.IOFileFilter",
      "quickdt.crossValidation.OutOfTimeCrossValidator",
      "quickdt.predictiveModels.UpdatablePredictiveModelBuilder",
      "com.google.common.base.Joiner$1",
      "org.apache.commons.io.filefilter.MagicNumberFileFilter",
      "com.google.common.base.Joiner$2",
      "quickdt.predictiveModels.PredictiveModelWithDataBuilder",
      "com.google.common.collect.Lists$RandomAccessPartition",
      "quickdt.predictiveModels.calibratedPredictiveModel.CalibratedPredictiveModel",
      "com.google.common.collect.ImmutableCollection",
      "com.google.common.collect.ImmutableEnumMap",
      "quickdt.crossValidation.WeightedAUCCrossValLoss$AUCData",
      "com.google.common.collect.Collections2",
      "quickdt.crossValidation.CrossValidator",
      "com.google.common.collect.Lists$RandomAccessListWrapper",
      "quickdt.crossValidation.DateTimeExtractor",
      "quickdt.crossValidation.MSECrossValLoss",
      "quickdt.predictiveModels.featureEngineering.AttributesEnricher",
      "org.apache.commons.io.filefilter.EmptyFileFilter",
      "quickdt.predictiveModels.randomForest.RandomForest",
      "com.google.common.collect.Lists$TransformingRandomAccessList",
      "quickdt.predictiveModels.calibratedPredictiveModel.PAVCalibrator",
      "org.apache.commons.io.filefilter.NotFileFilter",
      "quickdt.crossValidation.StationaryCrossValidator$DataSplit",
      "org.apache.commons.io.filefilter.TrueFileFilter",
      "com.google.common.collect.BiMap",
      "org.apache.commons.io.filefilter.AgeFileFilter",
      "com.google.common.base.Function",
      "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy",
      "com.google.common.collect.Lists$AbstractListWrapper",
      "quickdt.crossValidation.CrossValLoss",
      "com.google.common.collect.ImmutableMap",
      "org.apache.commons.io.filefilter.AbstractFileFilter",
      "org.apache.commons.io.filefilter.ConditionalFileFilter",
      "com.google.common.collect.Maps$1",
      "quickdt.crossValidation.WeightedAUCCrossValLoss$AUCPoint",
      "org.apache.commons.io.filefilter.FileFileFilter",
      "com.google.common.collect.SortedMapDifference",
      "org.apache.commons.io.filefilter.DirectoryFileFilter",
      "quickdt.data.Instance",
      "org.apache.commons.io.filefilter.HiddenFileFilter",
      "quickdt.predictiveModels.PredictiveModelBuilder",
      "com.thoughtworks.xstream.persistence.PersistenceStrategy",
      "org.apache.commons.io.filefilter.SuffixFileFilter",
      "quickdt.data.Attributes",
      "org.apache.commons.io.filefilter.FalseFileFilter",
      "com.google.common.collect.Lists$StringAsImmutableList",
      "com.google.common.collect.Lists$2",
      "quickdt.predictiveModels.decisionTree.Tree",
      "org.apache.commons.io.filefilter.CanReadFileFilter",
      "quickdt.data.HashMapAttributes",
      "com.google.common.collect.Lists$1",
      "com.google.common.base.Joiner",
      "quickdt.predictiveModels.splitOnAttributePredictiveModel.SplitOnAttributePM",
      "quickdt.experiments.OutOfTimeCrossValidatorRunner",
      "org.apache.commons.io.filefilter.DelegateFileFilter",
      "org.apache.commons.io.filefilter.AndFileFilter",
      "org.apache.commons.io.IOCase",
      "com.google.common.collect.Multiset",
      "quickdt.crossValidation.WeightedAUCCrossValLoss",
      "quickdt.crossValidation.OnlineCrossValLoss",
      "quickdt.crossValidation.StationaryCrossValidator",
      "org.apache.commons.io.filefilter.SizeFileFilter",
      "quickdt.predictiveModels.PredictiveModel",
      "quickdt.predictiveModels.downsamplingPredictiveModel.DownsamplingPredictiveModel",
      "quickdt.predictiveModels.featureEngineering.FeatureEngineeredPredictiveModel",
      "com.google.common.collect.Lists$Partition",
      "org.apache.commons.io.filefilter.OrFileFilter",
      "com.google.common.collect.Lists",
      "com.google.common.collect.ImmutableList",
      "quickdt.experiments.TrainingDataGenerator2",
      "quickdt.data.AbstractInstance",
      "quickdt.predictiveModels.calibratedPredictiveModel.Calibrator",
      "org.apache.commons.io.filefilter.NameFileFilter",
      "com.google.common.io.PatternFilenameFilter",
      "com.google.common.collect.Lists$TransformingSequentialList",
      "org.apache.commons.io.filefilter.RegexFileFilter",
      "com.google.common.base.Joiner$MapJoiner",
      "quickdt.crossValidation.NonWeightedAUCCrossValLoss",
      "com.google.common.collect.Maps",
      "org.apache.commons.io.filefilter.PrefixFileFilter",
      "com.google.common.collect.MapDifference",
      "com.google.common.collect.Maps$EntryTransformer",
      "quickdt.predictiveModels.decisionTree.tree.Node",
      "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator",
      "org.apache.commons.io.filefilter.WildcardFilter",
      "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$ValidFilenameFilter",
      "org.apache.commons.io.filefilter.WildcardFileFilter",
      "quickdt.crossValidation.RMSECrossValLoss",
      "com.google.common.base.Preconditions",
      "com.google.common.collect.UnmodifiableIterator",
      "quickdt.crossValidation.LogCrossValLoss",
      "org.apache.commons.io.filefilter.CanWriteFileFilter",
      "quickdt.predictiveModels.calibratedPredictiveModel.PAVCalibrator$Observation"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(OutOfTimeCrossValidatorRunner_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "quickdt.experiments.OutOfTimeCrossValidatorRunner",
      "quickdt.experiments.TrainingDataGenerator2",
      "com.google.common.collect.Lists",
      "quickdt.data.HashMapAttributes",
      "com.google.common.base.Joiner",
      "com.google.common.base.Preconditions",
      "com.google.common.base.Joiner$1",
      "com.google.common.collect.Collections2",
      "com.google.common.base.Joiner$MapJoiner",
      "com.google.common.collect.Maps",
      "quickdt.data.AbstractInstance",
      "quickdt.data.Instance"
    );
  }
}
