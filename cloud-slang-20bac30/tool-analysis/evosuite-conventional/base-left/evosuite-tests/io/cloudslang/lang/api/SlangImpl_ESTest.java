/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 08 18:00:37 GMT 2019
 */

package io.cloudslang.lang.api;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.cloudslang.lang.api.SlangImpl;
import io.cloudslang.lang.compiler.SlangCompiler;
import io.cloudslang.lang.compiler.SlangSource;
import io.cloudslang.lang.entities.CompilationArtifact;
import io.cloudslang.lang.entities.bindings.Input;
import io.cloudslang.score.api.ControlActionMetadata;
import io.cloudslang.score.api.ExecutionPlan;
import io.cloudslang.score.api.ExecutionStep;
import io.cloudslang.score.api.Score;
import io.cloudslang.score.api.TriggeringProperties;
import io.cloudslang.score.events.EventBus;
import io.cloudslang.score.events.ScoreEventListener;
import java.io.File;
import java.io.Serializable;
import java.time.ZoneId;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.apache.log4j.LogManager;
import org.apache.log4j.helpers.Loader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SlangImpl_ESTest extends SlangImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn((CompilationArtifact) null).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SlangSource slangSource0 = new SlangSource("Mtc", "Mtc");
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      // Undeclared exception!
      try { 
        slangImpl0.compileAndRun(slangSource0, linkedHashSet0, (Map<String, ? extends Serializable>) null, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Compilation artifact can not be null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      TriggeringProperties triggeringProperties0 = TriggeringProperties.create(executionPlan0);
      triggeringProperties0.getExecutionPlan();
      triggeringProperties0.getDependencies();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      Loader.getResource("4(vI?YJjGLmh?4");
      ExecutionPlan executionPlan1 = new ExecutionPlan();
      executionPlan1.setName("4(vI?YJjGLmh?4");
      LinkedList<ExecutionStep> linkedList0 = new LinkedList<ExecutionStep>();
      executionPlan1.addSteps(linkedList0);
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan1, (Map<String, ExecutionPlan>) null, (List<Input>) null, (Collection<Input>) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      slangImpl0.run(compilationArtifact0, (Map<String, ? extends Serializable>) null, hashMap0);
      ScoreEventListener scoreEventListener0 = mock(ScoreEventListener.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      slangImpl0.subscribeOnEvents(scoreEventListener0, set0);
      assertFalse(set0.contains("eventBus"));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Long long0 = new Long(1L);
      Long long1 = new Long((-569L));
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn(long0, long1).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      TriggeringProperties triggeringProperties0 = TriggeringProperties.create(executionPlan0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Map<String, ExecutionPlan> map1 = triggeringProperties0.getDependencies();
      LinkedList<Input> linkedList0 = new LinkedList<Input>();
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan0, map1, linkedList0, linkedList0);
      slangImpl0.run(compilationArtifact0, map0, map1);
      Long long2 = slangImpl0.run(compilationArtifact0, map0, map0);
      assertFalse(long2.equals((Object)long0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      LinkedList<Input> linkedList0 = new LinkedList<Input>();
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan0, (Map<String, ExecutionPlan>) null, linkedList0, linkedList0);
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn(compilationArtifact0).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      byte[] byteArray0 = new byte[8];
      SlangSource slangSource0 = SlangSource.fromBytes(byteArray0, "");
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(5409, (byte)59);
      slangImpl0.compileAndRun(slangSource0, linkedHashSet0, hashMap0, hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      LinkedList<ExecutionStep> linkedList0 = new LinkedList<ExecutionStep>();
      ExecutionPlan executionPlan1 = executionPlan0.addSteps(linkedList0);
      Long long0 = new Long((-1L));
      ExecutionPlan executionPlan2 = executionPlan1.setBeginStep(long0);
      ExecutionStep executionStep0 = new ExecutionStep();
      ControlActionMetadata controlActionMetadata0 = new ControlActionMetadata();
      ExecutionStep executionStep1 = executionStep0.setNavigation(controlActionMetadata0);
      ExecutionPlan executionPlan3 = executionPlan2.addStep(executionStep1);
      LinkedList<Input> linkedList1 = new LinkedList<Input>();
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan3, (Map<String, ExecutionPlan>) null, linkedList1, linkedList1);
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn(compilationArtifact0).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      SlangSource slangSource0 = new SlangSource("", "");
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      slangImpl0.compileAndRun(slangSource0, linkedHashSet0, hashMap0, hashMap0);
      LogManager.getLoggerRepository();
      // Undeclared exception!
      try { 
        slangImpl0.compile((SlangSource) null, (Set<SlangSource>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source can not be null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      Long long0 = new Long((-1L));
      LinkedList<Input> linkedList0 = new LinkedList<Input>();
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan0, (Map<String, ExecutionPlan>) null, linkedList0, linkedList0);
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn(compilationArtifact0).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      SlangSource slangSource0 = new SlangSource("", "");
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      slangImpl0.compileAndRun(slangSource0, linkedHashSet0, hashMap0, hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      HashMap<String, ExecutionPlan> hashMap0 = new HashMap<String, ExecutionPlan>();
      CompilationArtifact compilationArtifact0 = mock(CompilationArtifact.class, new ViolatedAssumptionAnswer());
      doReturn(hashMap0).when(compilationArtifact0).getDependencies();
      doReturn(executionPlan0).when(compilationArtifact0).getExecutionPlan();
      doReturn("(T<c`2i.;V").when(compilationArtifact0).toString();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn(compilationArtifact0, (CompilationArtifact) null).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Long long0 = new Long(1L);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      File file0 = MockFile.createTempFile("r.  #aPd", "");
      SlangSource slangSource0 = SlangSource.fromFile(file0);
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      slangImpl0.compileAndRun(slangSource0, linkedHashSet0, hashMap1, hashMap1);
      CompilationArtifact compilationArtifact1 = slangImpl0.compile(slangSource0, linkedHashSet0);
      assertNull(compilationArtifact1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      // Undeclared exception!
      try { 
        slangImpl0.run((CompilationArtifact) null, hashMap0, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Compilation artifact can not be null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      CompilationArtifact compilationArtifact0 = mock(CompilationArtifact.class, new ViolatedAssumptionAnswer());
      doReturn((ExecutionPlan) null).when(compilationArtifact0).getExecutionPlan();
      doReturn((String) null).when(compilationArtifact0).toString();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn(compilationArtifact0).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      File file0 = MockFile.createTempFile("r.  #aPd", "");
      SlangSource slangSource0 = SlangSource.fromFile(file0);
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      // Undeclared exception!
      try { 
        slangImpl0.compileAndRun(slangSource0, linkedHashSet0, hashMap0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.cloudslang.score.api.TriggeringProperties", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      Long long0 = new Long(0L);
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      SlangSource slangSource0 = new SlangSource("EVENT_ASYNC_LOOP_OUTPUT_START", "8m{%0CrSB~/HI(%b6");
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      // Undeclared exception!
      try { 
        slangImpl0.compile(slangSource0, linkedHashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("io.cloudslang.lang.api.SlangImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      CompilationArtifact compilationArtifact0 = mock(CompilationArtifact.class, new ViolatedAssumptionAnswer());
      doReturn((ExecutionPlan) null).when(compilationArtifact0).getExecutionPlan();
      doReturn((String) null).when(compilationArtifact0).toString();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn(compilationArtifact0).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      byte[] byteArray0 = new byte[6];
      SlangSource slangSource0 = SlangSource.fromBytes(byteArray0, "$;SGk{");
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      CompilationArtifact compilationArtifact1 = slangImpl0.compile(slangSource0, linkedHashSet0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        slangImpl0.run(compilationArtifact1, map0, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.cloudslang.score.api.TriggeringProperties", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      ScoreEventListener scoreEventListener0 = mock(ScoreEventListener.class, new ViolatedAssumptionAnswer());
      slangImpl0.subscribeOnAllEvents(scoreEventListener0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      ScoreEventListener scoreEventListener0 = mock(ScoreEventListener.class, new ViolatedAssumptionAnswer());
      slangImpl0.unSubscribeOnEvents(scoreEventListener0);
  }
}
